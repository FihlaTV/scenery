

Bugs:

Incomplete:
    Test-based-dev? for Update vs Render
        
    Ability to update size of canvas, etc.
    Handling rebuilding of layers when needed
    validateBounds() after self-changes could sneak by paint validation
    Flesh out Shape, with decomposition, bounds, hit regions (including strokes), etc.
    Flags for whether text / strokes are considered for hit regions
    Investigate getImageData for fonts (both hit regions and bounds)
    How to handle the mutable transforms and paint-invalidation / events?
        * increment transform ID and check?
        * getTransform() with a delegate?
    Visibility interaction with dirty paint / bounds, and events based on that
        * revert to setter/getter ?
        * Scene.updateLayer handling
    Don't send mark updates on invisible layers? Visibility change causes repaint?
    General optimization and organization so we can extract "self" from child rendering bounds, what is repainted, etc. better.

Performance:
    Improved Dirty regions
        * Thresholding for bounds restriction - restrictBounds flag is clunky, but allows override over this?
        * not full union of bounding boxes
        * Kd-tree / quadtree acceleration if child count is high? 
    Caching nodes with off-screen canvases for performance
    Combining fills and strokes (or other state optimization -- fills require ensuring CCW/CW stays the same, so we need flags to whitelist)
    Efficiency checks for fullRender using the functional style => imperative
    Automated benchmarks
    Investigate whether bounding boxes can be smaller based on clip shapes
    Non-automated performance tests:
        * Compare Matrix3 Float32Array v. Array (Array seems slightly faster possibly?)
        * Consider a Canvas 2D context delegate to examine drawing calls for Easel / Scene / Custom / etc.
    Optimizing for V8:
        http://floitsch.blogspot.com/2012/03/optimizing-for-v8-introduction.html

Features:
    * User interaction
    Accessibility and shadow DOM see html5 scene graph google doc
    Non-canvas handling
    Retina-screen handling
    "Lifting" of DOM nodes to top layer if selected
    AnimateTo-style animation
    Clipping => Dead region handling (clipping needs to be stored in a shape array since it can only be intersected or reset in Canvas)

Cleanliness / Debugging:
    *** Debug layer
    x,y vs point handling for translation etc. since we lack overriding?
    Bounds2: rename styling from xMin to minX
    Ability to create a debugging dump of scene graph
    Unit tests using canvas pixel querying
    Debugging traces removed with Closure compiler?

Other:
    Implement Bouncy example from the wishlist
    Report rgba alpha precision "bug" - spec says rgba(255,255,255,0.1112049520495820495802495) should not lose any digits on inspection after setting on context
    Highlighting and indexing of TODO items
