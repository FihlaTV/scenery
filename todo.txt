
Bugs:
    2x transform on certain updateLayer configurations

Move render / renderChildren, etc. from Node to Scene, since that is where the related logic exists

Bounds checking on updateScene

Visibility interaction with dirty paint / bounds, and events based on that
    * revert to setter/getter ?
    * Scene.updateLayer handling

Re-evaluate pre/post rendering and its uses - they can execute on different layers if they wrap children!
    * instead ideally override enter/leave state and write data to state

Cleanup of dirty-paint marking

Automated benchmarks

Non-automated performance tests:
    Compare Matrix3 Float32Array v. Array (Array seems slightly faster possibly?)

Combining fills and strokes
Investigate whether bounding boxes can be smaller based on clip shapes
User interaction
Flesh out Shape, with decomposition, bounds, hit regions (including strokes), etc.
Clipping => Dead region handling (clipping needs to be stored in a shape array since it can only be intersected or reset in Canvas)
AnimateTo-style animation
Caching nodes with off-screen canvases for performance
"Lifting" of DOM nodes to top layer if selected
flags for whether text / strokes are considered for hit regions
Implement Bouncy example from the wishlist
Retina-screen handling
Ability to update size of canvas, etc.
Unit tests using canvas pixel querying
Investigate getImageData for fonts (both hit regions and bounds)
Accessibility and shadow DOM see html5 scene graph google doc
Fill/Stroke/BeginPath delaying depending on last style, in CanvasLayer. SET fill-stroke beforehand
Report rgba alpha precision "bug"

Other:
Highlighting and indexing of TODO items
