
Bugs:
    Check Firefox/Safari on Mac event handling on multiple touch events
    Text direction 'rtl' bounds and display difference between canvas / SVG

Browsers
    Browser bugs? (get Canary / Aurora / IE10):
        [PATCH CREATED] miterLimit off in Chrome 24.0.1312.52 m
            Submitted as https://bugs.webkit.org/show_bug.cgi?id=108763
            Patch created, see http://www.webkit.org/coding/contributing.html
                * running WebKit layout tests
                    Causes failure in bad-test of WebKit/LayoutTests/fast/canvas/canvas-incremental-repaint.html
                * then bugs + references to http://phet.colorado.edu/files/scenery/tests/browsers/chrome-miter-limit.html
            SVG miterLimit calculation in https://svgwg.org/svg2-draft/painting.html
            Canvas spec note at http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#trace-a-path
        [FIXED IN UPDATE] bevel instead of miter on the "close" part of the hex: Firefox 18.0.1
        [PENDING MAJOR WORK] Chrome 24.0.1312.52 m bug in zooming fillText() -- mobile Safari OK (maybe different from webkit, since it's not antialiased?)
        [TODO] Report rgba alpha precision "bug" - spec says rgba(255,255,255,0.1112049520495820495802495) should not lose any digits on inspection after setting on context
        [UNKNOWN] Firefox quadratic stroke precision handling, and definition of "inflated path" at http://www.whatwg.org/specs/web-apps/current-work/#trace-a-path
            See http://jsfiddle.net/pGrSN/2/ or stroke-endpoint.html
        [UNKNOWN] Firefox Win clearRect seems to be off when transformed (rotation)
            Not present in Ubuntu 12.04 v18 or nightly
        [UNKNOWN] IE9 will take click events on an SVG element with "pointer-events: none", but only if there is nothing "clickable" behind that point
            What is considered "clickable", and will it affect us?
        [SUBMITTED] Chrome/Safari seems to cache the charset of loaded JS (unable to override)
            Firefox OK
            Chromium bug: https://code.google.com/p/chromium/issues/detail?id=176694
            WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=110031
            Try using a unicode-escaped quote?
        
        [KNOWN] Chrome XMLSerializer.serializeToString dropping namespaces: https://code.google.com/p/chromium/issues/detail?id=88295
        [KNOWN] overflow: hidden not working for SVG on IE
    For canvas, create a drawing function that exhibits all differences?
    measureText for webkit?

Questions for SB (or others):
    Way to side-by-side install Firefox and Aurora?
    Preferred mixin styles?
    Build style where:
        Execution order is decided either by custom code or Closure compiler
        Execution order (since it doesn't change often) is written out with a file that allows us to statically load all JS files in the correct order for development
        Build is done with Closure, either using its dependency order or filtered by custom code
            Allows us to do production builds and minification across all of our repos, a la the Require.js build
        Run this JS after window load, to ensure all necessary resources are up? - preloader would be separate
        Advantages:
            Could allow shortcuts like include( 'phet.X' ) to include a phet.X.Y, phet.X.Z, etc.
            Wouldn't have the import-style errors that we have had with Require.js and getting things running.
            Can access code directly, instead of through the import
            Closure can build a source map for the minified code
            File list would also be usable by QUnit + qHint + JSHint for linting code in unit tests
        Disadvantages:
            Would have dependency issues if A depends on jQuery X, B depends on jQuery Y, and we can't reconcile it (Require.js could)
            If using Closure's dependency handling, will have goog.requires and goog.provides in namespaces.
            No plugins for images / html templates / i18n. Depends on how we are deploying translations whether rebuild is needed?

Questions for team:
    https://travis-ci.org/ for continuous integration?
    Should enter / exit events be fired before / after touch up/down events?
        Note: check DOM convention?

General:
    * Add toggle for Canvas / SVG in Devious Dragging example
    * Email OIT about phet.colorado.edu/scenery
        Investigate GitHub pages instead? See http://forrst.com/posts/GitHub_Pages_gh_pages_branch_as_a_subfolder_wi-4ZT
    ** Extract phet-math (phet.math namespace) code to separate repo
    ** Way of not including SVD and other non-used phet-math parts in scenery (with dependencies).
        ** Prototype Closure compiler for dependency resolution, pick the discussion from email?
    * Extract phet-general code to separate repo (that would be shared also inside the scene graph?) -- or should we duplicate this small bit of functionality?
    ** Extract molecule-shapes code to separate repo
    Test zooming on browsers
    RenderState - consider stack-based transforms
    DOM events => benchmarks => create Path => layer changes
    Documentation and Examples (always an item)
    Take extension mechanism from Backbone.js: https://github.com/documentcloud/backbone/blob/master/backbone.js#L1471-L1502

Code:
    Rename 'params' to 'options'
    Rename 'main' to something else
    Verify Input correctness with Scene now being a Node, and with trails
    Organize unit tests into separate files, etc.
        Lint unit tests
    Validation of example HTML, CSS, etc.
    Either use Require.js or bake in support. Probably good to do for reducing code size with simulations.
        Almond for fallbacks?
    Switch to jQuery 2 (wait for a stable build?)
    _.extend that works on ES5 setter/getter pairs? Check $.extend? Check ES5 spec?
    Modularization of support code (math?)
    Vet recursive bounds code against empty area
    * Code headers and copyright? Licenses?

Canvas:
    Consider adding layer strategies that enforce either a low-def or hi-def (if available) canvas backing store, so we can have crispness when desired
    Check reindexing, there may be bugs
    Restricted bounds intersection pruning (also see performance)
        For canvas rendering, how to handle restricted bounds in depthFirstUntil? Generalize, and allow a return flag to indicate not hitting children?
    Clip shapes that are nested are probably broken
    CanvasLayer styles are probably broken - resetStyles seems fishy if not in sync (i.e. lineCap)

DOM:
    * DOM bounds failure on construction, for x and y setters (or something is wrong with easel-tests DOM example, investigate?)
    *** CSS3 transforms look amazing See if we can do more in DOM nodes with transforms
        Example: http://www.clicktorelease.com/code/css3dclouds/
    Handle correct layering of DOM nodes inside a layer, etc.
    [IMPLEMENTATION REMOVED] Hoisting of interactive DOM nodes
        - HoistedDOMLayer that adds (2147483647/2) to its z-index
            Pro:
                layering will work in the browser
            Con:
                splits more layers than necessary
                have to add a listener in the capture phase of the listener to flag the event as hitting the interactive node?
                need to check for 'interactive' flag?
                Events system may need to discard anything in the region of an interactive node's bounds?
        - Either delegate (just set transform) or have inline with just SVG over (with pointer-events)

** SVG: -- important because we can layer DOM nodes properly under SVG
    Allow different options for splitting the root transform between CSS / SVG
    * Apply pointer-events: none
    *** Highly recommend <image xlink:href="...">, since we can include URL / data URL, nesting works, and we don't pollute the id namespace
        Direct nesting fails in IE9
    * Need to be able to pull bounds out of SVG fragments.
        Should be specified in the SVG element.
    SVGLayer needs have CSS transform with a scale of 1, apply scale to containing group instead?
    Examine Raphael JS for SVG support and Code.
    Possible SVG Safari issues if bounds aren't whole-pixel?
    Investigate SVG crispEdges to see whether it would be valuable for other backends

WebGL:
    Use display lists?
    Examine test code for considerations for implementing Shape.

Layers:
    LayerBoundaries prototype? Might be useful as a toString(), and for handling queries
    *** Consider certain conversions in layering, for instance an SVG tree could render as a DOM node (SVG would take care of the scaling transform).
        This could handle our caching issues
    * Consider caching / layering modification as separate nodes added in (i.e. like a renamed CanvasLayer, or CachingLayer, or something like that)
        Or use mixins to add to instances? - sketchy and hard to remove
        ** Or is it possible to detect runtime hotspots based on elapsed time rendering, how much it is being rendered,
            what transforms it is under (are those changing), and possibly number of children.
    * Does it make sense to handle caching of nodes to an image => draw in different layer type?
    Proof-of-concept for performance and DOM integration

* Event dispatch:
    *** - events should be more like parameter objects!
    *** - Drag Handler need to pass transform and/or trail in input events
    DragHandler - mouse buttons handling (left/middle/right can cause drag issues)
    Consider finger.isDown for checking general (but possibly mouse related) events
    Indie UI events should be tracked: https://dvcs.w3.org/hg/IndieUI/raw-file/default/src/indie-ui-events.html
    Verify SVG stacking is practical with test
        -- do we need pointer-events on every element, or just the top-level svg?
    Picking - see TODO under Node
    Enter/Exit events on up/down? - see question above
    Freeze event handlers, a la the DOM 3 Events spec? Or copy Piccolo?
    Best pattern for handling drags / more persistence? Add listeners directly to finger?
        Standard flags on fingers for whether they are performing an operation? dragging, etc.
        A way to 'cancel' the operation a finger is currently doing, so it can switch to a different one?
    Mouse enter/exit needs to trigger for node add/remove
        Does it make sense to hit-test every frame for this?
    How to hit test against DOM nodes?
    Use cases:
        Zoom / Pinch / Drag with interrupts
        Increased hit areas for touch
        Showing where the fingers are with a display (for projectors)

Accessibility / shadow DOM:
    ARIA in general?
    see http://www.paciellogroup.com/blog/2011/12/html5-canvas-accessibility-discussions-2009-2011/
        and http://www.paciellogroup.com/blog/2012/09/html5-accessibility-september-2012/
    see html5 scene graph google doc
    see http://www.html5accessibility.com/
    consider something like http://bl.ocks.org/mbostock/1276463

Node:
    Feature TODO:
        Sub-tree opacity (like setTransparency in Piccolo)
            'transparency', 'opacity', or 'alpha'?
            Canvas: globalAlpha?
            SVG: how to handle?
        Pickable flag - check Piccolo behavior. consider flag for whether invisible nodes get picked or not (probably yes, for hit regions!)
    Since cursor might support data URLs, we can have custom cursors?
    Batching of insertions / removals, so that we could consider completely changing children, removing all children, etc. at the same time
        Possibly consider batching these together until updateScene?
        Then: add children mutator (setChildren, getChildren) so that it is convenient to set up trees of nodes?
            Would require renaming node.children to node._children, and consider whether getChildren should have the slice precaution
    A system for cursor handling that also supports dragging or 'persistent' cursor handling
    Bounds after rotation seems to be a bit too wide
    * Fire event on change of layerStrategy, and possibly rethink layerStrategy design
    Mix-in notifier for listeners
    Canvas fill gradients / patterns
        Can this be abstracted across SVG / WebGL layers also? -- probably WebGL _much_ more efficiently with shaders
    For prepend-flags, set in parameter object instead of boolean flag? (somewhat hard-to-read code)
    Visibility interaction with dirty paint / bounds, and events based on that
        Scene.updateLayer shouldn't be called if only invisible nodes were changed?
    Don't send mark updates on invisible layers? Visibility change causes repaint?
    General optimization and organization so we can extract "self" from child rendering bounds, what is repainted, etc. better.
    Function for higher-performance possibly-expanded bounds for redraw?
        Should we have an option so that selfBounds uses this?
    For bounds checking during rendering, isInGlobalBounds( globalBounds, currentTransform ) would help, and shapes could be more specific
    Canvas: masking with sub-canvas rendering using globalCompositeOperation. CSG should be possible, and hit tests should be better. Bounds might be harder

Shapes:
    Finiteness checks
    Investigate shear / scale effects on stroking -- important for bounds
    Quadratic curve offsets need implementation improvement (32 sub-quadratics is too costly)
    Not implemented: arc, arcTo, ellipse, cubic bezier
    Features not implemented: precise intersection with bounding box (not just intersection of bounds)
    Nonzero/evenodd support (not yet implemented in browsers)
    Self-intersection in 'stroked' path
    WebGL
    Function for higher-performance possibly-expanded bounds for redraw?
    Consider bounding box handling for an arbitrary transform, for use with Node's isInGlobalBounds( globalBounds, currentTransform ).

Text:
    Unit tests
    *** Performance of text bounds!
        Comparison vs accurate bounds for all of the various text bounds methods
    Investigate SVG's writing-mode for rtl/ltr handling (also direction and unicode-bidi)
    Handling multi-line strings
    WebGL / DOM options
    Allow stroking of text.

Scene:
    Acceleration of layer lookup
    Spread out z-indices and be adaptive so we don't have to change as many indices where possible
    refreshLayers() implementation (currently rebuilds all layers, but should be optimized so it doesn't need to redraw as much)
    Foundation for multiple view implementations
    spread out z-indices and be adaptive so we don't have to change as many indices where possible

Trail:
    ** Fast Trail lookup data structure (used in scenes to find where a trail is in terms of pointers, and also for Node-to-trail handling)
    ** Verify current indexing handling (is it sufficient to just reindex trails on layer refreshes?)
    Use indices where possible (next and previous!)
    DO we need indices in Node.dispatchEvent? May be bottleneck
    Cleanup of nestedForwards/nestedBackwards, possibly based on a Side-like implementation. Decent code duplication!
    Better name for copy()? clone()? getCopy()? Possibly use a copy constructor?
    depthFirstUntil should possibly have option for defensive copies of the pointers?

Build:
    Add JSHint into Sublime Text with plugin?

Performance:
    *** Garbage collection jitters!
    * Prune node rendering based on visible dirty bounds
    Not re-rasterizing objects immediately during dragging or other features? (Auto-detect as hotspot maybe?)
    Ensure that we are triggering the hardware acceleration for CSS3 transforms
    Consider model changes in setInterval: http://www.chandlerprall.com/2012/06/requestanimationframe-is-not-your-logics-friend/
    * IE9 performance (possible regression?)
        Get DebugContext to work with Easel for a comparison? Or just compare against vanilla Canvas code
        "strict mode" removal wasn't effective
        Possible that it's the clipping that we are doing?
    Framebuffer with context.drawImage( bufferContext, 0, 0 );
    Consider child counts, so that we can decide which layers to keep in a layer rebuild?
    Piece improvements with direct piece.render calls instead of switch? -- profile
    Improved Dirty regions
        * not full union of bounding boxes
        * Kd-tree / quadtree acceleration if child count is high? 
    Caching nodes with off-screen canvases for performance
        Global-bounds based. Store global transform, so we can (each frame) compare the current transform and see if it is just an
        approximately integer-offset transformation. Then we can render quickly on integer boundaries with no transforms / scaling for speed.
        Consider CSS3 transforms for possibly increased performance compared to drawImage( x, 0, 0 ), as we can do this with anything
        Add RenderState flag that allows using cached handling, or forces a full redraw
    Improve quadratic bezier offset curve computation
    Combining fills and strokes (or other state optimization -- fills require ensuring CCW/CW stays the same, so we need flags to whitelist)
        ! shape strokes happen with linewidth scaled by current transform -- if transforms change scale (or possibly shear), this will break
    Efficiency checks for fullRender using the functional style => imperative
    Automated benchmarks
    Investigate whether bounding boxes can be smaller based on clip shapes
    Non-automated performance tests:
        Compare Matrix3 Float32Array v. Array (Array seems slightly faster possibly?)
        Consider a Canvas 2D context delegate to examine drawing calls for Easel / Scene / Custom / etc.
    Checklists:
        http://www.html5rocks.com/en/tutorials/canvas/performance/

Benchmarks:
    (deprecate?) Benchmark.js-based:
        async vs defer vs queued
        Ability to re-run tests to add precision? Or just a control for precision?
            Add a flag for the tests being run (or null for all tests)
            Store results[][] instead of benchmarks[][], and add benchmarks to the result (combining statistics, etc).
            Add ability to scrap statistics
            Have an updateResult function that will handle the updating
            Benchmark cycling feedback?
        If we can, handle both synchronous and asynchronous tests. Maybe this is possible to wrap with a deferred so that we can handle both without specifying a flag?
            Consider forking Benchmark.js and submitting a pull request if this is easy
            Reason for this is the issue where in asynchronous tests, immediate calls to deferred.resolve() do not allow us to measure performance if it is slow
                See http://jsperf.com/asynchronous-limit
            Ask John David Dalton maybe?
            Synchronous: for checking Scenery overhead
            Asynchronous - requestAnimationFrame loops
                We need to verify that these tests are fully taxing the system (maybe 20% less FPS than an empty loop in requestAnimationFrame?)
    Performance based:
        * submodules of self?
        Add exception handling
        Consider using Local Storage to show previous results?
        Examine subclass penalty for Shape in Path instead of Node
    Using xStats (https://github.com/bestiejs/xstats.js), also add memory output for verifying lack of memory leaks?

Property / Notifiers:
    Add the listeners, etc. straight to the object?
        Investigate:
            WatchJS - https://github.com/melanke/Watch.JS
            Backbone - a la sidebar.set( { color: 'white' } ); -- but not property specific
                or Embed or Angular?
            Bacon.js?
    Possibly use jQuery events?

Math:
    Output SVGMatrix easily
    Separate out into separate repo
        For submodule: git submodule foreach --recursive 'git pull origin master && git checkout master'
            with "git push --recurse-submodules=on-demand" to commit?
    Add mutable style, and possibly a flag to see whether something has been modified?
    Investigate math library alternatives, like Numeric JS

Color:
    Should use JS style color definitions instead

Features:
    AnimateTo-style animation
    Clipping => Dead region handling (clipping needs to be stored in a shape array since it can only be intersected or reset in Canvas)
    Color handling?
    Investigate DAG version?
    Include MathJax text?
    Property change events for nodes?

Cleanliness / Debugging:
    *** Debug layer
        Or just debug out a tree view (using scenery of course).
            Previews inside nodes if hasSelf()
            Show layers and bounds
            Mouse-over shows bounds (possibly recursive), etc.
    Ability to create a debugging dump of scene graph
    Code style should match https://github.com/rwldrn/idiomatic.js

Other:
    Pull requests to underscore.js / LoDash? for FunctionalUtils wishlist ... or fork
    Implement Bouncy example from the wishlist
    Highlighting and indexing of TODO items

API Usage:

// implicit layering switches due to node types

// force SVG layer(s) under node where possible
node.layerStrategy.setPreferredLayerType( scenery.LayerType.SVG );

// force a layer split before / after
node.layerStrategy.setSplitBefore( true );
node.layerStrategy.setSplitAfter( true );

node.layerStrategy = new SomethingLayerStrategy();

// performance caching (new node, so we can do render path changes?)
var cacheNode = new CanvasLayerCache( node ) {{
  var domNode = <svg, dom, canvas, ...>

  // internal to CanvasLayerCache:
  cacheNode.layerStrategy = new CanvasCachingStrategy( domNode, ... ) {{
    // internal to CanvasCachingStrategy
    preferredLayerType = CacheLayer( ... domElement ... )?
    
    .. handle CSS3 transforms here
  }};
}} // paints into canvas(es), with custom layer type



var node = scenery.SVG( '<svg>....</svg>' | $( SVGEelement ) );
node.x = (etc.)

scene resize listeners?
