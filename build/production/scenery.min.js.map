{"version":3,"file":"scenery.min.js","sources":["../../node_modules/grunt-requirejs/node_modules/almond/almond.js","../../common/assert/js/assert.js","../../common/phet-core/js/phetAllocation.js","../../js/scenery.js","../../js/debug/DebugContext.js","../../common/dot/js/dot.js","../../common/phet-core/js/extend.js","../../common/phet-core/js/inherit.js","../../common/phet-core/js/Poolable.js","../../common/dot/js/Util.js","../../common/dot/js/Vector2.js","../../common/dot/js/Vector4.js","../../common/dot/js/Vector3.js","../../common/dot/js/Matrix4.js","../../common/dot/js/Matrix3.js","../../common/dot/js/Ray2.js","../../common/dot/js/Transform3.js","../../common/dot/js/Bounds2.js","../../common/kite/js/kite.js","../../common/kite/js/segments/Segment.js","../../common/kite/js/segments/Line.js","../../common/kite/js/segments/Arc.js","../../common/kite/js/util/Subpath.js","../../common/kite/js/../parser/svgPath.js","../../common/kite/js/util/LineStyles.js","../../common/kite/js/segments/Quadratic.js","../../common/kite/js/segments/Cubic.js","../../common/kite/js/segments/EllipticalArc.js","../../common/kite/js/Shape.js","../../js/util/FixedNodeEvents.js","../../js/layers/LayerStrategy.js","../../js/nodes/Node.js","../../js/util/Trail.js","../../js/input/DownUpListener.js","../../js/input/ButtonListener.js","../../js/input/Event.js","../../js/input/Pointer.js","../../js/input/Mouse.js","../../js/input/Touch.js","../../js/input/Pen.js","../../js/input/Key.js","../../js/input/Input.js","../../js/input/SimpleDragHandler.js","../../js/layers/Layer.js","../../js/util/CanvasContextWrapper.js","../../js/util/TrailPointer.js","../../js/util/Util.js","../../js/layers/CanvasLayer.js","../../js/layers/DOMLayer.js","../../js/layers/LayerBoundary.js","../../js/layers/LayerBuilder.js","../../js/layers/LayerType.js","../../js/layers/SVGLayer.js","../../js/layers/Renderer.js","../../js/nodes/CanvasNode.js","../../js/nodes/Fillable.js","../../js/nodes/Strokable.js","../../js/nodes/Path.js","../../js/nodes/Circle.js","../../common/phet-core/js/escapeHTML.js","../../js/nodes/DOM.js","../../js/nodes/HBox.js","../../js/util/Font.js","../../js/nodes/Text.js","../../js/nodes/HTMLText.js","../../js/nodes/Image.js","../../js/nodes/Line.js","../../js/nodes/Rectangle.js","../../js/nodes/Plane.js","../../js/nodes/VBox.js","../../js/util/AccessibilityPeer.js","../../js/util/Color.js","../../js/util/Gradient.js","../../js/util/LinearGradient.js","../../js/util/LiveRegion.js","../../js/util/Instance.js","../../js/util/Pattern.js","../../js/util/RadialGradient.js","../../js/util/RenderInterval.js","../../js/util/SceneImage.js","../../js/util/SceneryStyle.js","../../common/phet-core/js/collect.js","../../js/Scene.js","../../js/main.js","../../common/kite/js/main.js","../../common/dot/js/Complex.js","../../common/dot/js/ConvexHull2.js","../../common/dot/js/Dimension2.js","../../common/dot/js/EigenvalueDecomposition.js","../../common/dot/js/LinearFunction.js","../../common/dot/js/LUDecomposition.js","../../common/phet-core/js/isArray.js","../../common/dot/js/SingularValueDecomposition.js","../../common/dot/js/QRDecomposition.js","../../common/dot/js/Matrix.js","../../common/dot/js/Permutation.js","../../common/dot/js/Ray3.js","../../common/dot/js/Rectangle.js","../../common/dot/js/Transform4.js","../../common/dot/js/main.js","../../common/phet-core/js/callSuper.js","../../common/phet-core/js/inheritPrototype.js","../../common/phet-core/js/loadScript.js","../../common/phet-core/js/main.js","../../js/production-config.js"],"names":[],"mappings":"CAAA,WAEA,GAAA,GAAA,EAAA,GACA,SAAA,GAEA,QAAA,GAAA,EAAA,GACA,MAAA,GAAA,KAAA,EAAA,GAEA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QACA,IAAA,GAAA,MAAA,EAAA,OAAA,GACA,GAAA,EAAA,CAGA,IAFA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,OAAA,EAAA,MAAA,MACA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAEA,GADA,EAAA,EAAA,GACA,MAAA,EACA,EAAA,OAAA,EAAA,GACA,GAAA,MACA,IAAA,OAAA,EAAA,CACA,GAAA,IAAA,IAAA,OAAA,EAAA,IAAA,OAAA,EAAA,IACA,KACA,GAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,GAAA,GAIA,EAAA,EAAA,KAAA,SACA,KAAA,EAAA,QAAA,QACA,EAAA,EAAA,UAAA,GAGA,KAAA,GAAA,IAAA,EAAA,CAEA,IADA,EAAA,EAAA,MAAA,KACA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,CAEA,GADA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,KACA,EACA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAEA,GADA,EAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,MACA,IACA,EAAA,EAAA,IACA,CACA,EAAA,EACA,EAAA,CACA,OAKA,GAAA,EACA,OAEA,GAAA,GAAA,EAAA,KACA,EAAA,EAAA,GACA,EAAA,IAGA,GAAA,IACA,EAAA,EACA,EAAA,GAEA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,EAAA,EAAA,KAAA,MAGA,MAAA,GAEA,QAAA,GAAA,EAAA,GACA,MAAA,YACA,MAAA,GAAA,MAAA,EAAA,EAAA,KAAA,UAAA,GAAA,QACA,EACA,MAIA,QAAA,GAAA,GACA,MAAA,UAAA,GACA,MAAA,GAAA,EAAA,IAGA,QAAA,GAAA,GACA,MAAA,UAAA,GACA,EAAA,GAAA,GAGA,QAAA,GAAA,GACA,GAAA,EAAA,EAAA,GAAA,CACA,GAAA,GAAA,EAAA,SACA,GAAA,GACA,EAAA,IAAA,EACA,EAAA,MAAA,EAAA,GAEA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GACA,KAAA,IAAA,OAAA,MAAA,EAEA,OAAA,GAAA,GAEA,QAAA,GAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,KAAA,EAKA,OAJA,GAAA,KACA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,UAAA,EAAA,EAAA,EAAA,UAGA,EACA,GAgCA,QAAA,GAAA,GACA,MAAA,YACA,MAAA,IAAA,EAAA,QAAA,EAAA,OAAA,QAzIA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,KAAA,KAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,KA0GA,GAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAqBA,OApBA,GAAA,EAAA,GACA,IACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,IAEA,EAEA,EADA,GAAA,EAAA,UACA,EAAA,UAAA,EAAA,EAAA,IAEA,EAAA,EAAA,IAGA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IACA,EAAA,EAAA,MAIA,EAAA,EAAA,EAAA,IAAA,EAAA,EACA,EAAA,EACA,GAAA,EACA,EAAA,IAQA,GACA,QAAA,SAAA,GACA,MAAA,GAAA,IAEA,QAAA,SAAA,GACA,GAAA,GAAA,EAAA,EACA,OAAA,mBAAA,GACA,EAEA,EAAA,OAGA,OAAA,SAAA,GACA,OACA,GAAA,EACA,IAAA,GACA,QAAA,EAAA,GACA,OAAA,EAAA,MAIA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IADA,EAAA,GAAA,EACA,kBAAA,GAAA,CAMA,IALA,GAAA,EAAA,QAAA,EAAA,QACA,UACA,UACA,UACA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAGA,GAFA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,EACA,YAAA,EACA,EAAA,GAAA,EAAA,QAAA,OACA,IAAA,YAAA,EACA,EAAA,GAAA,EAAA,QAAA,GACA,GAAA,MACA,IAAA,WAAA,EACA,EAAA,EAAA,GAAA,EAAA,OAAA,OACA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,OACA,CAAA,IAAA,EAAA,EAIA,KAAA,IAAA,OAAA,EAAA,YAAA,EAHA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,OACA,EAAA,GAAA,EAAA,GAKA,EAAA,EAAA,MAAA,EAAA,GAAA,GACA,IACA,GAAA,EAAA,UAAA,GAAA,EAAA,UAAA,EAAA,GACA,EAAA,GAAA,EAAA,QACA,IAAA,GAAA,IACA,EAAA,GAAA,QAGA,KACA,EAAA,GAAA,IAGA,EAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,gBAAA,GACA,EAAA,GACA,EAAA,GAAA,GAEA,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,SACA,EAAA,EACA,EAAA,QACA,EAAA,EACA,EAAA,EACA,EAAA,MAEA,EAAA,GAGA,EAAA,GAAA,aAEA,kBAAA,KACA,EAAA,EACA,EAAA,GAEA,EACA,EAAA,EAAA,EAAA,EAAA,GAEA,WAAA,WACA,EAAA,EAAA,EAAA,EAAA,IACA,GAEA,IAEA,EAAA,OAAA,SAAA,GAKA,MAJA,GAAA,EACA,EAAA,MACA,EAAA,EAAA,KAAA,EAAA,UAEA,GAEA,EAAA,SAAA,EACA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,SACA,EAAA,EACA,MAEA,EAAA,EAAA,IAAA,EAAA,EAAA,KACA,EAAA,IACA,EACA,EACA,KAIA,EAAA,KAAA,QAAA,MCjQA,EDmQA,SAAA,cCjQA,EAAA,iBAAA,WAAA,WAEA,MAAA,UAAA,EAAA,GACA,GAAA,GAAA,UAAA,EACA,EAAA,OAAA,KAAA,SAAA,OAAA,IAAA,GACA,EAAA,GAAA,OAAA,IAAA,GAAA,CACA,OAAA,GACA,KAEA,SAAA,EAAA,GACA,GAAA,GAAA,kBAAA,GAAA,IAAA,CACA,KAAA,EAAA,CACA,GAAA,OAAA,WAAA,gCAAA,OAAA,UAAA,QACA,IACA,KAAA,IAAA,OACA,MAAA,GACA,EAAA,EAAA,aAAA,EAAA,MAGA,KAAA,IAAA,OAAA,qBAAA,QCnBA,EAAA,4BAAA,WAAA,WAEA,MAAA,UAAA,GACA,GAAA,OAAA,MAAA,CACA,GAAA,EACA,KACA,KAAA,IAAA,OACA,MAAA,GACA,EAAA,EAAA,MAEA,OAAA,MAAA,KACA,OAAA,MAAA,IACA,MAAA,EACA,WAGA,IAAA,GAAA,OAAA,MAAA,EACA,GAAA,QACA,EAAA,OAAA,GAGA,EAAA,OAAA,IAAA,EAFA,EAAA,OAAA,GAAA,EAIA,EAAA,OAAA,WACA,GAAA,GAAA,OAAA,KAAA,EAAA,OACA,GAAA,EAAA,OAAA,EAAA,SAAA,GACA,MAAA,GAAA,OAAA,KAEA,EAAA,KAAA,EAAA,SAAA,GACA,QAAA,IAAA,EAAA,OAAA,GAAA,KAAA,UC7BA,EAAA,mBAAA,UAAA,gBAAA,4BAAA,SAAA,GAEA,OAAA,cAAA,KACA,OAAA,mBAAA,EAAA,iBAAA,iBACA,OAAA,gBAAA,KACA,OAAA,gBAAA,KACA,OAAA,wBAAA,KACA,OAAA,eAAA,EAAA,2BACA,IAAA,GAAA,SAAA,cAAA,UACA,EAAA,EAAA,WAAA,KACA,QACA,OAAA,KACA,cAAA,EACA,eAAA,EACA,mBAAA,WACA,OAAA,gBAAA,SAAA,GACA,QAAA,IAAA,KAGA,oBAAA,WACA,OAAA,gBAAA,MAEA,mBAAA,WACA,OAAA,gBAAA,SAAA,GACA,QAAA,IAAA,KAGA,oBAAA,WACA,OAAA,gBAAA,MAEA,2BAAA,WACA,OAAA,wBAAA,SAAA,GACA,QAAA,IAAA,KAGA,4BAAA,WACA,OAAA,wBAAA,SCpCA,EAAA,8BAAA,UAAA,mBAAA,SAAA,GAGA,QAAA,GAAA,GACA,MAAA,MAAA,UAAA,GAEA,QAAA,GAAA,GACA,QAAA,IAAA,WAAA,EAAA,KAEA,QAAA,GAAA,GACA,EAAA,GAEA,QAAA,GAAA,EAAA,GACA,EAAA,EAAA,MAAA,EAAA,IAEA,QAAA,GAAA,EAAA,GACA,SAAA,GAAA,IAAA,EAAA,OACA,EAAA,EAAA,MAEA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,OAAA,EACA,EAAA,KAAA,EAAA,GAEA,EAAA,IAEA,IAAA,MAvBA,GAAA,GAAA,EAAA,kBA0BA,GAAA,aAAA,SAAA,GACA,KAAA,SAAA,EACA,IAAA,EAAA,UACA,KAAA,QAAA,EAAA,SAGA,IAAA,GAAA,EAAA,YA8iBA,OA7iBA,GAAA,WACA,YAAA,EACA,GAAA,UAEA,MADA,GAAA,UACA,KAAA,SAAA,QAEA,GAAA,SAEA,MADA,GAAA,SACA,KAAA,SAAA,OAEA,GAAA,UAEA,MADA,GAAA,UACA,KAAA,SAAA,QAEA,OAAA,WACA,EAAA,UACA,KAAA,SAAA,UAEA,KAAA,WACA,EAAA,QACA,KAAA,SAAA,QAEA,QAAA,WACA,EAAA,WACA,KAAA,SAAA,WAEA,GAAA,oBAEA,MADA,GAAA,oBACA,KAAA,SAAA,kBAEA,GAAA,kBAAA,GACA,EAAA,mBAAA,GACA,KAAA,SAAA,iBAAA,GAEA,MAAA,SAAA,EAAA,GACA,EAAA,SACA,EACA,IAEA,KAAA,SAAA,MAAA,EAAA,IAEA,OAAA,SAAA,GACA,EAAA,UAAA,IACA,KAAA,SAAA,OAAA,IAEA,UAAA,SAAA,EAAA,GACA,EAAA,aACA,EACA,IAEA,KAAA,SAAA,UAAA,EAAA,IAEA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,aACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,aAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,gBACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,eAAA,WACA,EAAA,kBACA,KAAA,SAAA,kBAEA,GAAA,eAEA,MADA,GAAA,eACA,KAAA,SAAA,aAEA,GAAA,aAAA,GACA,EAAA,cAAA,GACA,KAAA,SAAA,YAAA,GAEA,GAAA,4BAEA,MADA,GAAA,4BACA,KAAA,SAAA,0BAEA,GAAA,0BAAA,GACA,EAAA,2BAAA,GACA,KAAA,SAAA,yBAAA,GAEA,GAAA,yBAEA,MADA,GAAA,yBACA,KAAA,SAAA,uBAEA,GAAA,uBAAA,GACA,EAAA,wBAAA,GACA,KAAA,SAAA,sBAAA,GAEA,GAAA,eAEA,MADA,GAAA,eACA,KAAA,SAAA,aAEA,GAAA,aAAA,GACA,EAAA,cAAA,GACA,KAAA,SAAA,YAAA,GAEA,GAAA,aAEA,MADA,GAAA,aACA,KAAA,SAAA,WAEA,GAAA,WAAA,GACA,EAAA,YAAA,GACA,KAAA,SAAA,UAAA,GAEA,qBAAA,SAAA,EAAA,EAAA,EAAA,GAOA,MANA,GAAA,wBACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,qBAAA,EAAA,EAAA,EAAA,IAEA,qBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GASA,MARA,GAAA,wBACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,qBAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,cAAA,SAAA,EAAA,GAKA,MAJA,GAAA,iBACA,EACA,IAEA,KAAA,SAAA,cAAA,EAAA,IAEA,GAAA,iBAEA,MADA,GAAA,iBACA,KAAA,SAAA,eAEA,GAAA,eAAA,GACA,EAAA,gBAAA,GACA,KAAA,SAAA,cAAA,GAEA,GAAA,iBAEA,MADA,GAAA,iBACA,KAAA,SAAA,eAEA,GAAA,eAAA,GACA,EAAA,gBAAA,GACA,KAAA,SAAA,cAAA,GAEA,GAAA,cAEA,MADA,GAAA,cACA,KAAA,SAAA,YAEA,GAAA,YAAA,GACA,EAAA,aAAA,GACA,KAAA,SAAA,WAAA,GAEA,GAAA,eAEA,MADA,GAAA,eACA,KAAA,SAAA,aAEA,GAAA,aAAA,GACA,EAAA,cAAA,GACA,KAAA,SAAA,YAAA,GAEA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,aACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,UAAA,EAAA,EAAA,EAAA,IAEA,SAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,YACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,SAAA,EAAA,EAAA,EAAA,IAEA,WAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,cACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,WAAA,EAAA,EAAA,EAAA,IAEA,GAAA,YAEA,MADA,GAAA,YACA,KAAA,SAAA,UAEA,GAAA,UAAA,GACA,EAAA,WAAA,GACA,KAAA,SAAA,SAAA,GAEA,UAAA,WACA,EAAA,aACA,KAAA,SAAA,aAEA,KAAA,SAAA,GACA,EAAA,OAAA,GAAA,GAAA,QACA,KAAA,SAAA,KAAA,IAEA,OAAA,SAAA,GACA,EAAA,SAAA,GAAA,GAAA,QACA,KAAA,SAAA,OAAA,IAEA,oBAAA,SAAA,EAAA,GACA,EAAA,sBAAA,GACA,EACA,IACA,IACA,KAAA,SAAA,oBAAA,EAAA,IAEA,oBAAA,SAAA,EAAA,GAKA,MAJA,GAAA,sBAAA,GACA,EACA,IACA,IACA,KAAA,SAAA,oBAAA,EAAA,IAEA,mBAAA,SAAA,GACA,EAAA,qBAAA,GAAA,GAAA,QACA,KAAA,SAAA,mBAAA,IAEA,KAAA,SAAA,GACA,EAAA,OAAA,GAAA,GAAA,QACA,KAAA,SAAA,KAAA,IAEA,UAAA,WACA,EAAA,aACA,KAAA,SAAA,aAEA,cAAA,SAAA,EAAA,EAAA,GASA,MARA,GAAA,gBAAA,GACA,EACA,EACA,IAEA,EACA,IAEA,KAAA,SAAA,cAAA,EAAA,EAAA,IAEA,SAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,WAAA,SAAA,GACA,EACA,EACA,EACA,IAEA,EACA,EACA,IAEA,KAAA,SAAA,SAAA,EAAA,EAAA,EAAA,IAEA,WAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,aAAA,SAAA,GACA,EACA,EACA,EACA,IAEA,EACA,EACA,IAEA,KAAA,SAAA,WAAA,EAAA,EAAA,EAAA,IAEA,YAAA,SAAA,GAEA,MADA,GAAA,eAAA,IACA,KAAA,SAAA,YAAA,IAEA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,SAAA,EAAA,SAAA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA,EACA,EACA,EACA,EACA,IAEA,EACA,EACA,IAEA,KAAA,SAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,aAAA,SAAA,GACA,EAAA,gBAAA,IACA,KAAA,SAAA,aAAA,IAEA,gBAAA,SAAA,GACA,EAAA,mBAAA,IACA,KAAA,SAAA,gBAAA,IAEA,gBAAA,SAAA,EAAA,GAKA,MAJA,GAAA,kBAAA,SAAA,GACA,EACA,IACA,IACA,KAAA,SAAA,gBAAA,EAAA,IAEA,kBAAA,SAAA,EAAA,GAKA,MAJA,GAAA,qBACA,EACA,IAEA,KAAA,SAAA,kBAAA,EAAA,IAEA,aAAA,SAAA,EAAA,EAAA,EAAA,GAOA,MANA,GAAA,gBACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,aAAA,EAAA,EAAA,EAAA,IAEA,eAAA,SAAA,EAAA,EAAA,EAAA,GAOA,MANA,GAAA,kBACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,eAAA,EAAA,EAAA,EAAA,IAEA,aAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,eAAA,SAAA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA,EACA,EACA,IAEA,KAAA,SAAA,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,eAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,iBAAA,SAAA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA,EACA,EACA,IAEA,KAAA,SAAA,eAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GAAA,aAEA,MADA,GAAA,aACA,KAAA,SAAA,WAEA,GAAA,WAAA,GACA,EAAA,YAAA,GACA,KAAA,SAAA,UAAA,GAEA,GAAA,WAEA,MADA,GAAA,WACA,KAAA,SAAA,SAEA,GAAA,SAAA,GACA,EAAA,UAAA,GACA,KAAA,SAAA,QAAA,GAEA,GAAA,YAEA,MADA,GAAA,YACA,KAAA,SAAA,UAEA,GAAA,UAAA,GACA,EAAA,WAAA,GACA,KAAA,SAAA,SAAA,GAEA,GAAA,cAEA,MADA,GAAA,cACA,KAAA,SAAA,YAEA,GAAA,YAAA,GACA,EAAA,aAAA,GACA,KAAA,SAAA,WAAA,GAEA,YAAA,SAAA,GACA,EAAA,eAAA,IACA,KAAA,SAAA,YAAA,IAEA,YAAA,WAEA,MADA,GAAA,eACA,KAAA,SAAA,eAEA,GAAA,kBAEA,MADA,GAAA,kBACA,KAAA,SAAA,gBAEA,GAAA,gBAAA,GACA,EAAA,iBAAA,GACA,KAAA,SAAA,eAAA,GAEA,GAAA,QAEA,MADA,GAAA,QACA,KAAA,SAAA,MAEA,GAAA,MAAA,GACA,EAAA,OAAA,GACA,KAAA,SAAA,KAAA,GAEA,GAAA,aAEA,MADA,GAAA,aACA,KAAA,SAAA,WAEA,GAAA,WAAA,GACA,EAAA,YAAA,GACA,KAAA,SAAA,UAAA,GAEA,GAAA,gBAEA,MADA,GAAA,gBACA,KAAA,SAAA,cAEA,GAAA,cAAA,GACA,EAAA,eAAA,GACA,KAAA,SAAA,aAAA,GAEA,GAAA,aAEA,MADA,GAAA,aACA,KAAA,SAAA,WAEA,GAAA,WAAA,GACA,EAAA,YAAA,GACA,KAAA,SAAA,UAAA,GAEA,UAAA,WACA,EAAA,aACA,KAAA,SAAA,aAEA,OAAA,SAAA,EAAA,GACA,EAAA,UACA,EACA,IAEA,KAAA,SAAA,OAAA,EAAA,IAEA,OAAA,SAAA,EAAA,GACA,EAAA,UACA,EACA,IAEA,KAAA,SAAA,OAAA,EAAA,IAEA,iBAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,oBACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,iBAAA,EAAA,EAAA,EAAA,IAEA,cAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,iBACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,MAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,SAAA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,QACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAEA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,OACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,WACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA,KAAA,SAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAGA,IChlBA,EAAA,WAAA,UAAA,4BAAA,SAAA,GAEA,OAAA,eAAA,EAAA,2BACA,IAAA,GAAA,QAAA,KACA,OAAA,UAAA,QACA,IAAA,GACA,MAAA,IAAA,GAAA,QAAA,UAAA,GAAA,UAAA,GACA,KAAA,GACA,MAAA,IAAA,GAAA,QAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GACA,KAAA,GACA,MAAA,IAAA,GAAA,QAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GAAA,UAAA,GACA,SACA,KAAA,IAAA,OAAA,4BAKA,OAFA,GAAA,UAAA,OAAA,aAAA,OAAA,aAAA,OAAA,MACA,EAAA,OAAA,KACA,ICjBA,EAAA,oBAAA,WAAA,WAEA,MAAA,UAAA,GAQA,MAPA,GAAA,KAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,SAAA,GACA,GAAA,EACA,IAAA,GAAA,KAAA,GACA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAIA,KCVA,EAAA,qBAAA,UAAA,oBAAA,SAAA,GAGA,QAAA,GAAA,EAAA,EAAA,EAAA,GACA,QAAA,MAKA,MAHA,GAAA,UAAA,EAAA,UACA,EAAA,UAAA,EAAA,GAAA,IAAA,YAAA,GAAA,GACA,EAAA,EAAA,GACA,EAPA,GAAA,GAAA,EAAA,mBASA,OAAA,KCXA,EAAA,sBAAA,UAAA,oBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,mBACA,OAAA,UAAA,EAAA,GACA,GAAA,GAAA,EAAA,SACA,GAAA,GACA,YAAA,GACA,YAAA,GACA,EACA,IAAA,GAAA,EAAA,OACA,GAAA,iBACA,EAAA,cAAA,WACA,MAAA,GAAA,OACA,EAAA,MAEA,EAAA,kBAGA,EAAA,SAAA,SAAA,GACA,KAAA,EAAA,OAAA,GACA,EAAA,KAAA,EAAA,mBAGA,EAAA,SAAA,EAAA,cAEA,EAAA,8BACA,EAAA,eAAA,EAAA,4BAAA,IAEA,EAAA,WAAA,WACA,EAAA,OAAA,EAAA,aACA,EAAA,KAAA,UC9BA,EAAA,YAAA,UAAA,WAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,MACA,WAAA,WACA,MAAA,qBAEA,MAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,EACA,EACA,EAAA,EACA,EAEA,GAGA,kBAAA,SAAA,EAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,CAIA,OAHA,GAAA,IACA,GAAA,GAEA,EAAA,GAEA,gBAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,mBAAA,GAAA,GAAA,IAEA,eAAA,SAAA,EAAA,GACA,GAAA,EAAA,EACA,QAGA,KAAA,GADA,GAAA,GAAA,OAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,GAAA,CAEA,OAAA,IAEA,eAAA,SAAA,EAAA,GACA,MAAA,GAAA,eAAA,EAAA,EAAA,EAAA,IAEA,UAAA,SAAA,GACA,MAAA,MAAA,GAAA,EAAA,KAEA,UAAA,SAAA,GACA,MAAA,KAAA,EAAA,KAAA,IAEA,qBAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,GAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAEA,wBAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,GACA,IAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EACA,QAAA,EAAA,EAEA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,CACA,IAAA,EAAA,EACA,QAEA,IAAA,GAAA,KAAA,KAAA,EACA,UACA,EAAA,IAAA,EAAA,KACA,EAAA,IAAA,EAAA,KAGA,oBAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GACA,IAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EACA,MAAA,GAAA,wBAAA,EAAA,EAAA,EAEA,IAAA,IAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EACA,MAAA,GAAA,wBAAA,EAAA,EAAA,EAEA,IAAA,EACA,GAAA,EACA,GAAA,CAEA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EACA,KAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,CACA,IAAA,EAAA,EAAA,CACA,GAAA,GAAA,KAAA,KAAA,EACA,QAAA,EAAA,SAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAEA,GAAA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,SAAA,GACA,EAAA,EAAA,CACA,SACA,EAAA,EAAA,EACA,EACA,GAGA,GAAA,IAAA,EAAA,EAAA,CACA,GAAA,KAAA,KAAA,EAAA,KAAA,KAAA,GACA,IAAA,GAAA,EAAA,KAAA,MAAA,EACA,SACA,EAAA,EAAA,KAAA,IAAA,EAAA,IACA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,IAAA,IACA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,IAAA,KAIA,SAAA,SAAA,GACA,MAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,IAAA,KAAA,KAAA,EAAA,EAAA,IAEA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,GAEA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,IAAA,GAAA,EACA,OAAA,MAAA,MAAA,EAAA,GAAA,GAEA,UAAA,SAAA,GACA,MAAA,MAAA,MAAA,KAAA,GAGA,IAAA,GAAA,EAAA,IAcA,OAbA,GAAA,WAAA,EAAA,WACA,EAAA,MAAA,EAAA,MACA,EAAA,kBAAA,EAAA,kBACA,EAAA,gBAAA,EAAA,gBACA,EAAA,eAAA,EAAA,eACA,EAAA,eAAA,EAAA,eACA,EAAA,UAAA,EAAA,UACA,EAAA,UAAA,EAAA,UACA,EAAA,qBAAA,EAAA,qBACA,EAAA,wBAAA,EAAA,wBACA,EAAA,oBAAA,EAAA,oBACA,EAAA,SAAA,EAAA,SACA,EAAA,OAAA,EAAA,OACA,ICpIA,EAAA,eAAA,UAAA,UAAA,oBAAA,qBAAA,YAAA,SAAA,GAEA,GAAA,GAAA,EAAA,WACA,EAAA,EAAA,qBACA,EAAA,EAAA,qBACA,GAAA,YACA,EAAA,QAAA,SAAA,EAAA,GACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EAKA,IAAA,GAAA,EAAA,OACA,GAAA,YAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,KAEA,EAAA,WACA,YAAA,EACA,WAAA,EACA,UAAA,EACA,UAAA,WACA,MAAA,MAAA,KAAA,KAAA,qBAEA,iBAAA,WACA,MAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,GAEA,SAAA,SAAA,GACA,MAAA,MAAA,KAAA,KAAA,gBAAA,KAEA,WAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,EAAA,EACA,EAAA,KAAA,EAAA,CACA,OAAA,MAAA,KAAA,EAAA,EAAA,EAAA,IAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,EAAA,EAAA,EACA,EAAA,KAAA,EAAA,EAAA,CACA,OAAA,GAAA,EAAA,EAAA,GAEA,IAAA,SAAA,GACA,MAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAEA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAEA,cAAA,SAAA,EAAA,GAIA,MAHA,KACA,EAAA,GAEA,KAAA,IAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,KAAA,GAEA,SAAA,WACA,MAAA,UAAA,KAAA,IAAA,SAAA,KAAA,IAEA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,EAAA,KAAA,IAEA,YAAA,SAAA,GACA,MAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAEA,WAAA,WACA,GAAA,GAAA,KAAA,WACA,IAAA,IAAA,EACA,KAAA,IAAA,OAAA,2CAEA,OAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAGA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GAEA,MAAA,MAAA,YAAA,IAEA,eAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,WAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,cAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,QAAA,WACA,MAAA,IAAA,IAAA,KAAA,GAAA,KAAA,IAEA,MAAA,WACA,MAAA,MAAA,MAAA,KAAA,EAAA,KAAA,IAEA,cAAA,WACA,MAAA,IAAA,GAAA,KAAA,GAAA,KAAA,IAEA,aAAA,SAAA,GACA,GAAA,GAAA,KAAA,YACA,EAAA,EAAA,WACA,OAAA,MAAA,KAAA,EAAA,OAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GAAA,KAEA,QAAA,SAAA,GACA,GAAA,GAAA,KAAA,QAAA,EACA,EAAA,KAAA,WACA,OAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,KAEA,MAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,IAEA,SAAA,WACA,MAAA,WAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,EAAA,KAAA,IAEA,IAAA,SAAA,EAAA,GAGA,MAFA,MAAA,EAAA,EACA,KAAA,EAAA,EACA,MAEA,KAAA,SAAA,GAEA,MADA,MAAA,EAAA,EACA,MAEA,KAAA,SAAA,GAEA,MADA,MAAA,EAAA,EACA,MAEA,IAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAEA,UAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EACA,KAAA,GAAA,EACA,MAEA,SAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAEA,eAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EACA,KAAA,GAAA,EACA,MAEA,kBAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAEA,aAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EACA,KAAA,GAAA,EACA,MAEA,OAAA,WAGA,MAFA,MAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,EACA,OAGA,EAAA,GACA,eAAA,WACA,MAAA,IAAA,IAEA,4BAAA,SAAA,GACA,MAAA,UAAA,EAAA,GACA,MAAA,GAAA,OACA,EAAA,MAAA,IAAA,EAAA,GAEA,GAAA,GAAA,EAAA,OAKA,EAAA,UAAA,SAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,GAEA,IAAA,GAAA,EAAA,SAoBA,OAnBA,GAAA,EAAA,GACA,EAAA,sBAAA,SAAA,GACA,EAAA,UAAA,GAAA,WACA,KAAA,IAAA,OAAA,+BAAA,EAAA,4BAGA,EAAA,sBAAA,OACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,OACA,EAAA,sBAAA,aACA,EAAA,sBAAA,YACA,EAAA,sBAAA,kBACA,EAAA,sBAAA,qBACA,EAAA,sBAAA,gBACA,EAAA,sBAAA,UACA,EAAA,KAAA,GAAA,GAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,GACA,IChNA,EAAA,eAAA,UAAA,UAAA,YAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,YACA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,SAAA,EAAA,EAAA,EAEA,IAAA,GAAA,EAAA,OACA,GAAA,WACA,YAAA,EACA,UAAA,WACA,MAAA,MAAA,KAAA,KAAA,qBAEA,iBAAA,WACA,KAAA,IAAA,OAEA,SAAA,SAAA,GACA,MAAA,MAAA,MAAA,GAAA,aAEA,gBAAA,SAAA,GACA,MAAA,MAAA,MAAA,GAAA,oBAEA,IAAA,SAAA,GACA,MAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAEA,SAAA,WACA,MAAA,UAAA,KAAA,IAAA,SAAA,KAAA,IAAA,SAAA,KAAA,IAAA,SAAA,KAAA,IAEA,WAAA,WACA,GAAA,GAAA,KAAA,WACA,IAAA,IAAA,EACA,KAAA,IAAA,OAAA,2CAEA,OAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAGA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GAEA,MAAA,MAAA,YAAA,IAEA,eAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,WAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,cAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,QAAA,WACA,MAAA,IAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAEA,aAAA,SAAA,GACA,MAAA,MAAA,KAAA,EAAA,MAAA,KAAA,aAAA,IAAA,EAAA,cAAA,GAAA,KAEA,MAAA,SAAA,EAAA,GACA,MAAA,MAAA,KAAA,EAAA,MAAA,MAAA,MAAA,KAEA,SAAA,WACA,MAAA,WAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAEA,IAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,EAAA,EACA,KAAA,EAAA,EACA,KAAA,EAAA,EACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,GAEA,IAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,UAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,SAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,eAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,kBAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,aAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,OAAA,WACA,KAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,GAEA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAEA,cAAA,SAAA,EAAA,GAIA,MAHA,KACA,EAAA,GAEA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,IAAA,GAEA,WAAA,EACA,UAAA,GAEA,EAAA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,SAAA,EAAA,EAAA,EAEA,IAAA,GAAA,EAAA,SA0BA,OAzBA,GAAA,UAAA,GAAA,GACA,EAAA,UAAA,YAAA,EACA,EAAA,sBAAA,SAAA,GACA,EAAA,UAAA,GAAA,WACA,KAAA,IAAA,OAAA,+BAAA,EAAA,4BAGA,EAAA,sBAAA,OACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,OACA,EAAA,sBAAA,aACA,EAAA,sBAAA,YACA,EAAA,sBAAA,kBACA,EAAA,sBAAA,qBACA,EAAA,sBAAA,gBACA,EAAA,sBAAA,UACA,EAAA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GACA,IC7LA,EAAA,eAAA,UAAA,UAAA,WAAA,cAAA,eAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,YACA,EAAA,eACA,EAAA,eACA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EAEA,IAAA,GAAA,EAAA,OACA,GAAA,WACA,YAAA,EACA,UAAA,WACA,MAAA,MAAA,KAAA,KAAA,qBAEA,iBAAA,WACA,MAAA,MAAA,IAAA,OAEA,SAAA,SAAA,GACA,MAAA,MAAA,MAAA,GAAA,aAEA,gBAAA,SAAA,GACA,MAAA,MAAA,MAAA,GAAA,oBAEA,IAAA,SAAA,GACA,MAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAEA,SAAA,WACA,MAAA,UAAA,KAAA,IAAA,SAAA,KAAA,IAAA,SAAA,KAAA,IAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,WAAA,WACA,GAAA,GAAA,KAAA,WACA,IAAA,IAAA,EACA,KAAA,IAAA,OAAA,2CAEA,OAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAGA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GAEA,MAAA,MAAA,YAAA,IAEA,eAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,WAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,cAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,EAAA,IAEA,QAAA,WACA,MAAA,IAAA,IAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAEA,aAAA,SAAA,GACA,MAAA,MAAA,KAAA,EAAA,MAAA,KAAA,aAAA,IAAA,EAAA,cAAA,GAAA,KAEA,MAAA,SAAA,EAAA,GACA,MAAA,MAAA,KAAA,EAAA,MAAA,MAAA,MAAA,KAEA,SAAA,WACA,MAAA,WAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,EAAA,KAAA,IAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAEA,IAAA,SAAA,EAAA,EAAA,GACA,KAAA,EAAA,EACA,KAAA,EAAA,EACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,GAEA,KAAA,SAAA,GACA,KAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,GAEA,IAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,UAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,SAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,eAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,kBAAA,SAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,GAEA,aAAA,SAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,OAAA,WACA,KAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,EACA,KAAA,GAAA,KAAA,GAEA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAEA,cAAA,SAAA,EAAA,GAIA,MAHA,KACA,EAAA,GAEA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,KAAA,IAAA,KAAA,EAAA,EAAA,IAAA,GAEA,WAAA,EACA,UAAA,GAEA,EAAA,UAAA,SAAA,EAAA,EAAA,GACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EACA,KAAA,EAAA,GAAA,EAEA,IAAA,GAAA,EAAA,SAwBA,OAvBA,GAAA,UAAA,GAAA,GACA,EAAA,UAAA,YAAA,EACA,EAAA,sBAAA,SAAA,GACA,EAAA,UAAA,GAAA,WACA,KAAA,IAAA,OAAA,+BAAA,EAAA,4BAGA,EAAA,sBAAA,OACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,QACA,EAAA,sBAAA,OACA,EAAA,sBAAA,aACA,EAAA,sBAAA,YACA,EAAA,sBAAA,kBACA,EAAA,sBAAA,qBACA,EAAA,sBAAA,gBACA,EAAA,sBAAA,UACA,EAAA,KAAA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,GACA,ICrLA,EAAA,eAAA,UAAA,UAAA,cAAA,eAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,eACA,EAAA,cACA,IAAA,GAAA,OAAA,cAAA,KACA,GAAA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAAA,GAAA,IACA,KAAA,SAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAEA,IAAA,GAAA,EAAA,OACA,GAAA,OACA,MAAA,EACA,SAAA,EACA,eAAA,EACA,QAAA,EAEA,IAAA,GAAA,EAAA,KAkMA,OAjMA,GAAA,SAAA,WACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAEA,EAAA,YAAA,SAAA,EAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,iBAEA,EAAA,sBAAA,SAAA,GACA,MAAA,GAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GAGA,MAFA,GAAA,SAAA,EAAA,EAAA,EACA,EAAA,SAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAEA,EAAA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,GACA,EAAA,EAAA,CACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,eAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,IAAA,GAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAEA,EAAA,WACA,YAAA,EACA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,QAAA,IAAA,EACA,KAAA,KAAA,SAAA,EAAA,EAAA,MAAA,GAEA,YAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,IAAA,WACA,MAAA,MAAA,QAAA,KAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,WAAA,WACA,MAAA,IAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,QAEA,QAAA,WACA,MAAA,IAAA,IAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,QAEA,SAAA,WACA,GAAA,GAAA,KAAA,aoDAGA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAaA,OAZA,MAAA,OAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,iBACA,EAAA,EAAA,gaAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,EAAA,EAAA,IAEA,aAAA,SAAA,GACA,MAAA,MAAA,aAAA,EAAA,aAAA,aAEA,sBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,EAAA,EAAA,IAEA,sBAAA,SAAA,GACA,MAAA,MAAA,sBAAA,EAAA,aAAA,aAEA,qBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,EAAA,IAEA,YAAA,WACA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAEA,SAAA,WACA,MAAA,MAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,OAEA,YAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,MAAA,KAAA,MAAA,KAAA,QAEA,QAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,MAAA,KAAA,MAAA,KAAA,QAEA,cAAA,WACA,KAAA,SAAA,WACA,KAAA,IAAA,OAAA,qCAIA,EAAA,SAAA,GAAA,GACA,EAAA,SAAA,gBACA,ICnNA,EAAA,eAAA,UAAA,UAAA,cAAA,cAAA,eAAA,SAAA,GAEA,GAAA,GAAA,EAAA,WACA,EAAA,EAAA,SACA,GAAA,eACA,EAAA,eACA,EAAA,eACA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAAA,GAAA,GACA,KAAA,SAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAGA,IAAA,GAAA,EAAA,OACA,GAAA,OACA,MAAA,EACA,SAAA,EACA,eAAA,EACA,QAAA,EACA,OAAA,EAEA,IAAA,GAAA,EAAA,KA6aA,OA5aA,GAAA,SAAA,WACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAEA,EAAA,YAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,iBAEA,EAAA,sBAAA,SAAA,GACA,MAAA,GAAA,YAAA,EAAA,EAAA,EAAA,IAEA,EAAA,QAAA,SAAA,EAAA,GAEA,MADA,GAAA,SAAA,EAAA,EAAA,EACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAEA,EAAA,MAAA,EAAA,QACA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAEA,EAAA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,GACA,EAAA,EAAA,CACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,UAAA,SAAA,GACA,GAAA,GAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EACA,OAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAEA,EAAA,UAAA,EAAA,UACA,EAAA,cAAA,SAAA,GACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAEA,EAAA,WAAA,SAAA,EAAA,GACA,GAGA,GAAA,EAAA,EAHA,EAAA,EACA,EAAA,EACA,EAAA,KAEA,EAAA,EAAA,MAAA,EAGA,IAFA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAEA,EAAA,GAAA,GAAA,QAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAGA,GAFA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,QAAA,OAEA,EAAA,QAAA,OAGA,EAAA,EAAA,EAAA,EACA,EAAA,QAAA,OAEA,EAAA,QAAA,MAGA,IAAA,GAAA,EAAA,MAAA,EAKA,OAJA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,GACA,EAAA,SAAA,KAAA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,GAAA,GAAA,EAAA,EAAA,EAAA,CAOA,OANA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,WACA,YAAA,EACA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,IAAA,WACA,MAAA,MAAA,QAAA,IAEA,SAAA,WACA,MAAA,MAAA,OAAA,EAAA,QAAA,IAAA,KAAA,OAAA,IAAA,KAAA,OAAA,IAAA,KAAA,OAEA,SAAA,WACA,MAAA,UAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAAA,SAAA,KAAA,QAEA,eAAA,WACA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAEA,GAAA,eACA,MAAA,MAAA,kBAEA,eAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,MAAA,KAAA,QAEA,GAAA,eACA,MAAA,MAAA,kBAEA,eAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,KAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,SAEA,GAAA,eACA,MAAA,MAAA,kBAEA,YAAA,WACA,GAAA,GAAA,KAAA,aAAA,EAAA,QAAA,QAAA,MAAA,KAAA,aAAA,EAAA,QAAA,MACA,OAAA,MAAA,MAAA,EAAA,EAAA,EAAA,IAEA,GAAA,YACA,MAAA,MAAA,eAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,EAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,EAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,IAEA,SAAA,WACA,MAAA,MAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,IAAA,KAAA,MAAA,IAAA,KAAA,OAEA,YAAA,WACA,GAAA,GAAA,SAAA,gBAAA,6BAAA,OAAA,iBAOA,OANA,GAAA,EAAA,KAAA,MACA,EAAA,EAAA,KAAA,MACA,EAAA,EAAA,KAAA,MACA,EAAA,EAAA,KAAA,MACA,EAAA,EAAA,KAAA,MACA,EAAA,EAAA,KAAA,MACA,GAEA,gBAAA,WACA,MAAA,UAAA,KAAA,QAAA,GAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,QAAA,IAAA,KAEA,GAAA,gBACA,MAAA,MAAA,mBAEA,gBAAA,WACA,QAAA,GAAA,GACA,MAAA,GAAA,QAAA,IAEA,OAAA,KAAA,MACA,IAAA,GAAA,SACA,MAAA,EACA,KAAA,GAAA,eACA,MAAA,aAAA,EAAA,KAAA,QAAA,IAAA,IAAA,KAAA,QAAA,GAAA,GACA,KAAA,GAAA,QACA,MAAA,SAAA,EAAA,KAAA,QAAA,KAAA,KAAA,QAAA,KAAA,KAAA,QAAA,GAAA,GAAA,IAAA,EAAA,KAAA,QAAA,KAAA,GACA,SACA,MAAA,UAAA,EAAA,KAAA,QAAA,IAAA,IAAA,EAAA,KAAA,QAAA,IAAA,IAAA,EAAA,KAAA,QAAA,IAAA,IAAA,EAAA,KAAA,QAAA,IAAA,IAAA,EAAA,KAAA,QAAA,IAAA,IAAA,EAAA,KAAA,QAAA,IAAA,MAGA,GAAA,gBACA,MAAA,MAAA,mBAEA,sBAAA,WACA,GAAA,GAAA,KAAA,iBACA,QACA,sBAAA,IACA,8BAAA,SACA,oBAAA,EAAA,iBACA,iBAAA,EAAA,iBACA,gBAAA,EACA,eAAA,EACA,UAAA,EACA,mBAAA,WACA,uBAAA,aAGA,GAAA,sBACA,MAAA,MAAA,yBAEA,OAAA,SAAA,GACA,MAAA,MAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAAA,KAAA,QAAA,EAAA,OAEA,cAAA,SAAA,EAAA,GACA,MAAA,MAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAAA,KAAA,IAAA,KAAA,MAAA,EAAA,OAAA,GAEA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,WAAA,WACA,MAAA,IAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,UAAA,KAAA,OAAA,EAAA,QAAA,KAAA,KAAA,SAEA,QAAA,WACA,MAAA,IAAA,IAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,QAEA,SAAA,WACA,GAAA,EACA,QAAA,KAAA,MACA,IAAA,GAAA,SACA,MAAA,KACA,KAAA,GAAA,eACA,MAAA,IAAA,GAAA,EAAA,GAAA,KAAA,MAAA,EAAA,GAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,eACA,KAAA,GAAA,QACA,MAAA,IAAA,GAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,QACA,KAAA,GAAA,OAEA,GADA,EAAA,KAAA,iBACA,IAAA,EACA,MAAA,IAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAEA,MAAA,IAAA,OAAA,kDAGA,KAAA,GAAA,MAEA,GADA,EAAA,KAAA,iBACA,IAAA,EACA,MAAA,IAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,EAAA,MAEA,MAAA,IAAA,OAAA,kDAGA,SACA,KAAA,IAAA,OAAA,uCAAA,KAAA,QAGA,YAAA,SAAA,GACA,GAAA,KAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,SACA,MAAA,MAAA,OAAA,EAAA,SAAA,EAAA,IAEA,IAAA,KAAA,OAAA,EAAA,KAAA,CACA,GAAA,KAAA,OAAA,EAAA,eACA,MAAA,IAAA,GAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,eACA,IAAA,KAAA,OAAA,EAAA,QACA,MAAA,IAAA,GAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAGA,MAAA,MAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MACA,GAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,QAEA,GAAA,GAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,aAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,KACA,OAAA,IAAA,GAAA,QAAA,EAAA,IAEA,aAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,EAAA,IAEA,sBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,IAEA,qBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CACA,OAAA,IAAA,GAAA,QAAA,EAAA,IAEA,cAAA,WAIA,MAHA,MAAA,SAAA,WACA,KAAA,IAAA,OAAA,mCAEA,MAEA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAWA,MAVA,MAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,QAAA,GAAA,EACA,KAAA,KAAA,SAAA,EAAA,IAAA,GAAA,IAAA,GAAA,IAAA,EAAA,EAAA,OAAA,EAAA,MAAA,EACA,MAEA,YAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IAAA,SAAA,GACA,MAAA,MAAA,SAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,SAAA,SAAA,GACA,MAAA,MAAA,SAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,UAAA,WACA,MAAA,MAAA,SAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,UAAA,KAAA,OAAA,EAAA,QAAA,KAAA,KAAA,SAEA,OAAA,WACA,MAAA,MAAA,UAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,QAEA,OAAA,WACA,GAAA,EACA,QAAA,KAAA,MACA,IAAA,GAAA,SACA,MAAA,KACA,KAAA,GAAA,eACA,MAAA,MAAA,SAAA,EAAA,GAAA,KAAA,MAAA,EAAA,GAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,eACA,KAAA,GAAA,QACA,MAAA,MAAA,SAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,QACA,KAAA,GAAA,OAEA,GADA,EAAA,KAAA,iBACA,IAAA,EACA,MAAA,MAAA,WAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAEA,MAAA,IAAA,OAAA,kDAGA,KAAA,GAAA,MAEA,GADA,EAAA,KAAA,iBACA,IAAA,EACA,MAAA,MAAA,WAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,OAAA,EAAA,EAAA,MAEA,MAAA,IAAA,OAAA,kDAGA,SACA,KAAA,IAAA,OAAA,uCAAA,KAAA,QAGA,eAAA,SAAA,GACA,GAAA,KAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,SACA,MAAA,MAAA,OAAA,EAAA,SAAA,EAAA,IAEA,IAAA,KAAA,OAAA,EAAA,KAAA,CACA,GAAA,KAAA,OAAA,EAAA,eACA,MAAA,MAAA,SAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,eACA,IAAA,KAAA,OAAA,EAAA,QACA,MAAA,MAAA,SAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAGA,MAAA,MAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MACA,KAAA,SAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,QAEA,KAAA,SAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,QAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,KAGA,OAFA,GAAA,KAAA,GACA,EAAA,KAAA,GACA,GAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CAIA,OAHA,GAAA,KAAA,GACA,EAAA,KAAA,GACA,EAAA,KAAA,GACA,GAEA,yBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CAGA,OAFA,GAAA,KAAA,GACA,EAAA,KAAA,GACA,GAEA,wBAAA,SAAA,GACA,GAAA,GAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EAAA,CAGA,OAFA,GAAA,KAAA,GACA,EAAA,KAAA,GACA,GAEA,mBAAA,SAAA,GACA,EAAA,aAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,KAEA,sBAAA,SAAA,GACA,KAAA,OAAA,EAAA,UACA,EAAA,UAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAAA,QAAA,MAIA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UACA,EAAA,SAAA,gBACA,EAAA,aAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QACA,EAAA,aAAA,gBACA,EAAA,aAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QACA,EAAA,aAAA,gBACA,EAAA,uBAAA,SAAA,EAAA,EAAA,GACA,GAAA,EACA,OAAA,GAAA,OAAA,EAAA,UAAA,EAAA,OAAA,EAAA,eACA,GAAA,GAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,iBAEA,EADA,EAAA,OAAA,EAAA,MACA,EAAA,MAEA,EAAA,OAEA,GAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,KAEA,EAAA,SACA,MAAA,SAAA,GACA,QAAA,IAAA,EAAA,cAGA,ICjcA,EAAA,YAAA,UAAA,WAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,KAAA,SAAA,EAAA,GACA,KAAA,IAAA,EACA,KAAA,IAAA,EAIA,IAAA,GAAA,EAAA,IAaA,OAZA,GAAA,WACA,YAAA,EACA,QAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,gBAAA,GAAA,KAAA,MAEA,gBAAA,SAAA,GACA,MAAA,MAAA,IAAA,KAAA,KAAA,IAAA,YAAA,KAEA,SAAA,WACA,MAAA,MAAA,IAAA,WAAA,OAAA,KAAA,IAAA,aAGA,ICtBA,EAAA,kBAAA,UAAA,UAAA,cAAA,cAAA,YAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,eACA,EAAA,eACA,EAAA,YACA,EAAA,WAAA,SAAA,GACA,KAAA,aACA,KAAA,IAAA,SAAA,EAAA,EAAA,QAAA,SAAA,GAGA,IAAA,GAAA,EAAA,UAuKA,OAtKA,GAAA,WACA,YAAA,EACA,IAAA,SAAA,GAEA,GAEA,GAFA,EAAA,KAAA,OACA,EAAA,KAAA,UAAA,MAEA,KAAA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,UAAA,GAAA,OAAA,EAAA,EAMA,KAJA,KAAA,OAAA,EACA,KAAA,QAAA,KACA,KAAA,iBAAA,KACA,KAAA,kBAAA,KACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,UAAA,GAAA,MAAA,EAAA,IAGA,QAAA,SAAA,GACA,KAAA,IAAA,EAAA,YAAA,KAAA,UAEA,mBAAA,SAAA,EAAA,GACA,KAAA,IAAA,EAAA,QAAA,uBAAA,EAAA,EAAA,KAAA,UAEA,OAAA,SAAA,GACA,KAAA,IAAA,KAAA,OAAA,YAAA,KAEA,iBAAA,SAAA,GACA,KAAA,QAAA,EAAA,SAEA,gBAAA,SAAA,GACA,KAAA,OAAA,EAAA,SAEA,qBAAA,SAAA,GACA,EAAA,aAAA,KAAA,OAAA,MAAA,KAAA,OAAA,MAAA,KAAA,OAAA,MAAA,KAAA,OAAA,MAAA,KAAA,OAAA,MAAA,KAAA,OAAA,QAEA,KAAA,WACA,GAAA,GAAA,GAAA,GAAA,KAAA,OACA,GAAA,QAAA,KAAA,QACA,EAAA,iBAAA,KAAA,iBACA,EAAA,kBAAA,KAAA,mBAEA,SAAA,WACA,GAAA,GAAA,GAAA,GAAA,KAAA,OAAA,OACA,GAAA,QAAA,KAAA,QAAA,KAAA,QAAA,OAAA,KACA,EAAA,iBAAA,KAAA,iBAAA,KAAA,iBAAA,OAAA,KACA,EAAA,kBAAA,KAAA,kBAAA,KAAA,kBAAA,OAAA,MAEA,UAAA,WACA,MAAA,MAAA,QAEA,WAAA,WAIA,MAHA,QAAA,KAAA,UACA,KAAA,QAAA,KAAA,OAAA,YAEA,KAAA,SAEA,oBAAA,WAIA,MAHA,QAAA,KAAA,mBACA,KAAA,iBAAA,KAAA,OAAA,cAEA,KAAA,kBAEA,qBAAA,WAIA,MAHA,QAAA,KAAA,oBACA,KAAA,kBAAA,KAAA,aAAA,cAEA,KAAA,mBAEA,WAAA,WACA,MAAA,MAAA,OAAA,OAAA,EAAA,QAAA,MAAA,UAEA,SAAA,WACA,MAAA,MAAA,OAAA,YAEA,mBAAA,SAAA,GACA,MAAA,MAAA,OAAA,aAAA,IAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,WACA,OAAA,IAAA,GAAA,QAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,IAEA,iBAAA,SAAA,GACA,MAAA,MAAA,aAAA,sBAAA,IAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAEA,OAAA,GAAA,MAAA,EAAA,EAAA,OAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAEA,OAAA,GAAA,MAAA,EAAA,EAAA,OAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAEA,OAAA,GAAA,MAAA,GAEA,gBAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAEA,OAAA,GAAA,MAAA,GAEA,iBAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,SAEA,eAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,SAEA,cAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,mBAAA,EAAA,KAAA,KAAA,gBAAA,EAAA,KAAA,eAEA,iBAAA,SAAA,GACA,MAAA,MAAA,aAAA,aAAA,IAEA,cAAA,SAAA,GACA,GAAA,GAAA,KAAA,YACA,OAAA,IAAA,GAAA,QAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,MAAA,EAAA,IAEA,eAAA,SAAA,GACA,MAAA,MAAA,OAAA,sBAAA,IAEA,SAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAEA,OAAA,GAAA,MAAA,EAAA,EAAA,OAEA,SAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAEA,OAAA,GAAA,MAAA,EAAA,EAAA,OAEA,cAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAEA,OAAA,GAAA,MAAA,GAEA,cAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAEA,OAAA,GAAA,MAAA,GAEA,eAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,eAEA,aAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,eAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,iBAAA,EAAA,KAAA,KAAA,cAAA,EAAA,KAAA,eAEA,qBAAA,SAAA,GAEA,KAAA,UAAA,KAAA,IAEA,yBAAA,SAAA,GAEA,KAAA,UAAA,QAAA,IAEA,wBAAA,SAAA,GAEA,KAAA,UAAA,OAAA,EAAA,QAAA,KAAA,UAAA,GAAA,KAGA,IClLA,EAAA,eAAA,UAAA,UAAA,eAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,GAAA,eACA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GAEA,KAAA,KAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA,EAGA,IAAA,GAAA,EAAA,OA0PA,OAzPA,GAAA,WACA,YAAA,EACA,SAAA,WACA,MAAA,MAAA,KAAA,KAAA,MAEA,GAAA,SACA,MAAA,MAAA,YAEA,UAAA,WACA,MAAA,MAAA,KAAA,KAAA,MAEA,GAAA,UACA,MAAA,MAAA,aAEA,KAAA,WACA,MAAA,MAAA,MAEA,GAAA,KACA,MAAA,MAAA,QAEA,KAAA,WACA,MAAA,MAAA,MAEA,GAAA,KACA,MAAA,MAAA,QAEA,UAAA,WACA,MAAA,IAAA,GAAA,QAAA,KAAA,aAAA,KAAA,eAEA,GAAA,UACA,MAAA,MAAA,aAEA,WAAA,WACA,OAAA,KAAA,KAAA,KAAA,MAAA,GAEA,GAAA,WACA,MAAA,MAAA,cAEA,WAAA,WACA,OAAA,KAAA,KAAA,KAAA,MAAA,GAEA,GAAA,WACA,MAAA,MAAA,cAEA,QAAA,WACA,MAAA,MAAA,MAEA,QAAA,WACA,MAAA,MAAA,MAEA,QAAA,WACA,MAAA,MAAA,MAEA,QAAA,WACA,MAAA,MAAA,MAEA,QAAA,WACA,MAAA,MAAA,WAAA,GAAA,KAAA,YAAA,GAEA,SAAA,WACA,MAAA,UAAA,KAAA,OAAA,SAAA,KAAA,OAAA,SAAA,KAAA,OAAA,SAAA,KAAA,OAEA,QAAA,WACA,OAAA,KAAA,WAAA,KAAA,YAEA,oBAAA,SAAA,EAAA,GACA,MAAA,MAAA,MAAA,GAAA,GAAA,KAAA,MAAA,KAAA,MAAA,GAAA,GAAA,KAAA,MAEA,cAAA,SAAA,GACA,MAAA,MAAA,oBAAA,EAAA,EAAA,EAAA,IAEA,eAAA,SAAA,GACA,MAAA,MAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAEA,iBAAA,SAAA,GACA,OAAA,KAAA,aAAA,GAAA,WAEA,SAAA,WACA,MAAA,OAAA,KAAA,KAAA,IAAA,KAAA,KAAA,QAAA,KAAA,KAAA,IAAA,KAAA,KAAA,MAEA,OAAA,SAAA,GACA,MAAA,MAAA,OAAA,EAAA,MAAA,KAAA,OAAA,EAAA,MAAA,KAAA,OAAA,EAAA,MAAA,KAAA,OAAA,EAAA,MAEA,cAAA,SAAA,EAAA,GACA,EAAA,GAAA,CACA,IAAA,GAAA,KAAA,WACA,EAAA,EAAA,UACA,OAAA,IAAA,EACA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,GAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,GAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,GAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,EACA,IAAA,GACA,EACA,OAAA,GACA,GAEA,SAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,EAAA,KAAA,OAAA,EAAA,QAAA,SAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,EAAA,KAAA,OAAA,EAAA,QAAA,SAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,EAAA,KAAA,OAAA,EAAA,QAAA,SAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,EAAA,KAAA,OAAA,EAAA,OAGA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,OAEA,MAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,QAEA,aAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MAAA,KAAA,IAAA,KAAA,KAAA,EAAA,QAEA,gBAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,KAAA,IAAA,KAAA,KAAA,GAAA,KAAA,IAAA,KAAA,KAAA,GAAA,KAAA,IAAA,KAAA,KAAA,GAAA,KAAA,IAAA,KAAA,KAAA,KAEA,UAAA,SAAA,GACA,MAAA,MAAA,gBAAA,EAAA,EAAA,EAAA,IAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,EAAA,KAAA,KAAA,KAAA,KAAA,KAAA,OAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,EAAA,KAAA,KAAA,KAAA,OAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,KAAA,KAAA,EAAA,KAAA,OAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAEA,WAAA,WACA,MAAA,IAAA,GAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,QAEA,UAAA,WACA,MAAA,IAAA,GAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,MAAA,KAAA,QAEA,YAAA,SAAA,GACA,MAAA,MAAA,OAAA,UAAA,IAEA,QAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,IAEA,OAAA,SAAA,GACA,MAAA,MAAA,SAAA,IAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,EAAA,KAAA,KAAA,KAAA,KAAA,EAAA,KAAA,OAEA,SAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,KAAA,KAAA,EAAA,KAAA,KAAA,KAAA,KAAA,IAEA,QAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,IAEA,IAAA,SAAA,EAAA,EAAA,EAAA,GAKA,MAJA,MAAA,KAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA,EACA,MAEA,UAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAEA,cAAA,SAAA,GAKA,MAJA,MAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,MAEA,gBAAA,SAAA,GAKA,MAJA,MAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,EAAA,MACA,MAEA,eAAA,SAAA,EAAA,GAKA,MAJA,MAAA,KAAA,KAAA,IAAA,KAAA,KAAA,GACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,GACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,GACA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,GACA,MAEA,SAAA,SAAA,GACA,MAAA,MAAA,eAAA,EAAA,EAAA,EAAA,IAEA,QAAA,SAAA,GAEA,MADA,MAAA,KAAA,EACA,MAEA,QAAA,SAAA,GAEA,MADA,MAAA,KAAA,EACA,MAEA,QAAA,SAAA,GAEA,MADA,MAAA,KAAA,EACA,MAEA,QAAA,SAAA,GAEA,MADA,MAAA,KAAA,EACA,MAEA,SAAA,WAKA,MAJA,MAAA,KAAA,KAAA,MAAA,KAAA,MACA,KAAA,KAAA,KAAA,MAAA,KAAA,MACA,KAAA,KAAA,KAAA,KAAA,KAAA,MACA,KAAA,KAAA,KAAA,KAAA,KAAA,MACA,MAEA,QAAA,WAKA,MAJA,MAAA,KAAA,KAAA,KAAA,KAAA,MACA,KAAA,KAAA,KAAA,KAAA,KAAA,MACA,KAAA,KAAA,KAAA,MAAA,KAAA,MACA,KAAA,KAAA,KAAA,MAAA,KAAA,MACA,MAEA,UAAA,SAAA,GACA,GAAA,KAAA,UACA,MAAA,KAEA,IAAA,GAAA,KAAA,KACA,EAAA,KAAA,KACA,EAAA,KAAA,KACA,EAAA,KAAA,KACA,EAAA,GAAA,GAAA,OAMA,OALA,MAAA,UAAA,EAAA,SACA,KAAA,SAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,KACA,KAAA,SAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,KACA,KAAA,SAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,KACA,KAAA,SAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,KACA,MAEA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,EAAA,KAAA,KAAA,IAEA,MAAA,SAAA,GACA,MAAA,MAAA,QAAA,IAEA,OAAA,SAAA,GACA,MAAA,MAAA,QAAA,KAAA,KAAA,GAAA,QAAA,KAAA,KAAA,IAEA,OAAA,SAAA,GACA,MAAA,MAAA,QAAA,KAAA,KAAA,GAAA,QAAA,KAAA,KAAA,IAEA,MAAA,SAAA,EAAA,GACA,MAAA,MAAA,OAAA,GAAA,OAAA,KAGA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,WAAA,GAAA,GAAA,OAAA,kBAAA,OAAA,kBAAA,OAAA,kBAAA,OAAA,mBACA,EAAA,QAAA,GAAA,GAAA,OAAA,kBAAA,OAAA,kBAAA,OAAA,kBAAA,OAAA,mBACA,ICtQA,EAAA,aAAA,UAAA,4BAAA,SAAA,GAEA,OAAA,eAAA,EAAA,2BACA,IAAA,KAEA,OADA,GAAA,OAAA,KACA,ICLA,EAAA,yBAAA,UAAA,YAAA,YAAA,SAAA,GAEA,GAAA,GAAA,EAAA,aACA,EAAA,EAAA,WACA,GAAA,QAAA,YAEA,IAAA,GAAA,EAAA,OAuBA,OAtBA,GAAA,WACA,YAAA,EACA,aAAA,SAAA,EAAA,GAGA,IAAA,GAFA,GAAA,KACA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GACA,EAAA,EAAA,WAAA,EAAA,EAEA,GAAA,KAAA,EAAA,IACA,EAAA,EAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAIA,MADA,GAAA,KAAA,GACA,GAEA,uBAAA,WACA,MAAA,MAAA,aAAA,KAAA,0BAGA,IC7BA,EAAA,sBAAA,UAAA,YAAA,oBAAA,cAAA,WAAA,yBAAA,SAAA,GAEA,EAAA,YACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,YAAA,qBACA,EAAA,EAAA,wBAyFA,OAxFA,GAAA,KAAA,SAAA,EAAA,GAGA,MAFA,MAAA,MAAA,EACA,KAAA,IAAA,EACA,EAAA,OAAA,EAAA,IACA,KAAA,SAAA,EACA,SAEA,KAAA,aAAA,EAAA,MAAA,GAAA,aACA,KAAA,WAAA,KAAA,aACA,KAAA,OAAA,EAAA,QAAA,UAAA,GAAA,UAAA,GAFA,SAIA,EAAA,EAAA,EAAA,MACA,WAAA,SAAA,GACA,MAAA,MAAA,MAAA,KAAA,KAAA,IAAA,MAAA,KAAA,OAAA,MAAA,KAEA,UAAA,WACA,MAAA,MAAA,cAEA,YAAA,WACA,MAAA,IAEA,mBAAA,WACA,MAAA,KAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,GAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAAA,gBAAA,UAAA,MAAA,EAAA,EACA,QAAA,GAAA,GAAA,KAAA,KAAA,MAAA,KAAA,GAAA,KAAA,IAAA,KAAA,MAEA,YAAA,SAAA,GACA,GAAA,GAAA,KAAA,aAAA,gBAAA,MAAA,EAAA,EACA,QAAA,GAAA,GAAA,KAAA,KAAA,IAAA,KAAA,GAAA,KAAA,MAAA,KAAA,MAEA,qBAAA,WACA,UAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAAA,EACA,QACA,GAAA,GAAA,KAAA,KAAA,MAAA,GACA,GAAA,GAAA,KAAA,EAAA,KAAA,OAGA,iBAAA,WACA,KAAA,IAAA,OAAA,gDAEA,aeAOA,OANA,GAAA,MACA,SAAA,EACA,MAAA,EAAA,gBAAA,GACA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,UAAA,EACA,KAAA,EAAA,IAAA,gBAAA,IAAA,GAAA,EAAA,EAAA,KAEA;EAEA,oBAAA,SAAA,GACA,GAAA,GAAA,KAAA,aAAA,EACA,OAAA,GAAA,OACA,EAAA,GAAA,KAEA,GAGA,eAAA,SAAA,GACA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,IAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,aAAA,KAAA,OAAA,EAAA,aAAA,KAAA,SAGA,EAAA,OC/FA,EAAA,qBAAA,UAAA,YAAA,oBAAA,cAAA,cAAA,WAAA,yBAAA,SAAA,GAEA,EAAA,YACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,YACA,EAAA,EAAA,wBA6NA,OA5NA,GAAA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAgDA,QAAA,GAAA,GACA,EAAA,cAAA,KACA,EAAA,OAAA,EAAA,OAAA,UAAA,EAAA,KAAA,EAAA,YAAA,EAAA,MAnCA,GAdA,EAAA,IACA,GAAA,EACA,GAAA,KAAA,GACA,GAAA,KAAA,IAEA,KAAA,OAAA,EACA,KAAA,OAAA,EACA,KAAA,WAAA,EACA,KAAA,SAAA,EACA,KAAA,cAAA,EACA,KAAA,MAAA,KAAA,gBAAA,GACA,KAAA,IAAA,KAAA,gBAAA,GACA,KAAA,aAAA,KAAA,eAAA,GACA,KAAA,WAAA,KAAA,eAAA,GACA,GAAA,GAAA,IAAA,EAEA,MADA,MAAA,SAAA,EACA,MAIA,MAAA,eAFA,KAAA,cACA,KAAA,WAAA,KAAA,SACA,KAAA,SACA,KAAA,WAAA,KAAA,SACA,KAAA,SAAA,EAAA,KAAA,GAEA,KAAA,WAGA,KAAA,WAAA,KAAA,SACA,KAAA,SACA,KAAA,WAAA,KAAA,SACA,KAAA,SAAA,EAAA,KAAA,GAEA,KAAA,YAKA,GAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,GAAA,EAAA,KAAA,GACA,KAAA,gBAAA,KAAA,cAAA,KAAA,WAAA,KAAA,SAAA,KAAA,SAAA,KAAA,WACA,KAAA,gBAAA,IACA,KAAA,iBAAA,EAAA,KAAA,IAGA,KAAA,OAAA,EAAA,QACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,OACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,IACA,IAAA,GAAA,IAMA,KAAA,IACA,EAAA,GACA,EAAA,KAAA,GAAA,GACA,EAAA,KAAA,IACA,EAAA,EAAA,KAAA,GAAA,KAGA,EAAA,EAAA,EAAA,KACA,SAAA,SAAA,GACA,MAAA,MAAA,WAAA,KAAA,eAAA,EAAA,gBAAA,EAAA,KAAA,WAAA,EAAA,KAAA,GAAA,KAAA,YAAA,EAAA,kBAAA,EAAA,KAAA,WAAA,KAAA,WAAA,EAAA,KAAA,KAEA,SAAA,SAAA,GACA,OAAA,KAAA,SAAA,GAAA,KAAA,aAAA,KAAA,eAAA,KAAA,aAEA,QAAA,SAAA,GACA,MAAA,MAAA,YAAA,KAAA,eAAA,KAAA,YAAA,GAEA,WAAA,SAAA,GACA,MAAA,MAAA,gBAAA,KAAA,QAAA,KAEA,UAAA,SAAA,GACA,MAAA,MAAA,eAAA,KAAA,QAAA,KAEA,YAAA,WACA,OAAA,KAAA,cAAA,GAAA,GAAA,KAAA,QAEA,gBAAA,SAAA,GACA,MAAA,MAAA,OAAA,KAAA,EAAA,YAAA,KAAA,OAAA,KAEA,eAAA,SAAA,GACA,GAAA,GAAA,EAAA,YAAA,EAAA,EACA,OAAA,MAAA,cAAA,EAAA,gBAAA,EAAA,gBAAA,WAEA,cAAA,SAAA,GACA,GAAA,GAAA,KAAA,cAAA,EAAA,KAAA,SAAA,EAAA,KAAA,WACA,EAAA,EAAA,kBAAA,EAAA,EAAA,EAAA,KAAA,GACA,OAAA,IAAA,KAAA,iBAEA,mBAAA,WACA,GAEA,GAFA,EAAA,IACA,EAAA,KAAA,cAAA,IAAA,GAEA,IAAA,KAAA,gBAAA,EAAA,KAAA,GAAA,EAEA,MADA,GAAA,KAAA,gBAAA,KAAA,GAAA,IAAA,IACA,KAAA,KAAA,OAAA,IAAA,KAAA,OAAA,MAAA,EAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,CAEA,IAAA,IAAA,KAAA,WAAA,KAAA,UAAA,EACA,EAAA,KAAA,OAAA,KAAA,EAAA,YAAA,KAAA,OAAA,GACA,GAAA,GACA,IAAA,GAAA,KAAA,KAAA,OAAA,IAAA,KAAA,OAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EACA,EAAA,KAAA,KAAA,OAAA,IAAA,KAAA,OAAA,MAAA,EAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,CACA,OAAA,GAAA,IAAA,GAGA,WAAA,SAAA,GACA,OAAA,GAAA,GAAA,IAAA,KAAA,OAAA,KAAA,QAAA,KAAA,cAAA,EAAA,IAAA,EAAA,EAAA,KAAA,WAAA,KAAA,SAAA,KAAA,iBAEA,YAAA,SAAA,GACA,OAAA,GAAA,GAAA,IAAA,KAAA,OAAA,KAAA,QAAA,KAAA,cAAA,GAAA,GAAA,EAAA,EAAA,KAAA,SAAA,KAAA,YAAA,KAAA,iBAEA,qBAAA,WACA,GAAA,GAAA,KACA,IAeA,OAdA,GAAA,MACA,EACA,KAAA,GAAA,EACA,KAAA,GACA,EAAA,KAAA,GAAA,GACA,SAAA,GACA,GAAA,EAAA,cAAA,GAAA,CACA,GAAA,GAAA,EAAA,SAAA,GACA,EAAA,KACA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,KAAA,MAIA,EAAA,QAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,EACA,QACA,GAAA,GAAA,IAAA,KAAA,OAAA,KAAA,OAAA,EAAA,EAAA,KAAA,eACA,GAAA,GAAA,IAAA,KAAA,OAAA,KAAA,OAAA,EAAA,EAAA,KAAA,iBAGA,iBAAA,WACA,KAAA,IAAA,OAAA,4CAEA,aAAA,SAAA,GACA,GAAA,MACA,EAAA,EACA,EAAA,EAAA,IAAA,MAAA,KAAA,QACA,EAAA,EAAA,IAAA,IAAA,GACA,EAAA,EAAA,mBACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,OAAA,KAAA,OACA,IAAA,EAAA,EACA,MAAA,EAEA,IAAA,GAAA,EAAA,IAAA,IAAA,KAAA,QAAA,EAAA,IAAA,IAAA,EAAA,KACA,EAAA,KAAA,KAAA,GAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,CACA,IAAA,EAAA,EACA,MAAA,EAEA,IAAA,GAAA,EAAA,gBAAA,GACA,EAAA,EAAA,MAAA,KAAA,QAAA,YACA,IAAA,EAAA,EACA,KAAA,cAAA,EAAA,UACA,EAAA,MACA,SAAA,EACA,MAAA,EACA,OAAA,EAAA,UACA,KAAA,KAAA,cAAA,GAAA,QAGA,CACA,GAAA,GAAA,EAAA,gBAAA,GACA,EAAA,EAAA,MAAA,KAAA,QAAA,YACA,MAAA,cAAA,EAAA,UACA,EAAA,MACA,SAAA,EACA,MAAA,EACA,OAAA,EACA,KAAA,KAAA,cAAA,EAAA,KAGA,KAAA,cAAA,EAAA,UACA,EAAA,MACA,SAAA,EACA,MAAA,EACA,OAAA,EAAA,UACA,KAAA,KAAA,cAAA,GAAA,IAIA,MAAA,IAEA,oBAAA,SAAA,GACA,GAAA,GAAA,EACA,EAAA,KAAA,aAAA,EAIA,OAHA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,EAAA,OAEA,GAEA,eAAA,SAAA,GACA,EAAA,IAAA,KAAA,OAAA,EAAA,KAAA,OAAA,EAAA,KAAA,OAAA,KAAA,WAAA,KAAA,SAAA,KAAA,gBAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,aAAA,EAAA,YAAA,EAAA,KAAA,aAAA,MAAA,EAAA,aAAA,EAAA,OAAA,QACA,EAAA,EAAA,aAAA,EAAA,YAAA,EAAA,KAAA,WAAA,MAAA,EAAA,aAAA,EAAA,OAAA,QACA,EAAA,EAAA,kBAAA,EAAA,KAAA,eAAA,KAAA,cACA,EAAA,EAAA,gBACA,IAAA,EAAA,IAAA,EAAA,EAAA,CACA,GAAA,GAAA,EAAA,EAAA,KAAA,OACA,EAAA,EAAA,EAAA,KAAA,MACA,OAAA,IAAA,GAAA,cAAA,EAAA,aAAA,KAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,GAAA,GAAA,EAAA,EAAA,KAAA,MACA,OAAA,IAAA,GAAA,IAAA,EAAA,aAAA,KAAA,QAAA,EAAA,EAAA,EAAA,MAIA,EAAA,MCpOA,EAAA,qBAAA,UAAA,cAAA,cAAA,WAAA,YAAA,qBAAA,qBAAA,SAAA,GAEA,EAAA,cACA,IAAA,GAAA,EAAA,eACA,EAAA,EAAA,YAAA,qBACA,EAAA,EAAA,YACA,GAAA,sBACA,EAAA,qBACA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,KAAA,SAAA,MACA,KAAA,OAAA,IAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,SAAA,GACA,MAAA,GAAA,QACA,OAAA,EAAA,EAAA,OAAA,GAAA,SACA,KAAA,SAAA,EACA,KAAA,iBAAA,KACA,KAAA,0BAAA,EACA,KAAA,eAAA,KAEA,IAAA,GAAA,EAAA,OAqNA,OApNA,GAAA,WACA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,SAAA,MAAA,GAAA,KAAA,OAAA,MAAA,GAAA,KAAA,SAEA,WAAA,WACA,KAAA,0BAAA,GAEA,SAAA,SAAA,GAEA,MADA,MAAA,OAAA,KAAA,GACA,MAEA,WAAA,SAAA,GAUA,MATA,GAAA,UAMA,KAAA,SAAA,KAAA,GACA,KAAA,cAEA,MAEA,MAAA,WACA,KAAA,QAAA,GAEA,UAAA,WACA,MAAA,MAAA,OAAA,QAEA,cAAA,WACA,MAAA,GAAA,MAAA,KAAA,SAEA,aAAA,WACA,MAAA,GAAA,KAAA,KAAA,SAEA,gBAAA,WACA,MAAA,GAAA,MAAA,KAAA,WAEA,eAAA,WACA,MAAA,GAAA,KAAA,KAAA,WAEA,WAAA,WACA,MAAA,MAAA,SAAA,OAAA,GAEA,SAAA,WACA,MAAA,MAAA,QAEA,kBAAA,WACA,OAAA,KAAA,gBAAA,cAAA,KAAA,eAAA,OAEA,kBAAA,WAEA,MAAA,IAAA,GAAA,QAAA,KAAA,KAAA,eAAA,KAAA,kBAEA,eAAA,SAAA,GACA,GAAA,KAAA,aAAA,CACA,GAAA,GAAA,KAAA,kBAAA,KACA,GAAA,OAAA,EAAA,EAAA,EAAA,EAEA,KAAA,GADA,GAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,SAAA,GAAA,eAAA,EAEA,MAAA,QACA,EAAA,cAIA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,YAAA,KACA,EAAA,IAAA,KAAA,OAAA,SAAA,GACA,MAAA,GAAA,aAAA,KACA,KAAA,SAEA,cAAA,WAGA,IAAA,GAFA,GAAA,EAAA,QAAA,OACA,EAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,cAAA,KAAA,SAAA,GAAA,OAEA,OAAA,IAEA,QAAA,SAAA,GAWA,QAAA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,EAAA,gBAAA,UAAA,MAAA,EAAA,IACA,EAAA,EAAA,KAAA,EAAA,gBAAA,UAAA,MAAA,EAAA,IACA,EAAA,EAAA,OAAA,OAAA,GAAA,GAAA,QAAA,KAAA,EAAA,GACA,MAAA,EAAA,gBAAA,IAAA,GAAA,GAuBA,MAAA,EAtBA,QAAA,EAAA,UACA,IAAA,QACA,GAAA,GAAA,EAAA,QAAA,KAAA,GAAA,EACA,EAAA,EAAA,QAAA,KAAA,GAAA,CACA,QAAA,GAAA,GAAA,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GACA,KAAA,QACA,GAAA,GAAA,EAAA,aAAA,EAAA,UAEA,IADA,EAAA,KAAA,GAAA,KACA,EAAA,KAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA,KAAA,GAAA,KAAA,CACA,GAAA,GAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GACA,QACA,GAAA,GAAA,QAAA,KAAA,EAAA,GACA,GAAA,GAAA,QAAA,KAAA,EAAA,IAGA,MAAA,EAGA,KAAA,QACA,MAAA,IAMA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,EAAA,gBAAA,OAAA,EAAA,IACA,EAAA,EAAA,KAAA,EAAA,gBAAA,MAAA,EAAA,GACA,QAAA,EAAA,SACA,IAAA,OACA,OAAA,GAAA,GAAA,QAAA,KAAA,EAAA,GACA,KAAA,QACA,GAAA,GAAA,EAAA,OACA,QAAA,GAAA,GAAA,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EAAA,KAAA,GAAA,GAAA,GACA,KAAA,SACA,GAAA,GAAA,EAAA,gBAAA,UAAA,MAAA,EAAA,GACA,EAAA,EAAA,gBAAA,MAAA,EAAA,GACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,KAAA,GAAA,KAAA,GACA,EAAA,EAAA,KAAA,GAAA,KAAA,EACA,QACA,GAAA,GAAA,QAAA,KAAA,EAAA,GACA,GAAA,GAAA,QAAA,KAAA,EAAA,GACA,GAAA,GAAA,QAAA,KAAA,EAAA,KASA,QAAA,GAAA,GACA,EAAA,EAAA,OAAA,GAEA,QAAA,GAAA,GACA,EAAA,EAAA,OAAA,GAvEA,IAAA,KAAA,aACA,QAKA,IAHA,SAAA,IACA,EAAA,GAAA,GAAA,YAEA,KAAA,0BAAA,KAAA,eAAA,OAAA,GACA,MAAA,MAAA,gBAEA,IAqDA,GArDA,EAAA,EAAA,UAsDA,KACA,KACA,EAAA,KAAA,kBACA,EAAA,KAAA,iBAOA,EAAA,EAAA,IAAA,OAAA,EAAA,OACA,EAAA,EAAA,KAAA,GAAA,GAAA,QAAA,KAAA,KAAA,SAAA,KAAA,SAAA,OAAA,GAAA,IAAA,KAAA,SAAA,GAAA,MACA,KAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IACA,EAAA,GACA,EAAA,EAAA,KAAA,SAAA,GAAA,MAAA,KAAA,SAAA,EAAA,GAAA,WAAA,KAAA,SAAA,GAAA,cAAA,IAEA,EAAA,KAAA,SAAA,GAAA,WAAA,GAEA,KAAA,EAAA,KAAA,SAAA,OAAA,EAAA,GAAA,EAAA,IACA,EAAA,KAAA,SAAA,OAAA,GACA,EAAA,EAAA,KAAA,SAAA,GAAA,IAAA,KAAA,SAAA,EAAA,GAAA,aAAA,UAAA,KAAA,SAAA,GAAA,WAAA,WAAA,IAEA,EAAA,KAAA,SAAA,GAAA,YAAA,GAEA,IAAA,EAuBA,OAtBA,MAAA,QACA,GACA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,eACA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAA,UAAA,EAAA,WAAA,cAEA,EAAA,EAAA,EAAA,MAAA,EAAA,WAAA,EAAA,eACA,EAAA,EAAA,WAAA,IACA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,eACA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAA,UAAA,EAAA,WAAA,YACA,EAAA,EAAA,YAAA,IACA,EAAA,EAAA,EAAA,MAAA,EAAA,aAAA,UAAA,EAAA,WAAA,aAEA,GACA,GAAA,GAAA,EAAA,MAAA,GACA,GAAA,GAAA,EAAA,MAAA,KAGA,GAAA,GAAA,GAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,aAAA,OAAA,GAAA,OAAA,EAAA,EAAA,MAAA,EAAA,aAAA,YAAA,MAAA,IAEA,KAAA,iBAAA,EACA,KAAA,0BAAA,EACA,KAAA,eAAA,GAAA,GAAA,WAAA,GACA,IAmBA,EAAA,UCvOA,EAAA,0BAAA,UAAA,aAAA,SAAA,GAEA,QAAA,GAAA,GACA,MAAA,IAAA,EAAA,QAAA,MAAA,QAAA,QAAA,KAAA,OAAA,QAAA,QAAA,OAAA,QAAA,MAAA,OAAA,QAAA,MAAA,OAAA,QAAA,MAAA,OAAA,QAAA,MAAA,OAAA,QAAA,uCAAA,QAAA,IAFA,GAAA,GAAA,EAAA,YAIA,GAAA,SACA,MAAA,SAAA,EAAA,GA4EA,QAAA,GAAA,GACA,EAAA,IAGA,EAAA,IACA,EAAA,EACA,MAEA,EAAA,KAAA,IAEA,QAAA,KACA,GAAA,GAAA,EAAA,EAAA,EACA,EAAA,CAKA,KAJA,EAAA,EACA,EAAA,EACA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,IAAA,OAAA,EAGA,GAFA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,MAGA,GAAA,KACA,EAAA,CAUA,OARA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,MACA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAIA,IAHA,EAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAsBA,OApBA,QAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAIA,IAHA,EAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAUA,OARA,QAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,OAAA,EAAA,OAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAIA,IAHA,EAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAsBA,OApBA,QAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,EA0BA,OAzBA,GAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,IACA,OAAA,IACA,EAAA,YASA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAUA,IARA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,GAAA,IACA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,GAAA,IACA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GACA,CA8BA,OA7BA,GAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,SAIA,OAAA,IACA,EAAA,WACA,OAAA,IAAA,UACA,EAAA,IAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAkBA,IAhBA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,SACA,MACA,EAAA,EACA,EAAA,OAIA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,iBACA,MACA,EAAA,EACA,EAAA,OAIA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,mBACA,MAAA,OAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,2BACA,MAAA,OAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,iBACA,MAAA,OAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,yBACA,MAAA,OAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,eACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,uBACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,CAyDA,OAxDA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,OACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,IAEA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,qBACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,6BACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAwCA,OAvCA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,IAEA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,mBACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,2BACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAwCA,OAvCA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,IAEA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAkBA,IAhBA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,yBACA,MACA,EAAA,EACA,EAAA,OAIA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,iCACA,MACA,EAAA,EACA,EAAA,OAIA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAYA,IAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAeA,IAbA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,kBACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,EAAA,CAYA,GAXA,EAAA,EACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAEA,QAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,IAAA,SAAA,GACA,OACA,IAAA,0BACA,KAAA,MAGA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAGA,MAAA,GAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+CA,OA9CA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,OAAA,IACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,CAsGA,OArGA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OACA,EACA,EACA,EACA,EACA,EACA,EAAA,EACA,EAAA,IAEA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAsCA,OArCA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,OACA,EAAA,EACA,EAAA,IAEA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,GACA,CAuBA,OAtBA,GAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,YAAA,EAAA,KACA,EAAA,IAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,IACA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,UAAA,EAAA,KACA,EAAA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EACA,EAAA,CAyDA,OAxDA,GAAA,EACA,EAAA,EACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,YAAA,EAAA,EAAA,KACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,EACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,UAAA,EAAA,EAAA,KACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GACA,CAuCA,OAtCA,GAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,EAAA,WACA,OAAA,GACA,IAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,EAAA,WACA,OAAA,GACA,IAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EAAA,EACA,CAGA,IAFA,EAAA,EACA,EAAA,IACA,OAAA,EAEA,IADA,KACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,QAGA,GAAA,IAEA,IAAA,OAAA,EAGA,GAFA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,MAGA,GAAA,KACA,EAAA,CAEA,IAAA,OAAA,EAGA,GAFA,EAAA,EACA,EAAA,IACA,OAAA,EAAA,CAGA,IAFA,KACA,EAAA,IACA,OAAA,GACA,EAAA,KAAA,GACA,EAAA,GAEA,QAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,OAGA,GAAA,KACA,EAAA,CAGA,OAAA,GAEA,QAAA,KACA,GAAA,EAUA,OATA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,EAEA,QAAA,KACA,GAAA,GAAA,EACA,EAAA,CAwDA,OAvDA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CA+EA,OA9EA,GAAA,EACA,EAAA,EACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,IAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,GACA,MAAA,IACA,EAAA,EAAA,KAEA,OAAA,IACA,EAAA,IAGA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,EACA,EAAA,CAsDA,OArDA,GAAA,EACA,EAAA,EACA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,SAIA,OAAA,GACA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,GACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,EAEA,QAAA,KACA,GAAA,EAqBA,OApBA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,KAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,SAIA,EAEA,QAAA,KACA,GAAA,GAAA,EACA,EAAA,CA8BA,OA7BA,GAAA,EACA,EAAA,EACA,EAAA,IACA,OAAA,GACA,EAAA,IACA,OAAA,EACA,GACA,EACA,IAGA,EAAA,KACA,EAAA,KAGA,EAAA,KACA,EAAA,GAEA,OAAA,IACA,EAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAEA,OAAA,IACA,EAAA,GAEA,OAAA,IACA,EAAA,KAEA,EAEA,QAAA,KACA,GAAA,EAUA,OATA,SAAA,KAAA,EAAA,OAAA,KACA,EAAA,EAAA,OAAA,GACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,UAGA,EAEA,QAAA,KACA,GAAA,EA2CA,OA1CA,MAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,QAGA,OAAA,IACA,IAAA,EAAA,WAAA,IACA,EAAA,IACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,UAGA,OAAA,IACA,KAAA,EAAA,WAAA,IACA,EAAA,KACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,UAGA,OAAA,IACA,KAAA,EAAA,WAAA,IACA,EAAA,KACA,MAEA,EAAA,KACA,IAAA,GACA,EAAA,aAMA,EAEA,QAAA,GAAA,GACA,EAAA,MAGA,KAAA,GAFA,GAAA,KACA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,KAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,EAAA,GAGA,OAAA,GAEA,QAAA,KAIA,IAAA,GAHA,GAAA,EACA,EAAA,EACA,GAAA,EACA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,GAAA,IAAA,CACA,GAAA,GAAA,EAAA,OAAA,EACA,QAAA,GACA,GACA,IAEA,EAAA,EACA,GAAA,GACA,OAAA,GAAA,WAAA,GAAA,WAAA,GACA,IACA,EAAA,EACA,GAAA,IAEA,IACA,GAAA,GAGA,OACA,KAAA,EACA,OAAA,GAGA,QAAA,GAAA,EAAA,GACA,GAAA,KACA,IAAA,EAAA,iBAAA,SACA,MACA,EAAA,GAAA,EACA,EAAA,GAAA,IAGA,IAAA,EAAA,OAAA,EACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,MACA,IAAA,EAAA,iBAAA,SACA,MACA,EAAA,GAAA,EACA,EAAA,GAAA,IAKA,OAAA,GArnFA,GAAA,IACA,QAAA,EACA,0BAAA,EACA,yBAAA,EACA,eAAA,EACA,cAAA,EACA,OAAA,EACA,uBAAA,EACA,UAAA,EACA,OAAA,EACA,uBAAA,EACA,iBAAA,EACA,iCAAA,EACA,eAAA,EACA,+BAAA,EACA,QAAA,EACA,wBAAA,EACA,gBAAA,EACA,cAAA,EACA,8BAAA,EACA,sBAAA,EACA,uBAAA,EACA,uCAAA,EACA,+BAAA,EACA,6BAAA,EACA,6CAAA,EACA,cAAA,EACA,8BAAA,EACA,sBAAA,EACA,eAAA,EACA,kBAAA,EACA,OAAA,EACA,KAAA,EACA,SAAA,EACA,MAAA,EACA,sBAAA,EACA,mBAAA,EACA,SAAA,EACA,KAAA,EACA,cAAA,EACA,MAAA,EACA,IAAA,EAEA,IAAA,SAAA,GACA,GAAA,SAAA,EAAA,GACA,KAAA,IAAA,OAAA,sBAAA,EAAA,GAAA,SAGA,GAAA,SAEA,IAAA,GAAA,EACA,EAAA,EACA,EAAA,EACA,KAkkFA,EAAA,EAAA,IACA,IAAA,OAAA,GAAA,IAAA,EAAA,OAAA,CACA,GAAA,IAAA,KAAA,IAAA,EAAA,GACA,GAAA,GAAA,EAAA,OAAA,EAAA,OAAA,IAAA,KACA,GAAA,GACA,MAAA,IAAA,MAAA,YAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KAAA,GAAA,QAEA,MAAA,IAEA,SAAA,WACA,MAAA,MAAA,SAGA,IAAA,GAAA,EAAA,OA0BA,OAzBA,GAAA,YAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,CACA,QAAA,EAAA,QACA,IAAA,GACA,EAAA,cACA,MACA,KAAA,GACA,EAAA,EAAA,EACA,MACA,SACA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,GAAA,KAAA,MAAA,OAAA,EAAA,EAAA,OAAA,GAGA,MADA,GAAA,EAAA,EAAA,GAAA,eACA,YAAA,EAAA,QAAA,EAAA,UAEA,KAAA,KAAA,cACA,KAAA,SAAA,EACA,KAAA,MAAA,EACA,KAAA,QAAA,EAAA,EAAA,GACA,KAAA,OAAA,EACA,KAAA,KAAA,EACA,KAAA,OAAA,GAEA,EAAA,YAAA,UAAA,MAAA,UACA,ICrqFA,EAAA,wBAAA,UAAA,aAAA,SAAA,GAEA,GAAA,GAAA,EAAA,YACA,GAAA,WAAA,SAAA,GACA,SAAA,IACA,MAEA,KAAA,UAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EACA,KAAA,QAAA,SAAA,EAAA,QAAA,EAAA,QAAA,OACA,KAAA,SAAA,SAAA,EAAA,SAAA,EAAA,SAAA,QACA,KAAA,SAAA,SAAA,EAAA,SAAA,EAAA,SAAA,KACA,KAAA,eAAA,SAAA,EAAA,eAAA,EAAA,eAAA,EACA,KAAA,WAAA,SAAA,EAAA,WAAA,EAAA,WAAA,GAEA,IAAA,GAAA,EAAA,UA0BA,OAzBA,GAAA,WACA,YAAA,EACA,OAAA,SAAA,GACA,GAAA,GAAA,KAAA,YAAA,EAAA,WAAA,KAAA,UAAA,EAAA,SAAA,KAAA,WAAA,EAAA,UAAA,KAAA,aAAA,EAAA,YAAA,KAAA,iBAAA,EAAA,cACA,KAAA,EACA,OAAA,CAEA,KAAA,KAAA,WAAA,EAAA,SACA,OAAA,CAEA,IAAA,KAAA,SAAA,CACA,GAAA,KAAA,SAAA,SAAA,EAAA,SAAA,OACA,OAAA,CAEA,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IACA,GAAA,KAAA,SAAA,KAAA,EAAA,SAAA,GACA,OAAA,CAGA,QAAA,EAEA,OAAA,IAIA,EAAA,aCxCA,EAAA,2BAAA,UAAA,YAAA,oBAAA,cAAA,cAAA,WAAA,yBAAA,SAAA,GAEA,EAAA,YACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,YAAA,wBACA,EAAA,EAAA,wBA+JA,OA9JA,GAAA,UAAA,SAAA,EAAA,EAAA,EAAA,GAIA,GAHA,KAAA,MAAA,EACA,KAAA,QAAA,EACA,KAAA,IAAA,EACA,EAAA,OAAA,IAAA,EAAA,OAAA,GAEA,MADA,MAAA,SAAA,EACA,MAEA,IAAA,EACA,KAAA,EAAA,CAGA,GAAA,GAAA,EAAA,OAAA,GACA,EAAA,EAAA,OAAA,EAEA,MAAA,aAAA,EAAA,EAAA,MAAA,GAAA,aAAA,EAAA,MAAA,GAAA,aACA,KAAA,WAAA,EAAA,EAAA,MAAA,GAAA,aAAA,EAAA,MAAA,GAAA,aACA,KAAA,OAAA,GAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,IACA,KAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,IACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,WAAA,KAAA,cAGA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,IACA,KAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,IACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,WAAA,KAAA,iBAIA,EAAA,EAAA,EAAA,WACA,OAAA,EACA,WAAA,SAAA,GACA,GAAA,GAAA,EAAA,CACA,OAAA,MAAA,MAAA,MAAA,EAAA,GAAA,KAAA,KAAA,QAAA,MAAA,EAAA,EAAA,IAAA,KAAA,KAAA,IAAA,MAAA,EAAA,KAEA,UAAA,SAAA,GACA,MAAA,MAAA,QAAA,MAAA,KAAA,OAAA,MAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,MAAA,KAAA,SAAA,MAAA,EAAA,KAEA,YAAA,SAAA,GACA,GAAA,GAAA,IACA,IAAA,KAAA,IAAA,EAAA,IAAA,GAAA,EAAA,CACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,KAAA,MAAA,KAAA,IACA,EAAA,KAAA,QACA,EAAA,EAAA,KAAA,IAAA,KAAA,MACA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,YACA,GAAA,EAAA,GAAA,GAAA,EAAA,gBAAA,aAAA,IAAA,EAAA,MAAA,GACA,OAAA,IAAA,KAAA,OAAA,IAAA,KAAA,OAAA,EAAA,GAEA,MAAA,MAAA,WAAA,GAAA,GAAA,GAAA,YAAA,IAGA,SAAA,SAAA,EAAA,GAGA,IAAA,GAFA,IAAA,MACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,QAAA,EAAA,IAAA,EAAA,SAAA,GACA,MAAA,GAAA,WAAA,IAAA,KAGA,IAAA,GAAA,EAAA,IAAA,EAAA,SAAA,GACA,MAAA,GAAA,kBAAA,IAQA,OANA,KACA,EAAA,UACA,EAAA,EAAA,IAAA,EAAA,SAAA,GACA,MAAA,GAAA,UAAA,MAGA,GAEA,WAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,MAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,MAAA,KAAA,IAAA,GACA,EAAA,EAAA,MAAA,EAAA,EACA,QACA,GAAA,GAAA,UAAA,KAAA,MAAA,EAAA,EAAA,GACA,GAAA,GAAA,UAAA,EAAA,EAAA,KAAA,IAAA,KAGA,SAAA,WACA,MAAA,IAAA,GAAA,UAAA,KAAA,IAAA,KAAA,QAAA,KAAA,QAEA,kBAAA,SAAA,GACA,MAAA,IAAA,GAAA,UAAA,KAAA,MAAA,MAAA,KAAA,MAAA,OAAA,KAAA,SAAA,KAAA,IAAA,MAAA,KAAA,OAAA,KAAA,QAAA,MAAA,KAAA,QAAA,gBAAA,aAAA,MAAA,IAAA,KAAA,QAAA,KAAA,KAAA,IAAA,MAAA,KAAA,OAAA,gBAAA,aAAA,MAAA,IAAA,KAAA,IAAA,MAAA,KAAA,IAAA,OAAA,KAAA,SAAA,KAAA,IAAA,MAAA,KAAA,OAAA,KAAA,IAAA,MAAA,KAAA,UAAA,gBAAA,aAAA,MAAA,MAEA,mBAAA,WACA,MAAA,KAAA,KAAA,QAAA,EAAA,IAAA,KAAA,QAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,GAEA,WAAA,SAAA,GACA,MAAA,MAAA,UAAA,EAAA,GAAA,IAEA,YAAA,SAAA,GACA,MAAA,MAAA,SAAA,EAAA,GAAA,IAEA,qBAAA,WACA,GAAA,MACA,EAAA,KAOA,OANA,UAAA,KAAA,YAAA,KAAA,WAAA,GAAA,KAAA,WAAA,EAAA,GACA,EAAA,KAAA,KAAA,YAEA,SAAA,KAAA,YAAA,KAAA,WAAA,GAAA,KAAA,WAAA,EAAA,GACA,EAAA,KAAA,KAAA,YAEA,EAAA,QAEA,iBAAA,WACA,KAAA,IAAA,OAAA,qDAEA,aAAA,SAAA,GACA,GAAA,GAAA,KACA,KACA,EAAA,EAAA,WAAA,EAAA,IAAA,SAAA,YAAA,EAAA,aAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IACA,EAAA,EAAA,aAAA,KAAA,OACA,EAAA,EAAA,aAAA,KAAA,SACA,EAAA,EAAA,aAAA,KAAA,KACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAiBA;MAhBA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,GAAA,GAAA,GAAA,EAAA,CACA,GAAA,GAAA,EAAA,WAAA,GACA,EAAA,EAAA,UAAA,GAAA,aACA,EAAA,EAAA,gBACA,EAAA,EAAA,MAAA,EAAA,IACA,GAAA,IAAA,EAAA,KAAA,GACA,EAAA,MACA,SAAA,EAAA,YACA,MAAA,EACA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,UAAA,EACA,KAAA,EAAA,IAAA,gBAAA,IAAA,GAAA,EAAA,EAAA,QAKA,GAEA,oBAAA,SAAA,GACA,GAAA,GAAA,EACA,EAAA,KAAA,aAAA,EAIA,OAHA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,EAAA,OAEA,GAEA,eAAA,SAAA,GACA,EAAA,iBAAA,KAAA,QAAA,EAAA,KAAA,QAAA,EAAA,KAAA,IAAA,EAAA,KAAA,IAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,UAAA,EAAA,aAAA,KAAA,OAAA,EAAA,aAAA,KAAA,SAAA,EAAA,aAAA,KAAA,SAGA,EAAA,YCtKA,EAAA,uBAAA,UAAA,YAAA,oBAAA,cAAA,cAAA,cAAA,WAAA,WAAA,wBAAA,2BAAA,SAAA,GAEA,EAAA,YACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,YAAA,wBACA,EAAA,EAAA,YAAA,oBACA,EAAA,EAAA,wBAqMA,OApMA,GAAA,2BACA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAsCA,QAAA,GAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,CACA,OAAA,GAAA,EAAA,EAAA,GArCA,GAJA,KAAA,MAAA,EACA,KAAA,SAAA,EACA,KAAA,SAAA,EACA,KAAA,IAAA,GACA,EAAA,CAGA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAEA,MADA,MAAA,SAAA,EACA,MAEA,MAAA,aAAA,KAAA,UAAA,GAAA,aACA,KAAA,WAAA,KAAA,UAAA,GAAA,aACA,KAAA,EAAA,EAAA,MAAA,GAAA,aACA,KAAA,EAAA,KAAA,EAAA,eACA,IAAA,GAAA,EAAA,MAAA,IAAA,KAAA,EAAA,MAAA,IAAA,KAAA,EAAA,MAAA,KAAA,KAAA,GACA,EAAA,EAAA,MAAA,GAAA,KAAA,EAAA,MAAA,KAAA,KAAA,EAAA,MAAA,IACA,EAAA,EAAA,MAAA,IAAA,KAAA,EAAA,MAAA,IAEA,EAAA,EAAA,gBACA,EAAA,EAAA,gBACA,EAAA,EAAA,IAAA,EAGA,IAFA,KAAA,OAAA,IAAA,EAAA,IAAA,GAAA,GACA,KAAA,aAAA,KAAA,MAAA,KAAA,MAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GACA,KAAA,cAAA,EAAA,CACA,GAAA,GAAA,KAAA,KAAA,KAAA,aACA,MAAA,aAAA,KAAA,MAAA,EACA,KAAA,aAAA,KAAA,MAAA,EAEA,GAAA,KAAA,UAAA,CACA,GAAA,GAAA,KAAA,WAAA,KAAA,OAAA,EACA,MAAA,eAAA,GAAA,GAAA,UAAA,EAAA,GAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,KAAA,GACA,KAAA,aAAA,GAAA,GAAA,UAAA,EAAA,GAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,KAAA,GAEA,KAAA,OAAA,EAAA,QACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,OACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,IAOA,IAAA,GAAA,IACA,MAAA,UAAA,EAAA,KAAA,MAAA,EAAA,KAAA,SAAA,EAAA,KAAA,SAAA,EAAA,KAAA,IAAA,GACA,EAAA,KAAA,KAAA,UAAA,SAAA,GACA,GAAA,GAAA,GAAA,IACA,EAAA,OAAA,EAAA,OAAA,UAAA,EAAA,WAAA,OAGA,KAAA,UAAA,EAAA,KAAA,MAAA,EAAA,KAAA,SAAA,EAAA,KAAA,SAAA,EAAA,KAAA,IAAA,GACA,EAAA,KAAA,KAAA,UAAA,SAAA,GACA,GAAA,GAAA,GAAA,IACA,EAAA,OAAA,EAAA,OAAA,UAAA,EAAA,WAAA,OAGA,KAAA,YACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,WAAA,KAAA,WAGA,EAAA,EAAA,EAAA,OACA,OAAA,EACA,QAAA,WACA,GAAA,GAAA,IACA,OAAA,MAAA,UAAA,KAAA,OAAA,YAAA,GAAA,KAAA,OAAA,GAAA,KAAA,OAAA,GAEA,WAAA,SAAA,GACA,GAAA,GAAA,EAAA,CACA,OAAA,MAAA,MAAA,MAAA,EAAA,EAAA,GAAA,KAAA,KAAA,SAAA,MAAA,EAAA,EAAA,EAAA,IAAA,KAAA,KAAA,SAAA,MAAA,EAAA,EAAA,EAAA,IAAA,KAAA,KAAA,IAAA,MAAA,EAAA,EAAA,KAEA,UAAA,SAAA,GACA,GAAA,GAAA,EAAA,CACA,OAAA,MAAA,MAAA,MAAA,GAAA,EAAA,GAAA,KAAA,KAAA,SAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,KAAA,SAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,KAAA,IAAA,MAAA,EAAA,EAAA,KAEA,YAAA,SAAA,GACA,GAAA,GAAA,IACA,IAAA,KAAA,IAAA,EAAA,IAAA,GAAA,EAAA,CACA,GAAA,GAAA,GAAA,EACA,EAAA,EAAA,KAAA,MAAA,KAAA,IACA,EAAA,EAAA,KAAA,SAAA,KAAA,SACA,EAAA,EAAA,KAAA,SAAA,KAAA,SACA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,YACA,GAAA,EAAA,GAAA,GAAA,EAAA,gBAAA,aAAA,IAAA,EAAA,MAAA,GACA,OAAA,IAAA,KAAA,OAAA,IAAA,KAAA,OAAA,EAAA,GAEA,MAAA,MAAA,WAAA,GAAA,GAAA,GAAA,YAAA,IAGA,KAAA,SAAA,GACA,GAAA,GAAA,EAAA,MAAA,KAAA,MACA,OAAA,IAAA,GAAA,EAAA,IAAA,KAAA,GAAA,EAAA,IAAA,KAAA,KAEA,WAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,MAAA,KAAA,SAAA,GACA,EAAA,KAAA,SAAA,MAAA,KAAA,IAAA,GACA,EAAA,KAAA,SAAA,MAAA,KAAA,SAAA,GACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,MAAA,EAAA,EACA,QACA,GAAA,GAAA,MAAA,KAAA,MAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,MAAA,EAAA,EAAA,EAAA,KAAA,IAAA,KAGA,SAAA,SAAA,EAAA,GAIA,IAAA,GAHA,GAAA,GACA,KACA,KACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,GAAA,EAAA,EACA,KACA,EAAA,EAAA,GAEA,EAAA,KAAA,KAAA,WAAA,GAAA,KAAA,KAAA,UAAA,GAAA,gBAAA,aAAA,MAAA,KACA,EAAA,GACA,EAAA,KAAA,GAAA,GAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KAGA,MAAA,IAEA,mBAAA,WACA,MAAA,KAAA,KAAA,SAAA,EAAA,IAAA,KAAA,SAAA,EAAA,IAAA,KAAA,SAAA,EAAA,IAAA,KAAA,SAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,GAEA,WAAA,SAAA,GACA,MAAA,MAAA,UAAA,EAAA,GAAA,IAEA,YAAA,SAAA,GACA,MAAA,MAAA,SAAA,EAAA,GAAA,IAEA,qBAAA,WACA,GAAA,GAAA,KAAA,UAAA,OAAA,KAAA,WACA,IAWA,OAVA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,GAAA,KACA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,GAAA,KAEA,EAAA,KAAA,KAIA,EAAA,QAEA,iBAAA,WACA,KAAA,IAAA,OAAA,iDAEA,aAAA,SAAA,GACA,GAAA,GAAA,KACA,KACA,EAAA,EAAA,WAAA,EAAA,IAAA,SAAA,YAAA,EAAA,aAAA,EAAA,IAAA,GAAA,EAAA,IAAA,IACA,EAAA,EAAA,aAAA,KAAA,OACA,EAAA,EAAA,aAAA,KAAA,UACA,EAAA,EAAA,aAAA,KAAA,UACA,EAAA,EAAA,aAAA,KAAA,KACA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAiBA,OAhBA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,GAAA,GAAA,GAAA,EAAA,CACA,GAAA,GAAA,EAAA,WAAA,GACA,EAAA,EAAA,UAAA,GAAA,aACA,EAAA,EAAA,gBACA,EAAA,EAAA,MAAA,EAAA,IACA,GAAA,IAAA,EAAA,KAAA,GACA,EAAA,MACA,SAAA,EAAA,YACA,MAAA,EACA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,UAAA,EACA,KAAA,EAAA,IAAA,gBAAA,IAAA,GAAA,EAAA,EAAA,QAKA,GAEA,oBAAA,SAAA,GACA,GAAA,GAAA,EACA,EAAA,KAAA,aAAA,EAIA,OAHA,GAAA,KAAA,EAAA,SAAA,GACA,GAAA,EAAA,OAEA,GAEA,eAAA,SAAA,GACA,EAAA,cAAA,KAAA,SAAA,EAAA,KAAA,SAAA,EAAA,KAAA,SAAA,EAAA,KAAA,SAAA,EAAA,KAAA,IAAA,EAAA,KAAA,IAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,GAAA,MAAA,EAAA,aAAA,KAAA,OAAA,EAAA,aAAA,KAAA,UAAA,EAAA,aAAA,KAAA,UAAA,EAAA,aAAA,KAAA,SAGA,EAAA,QC9MA,EAAA,+BAAA,UAAA,YAAA,oBAAA,cAAA,cAAA,cAAA,iBAAA,WAAA,WAAA,wBAAA,qBAAA,SAAA,GAEA,EAAA,YACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,YAAA,UACA,EAAA,EAAA,YACA,EAAA,EAAA,wBA4OA,OA3OA,GAAA,qBACA,EAAA,cAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAsEA,QAAA,GAAA,GACA,EAAA,cAAA,KACA,EAAA,OAAA,EAAA,OAAA,UAAA,EAAA,gBAAA,KA3DA,GAZA,EAAA,IACA,GAAA,EACA,EAAA,KAAA,GAAA,EACA,EAAA,KAAA,GAAA,EACA,GAAA,GAEA,EAAA,IACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,GAEA,EAAA,EAAA,CACA,GAAA,KAAA,GAAA,EACA,GAAA,KAAA,GAAA,EACA,GAAA,KAAA,GAAA,CACA,IAAA,GAAA,CACA,GAAA,EACA,EAAA,EAcA,GAZA,KAAA,OAAA,EACA,KAAA,QAAA,EACA,KAAA,QAAA,EACA,KAAA,SAAA,EACA,KAAA,WAAA,EACA,KAAA,SAAA,EACA,KAAA,cAAA,EACA,KAAA,cAAA,EAAA,cAAA,qBAAA,EAAA,EAAA,EAAA,GACA,KAAA,MAAA,KAAA,gBAAA,GACA,KAAA,IAAA,KAAA,gBAAA,GACA,KAAA,aAAA,KAAA,eAAA,GAAA,aACA,KAAA,WAAA,KAAA,eAAA,GAAA,aACA,IAAA,GAAA,IAAA,GAAA,IAAA,EAEA,MADA,MAAA,SAAA,EACA,MAEA,IAAA,EAAA,EACA,KAAA,IAAA,OAAA,4CAIA,MAAA,eAFA,KAAA,cACA,KAAA,WAAA,KAAA,SACA,KAAA,SACA,KAAA,WAAA,KAAA,SACA,KAAA,SAAA,EAAA,KAAA,GAEA,KAAA,WAGA,KAAA,WAAA,KAAA,SACA,KAAA,SACA,KAAA,WAAA,KAAA,SACA,KAAA,SAAA,EAAA,KAAA,GAEA,KAAA,YAKA,GAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,GAAA,EAAA,KAAA,GACA,KAAA,gBAAA,KAAA,cAAA,KAAA,WAAA,KAAA,SAAA,KAAA,SAAA,KAAA,WACA,KAAA,gBAAA,IACA,KAAA,iBAAA,EAAA,KAAA,IAGA,KAAA,eAAA,GAAA,GAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAAA,QACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,OACA,KAAA,OAAA,KAAA,OAAA,UAAA,KAAA,IACA,IAAA,GAAA,IAMA,IAAA,IAAA,EAAA,CACA,GAAA,GAAA,KAAA,OAAA,EAAA,GAAA,KAAA,IAAA,IACA,EAAA,KAAA,KAAA,EAAA,EAAA,KAAA,IAAA,GACA,MAAA,uBACA,EACA,EAAA,KAAA,GACA,EACA,EAAA,KAAA,IAEA,EAAA,KAAA,KAAA,sBAAA,KAGA,EAAA,EAAA,EAAA,eACA,SAAA,SAAA,GACA,MAAA,MAAA,WAAA,KAAA,eAAA,EAAA,gBAAA,EAAA,KAAA,WAAA,EAAA,KAAA,GAAA,KAAA,YAAA,EAAA,kBAAA,EAAA,KAAA,WAAA,KAAA,WAAA,EAAA,KAAA,KAEA,SAAA,SAAA,GACA,OAAA,KAAA,SAAA,GAAA,KAAA,aAAA,KAAA,eAAA,KAAA,aAEA,QAAA,SAAA,GACA,MAAA,MAAA,YAAA,KAAA,eAAA,KAAA,YAAA,GAEA,WAAA,SAAA,GACA,MAAA,MAAA,gBAAA,KAAA,QAAA,KAEA,UAAA,SAAA,GACA,MAAA,MAAA,eAAA,KAAA,QAAA,KAEA,YAAA,SAAA,GACA,GAAA,GAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,KAAA,IAAA,GACA,EAAA,KAAA,QAAA,KAAA,IAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,QAAA,KAAA,cAAA,GAAA,GAAA,KAAA,QAAA,KAAA,QAAA,GAEA,gBAAA,SAAA,GACA,MAAA,MAAA,cAAA,mBAAA,EAAA,YAAA,EAAA,KAEA,eAAA,SAAA,GACA,GAAA,GAAA,KAAA,cAAA,iBAAA,EAAA,YAAA,EAAA,GACA,OAAA,MAAA,cAAA,EAAA,gBAAA,EAAA,gBAAA,WAEA,cAAA,SAAA,GACA,GAAA,GAAA,KAAA,cAAA,EAAA,KAAA,SAAA,EAAA,KAAA,WACA,EAAA,GAAA,EAAA,KAAA,GAIA,OAHA,GAAA,IACA,GAAA,EAAA,KAAA,IAEA,GAAA,KAAA,iBAEA,SAAA,SAAA,EAAA,GAIA,IAAA,GAHA,GAAA,GACA,KACA,KACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,GAAA,EAAA,EACA,KACA,EAAA,EAAA,EAEA,IAAA,GAAA,KAAA,QAAA,EACA,GAAA,KAAA,KAAA,gBAAA,GAAA,KAAA,KAAA,eAAA,GAAA,gBAAA,aAAA,MAAA,KACA,EAAA,GACA,EAAA,KAAA,GAAA,GAAA,KAAA,EAAA,EAAA,GAAA,EAAA,KAGA,MAAA,IAEA,mBAAA,WACA,GAEA,GAFA,EAAA,IACA,EAAA,KAAA,cAAA,IAAA,IAEA,EAAA,EAAA,KAAA,SACA,IAAA,KAAA,gBAAA,EAAA,KAAA,GAAA,EAEA,MADA,GAAA,KAAA,gBAAA,KAAA,GAAA,IAAA,IACA,KAAA,KAAA,QAAA,IAAA,KAAA,QAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,CAEA,IAAA,IAAA,KAAA,WAAA,KAAA,UAAA,EACA,EAAA,KAAA,gBAAA,EACA,GAAA,GACA,IAAA,GAAA,KAAA,KAAA,QAAA,IAAA,KAAA,QAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EACA,EAAA,KAAA,KAAA,QAAA,IAAA,KAAA,QAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,CACA,OAAA,GAAA,IAAA,GAGA,WAAA,SAAA,GACA,MAAA,MAAA,UAAA,EAAA,GAAA,IAEA,YAAA,SAAA,GACA,MAAA,MAAA,SAAA,EAAA,GAAA,IAEA,qBAAA,WACA,GAAA,GAAA,KACA,IAUA,OATA,GAAA,KAAA,KAAA,sBAAA,SAAA,GACA,GAAA,EAAA,cAAA,GAAA,CACA,GAAA,GAAA,EAAA,SAAA,GACA,EAAA,KACA,GAAA,GAAA,EAAA,EAAA,GACA,EAAA,KAAA,MAIA,EAAA,QAEA,WAAA,SAAA,GACA,GAAA,GAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,GACA,EAAA,KAAA,QAAA,EACA,QACA,GAAA,GAAA,cAAA,KAAA,OAAA,KAAA,QAAA,KAAA,QAAA,KAAA,SAAA,EAAA,EAAA,KAAA,eACA,GAAA,GAAA,cAAA,KAAA,OAAA,KAAA,QAAA,KAAA,QAAA,KAAA,SAAA,EAAA,EAAA,KAAA,iBAGA,iBAAA,WACA,KAAA,IAAA,OAAA,yDAEA,aAAA,SAAA,GACA,GAAA,GAAA,KAAA,cACA,EAAA,EAAA,YAAA,GACA,EAAA,KAAA,eAAA,aAAA,EACA,OAAA,GAAA,IAAA,EAAA,SAAA,GACA,GAAA,GAAA,EAAA,mBAAA,EAAA,MACA,QACA,SAAA,EAAA,IAAA,SAAA,GACA,MAAA,EACA,OAAA,EAAA,eAAA,EAAA,QACA,KAAA,EAAA,SAIA,oBAAA,SAAA,GACA,GAAA,GAAA,KAAA,cAAA,YAAA,EACA,OAAA,MAAA,eAAA,oBAAA,IAEA,eAAA,SAAA,GACA,EAAA,QACA,EAAA,QAAA,KAAA,OAAA,EAAA,KAAA,OAAA,EAAA,KAAA,QAAA,KAAA,QAAA,KAAA,SAAA,KAAA,WAAA,KAAA,SAAA,KAAA,gBAEA,KAAA,cAAA,YAAA,sBAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,WAAA,KAAA,SAAA,KAAA,eACA,KAAA,cAAA,aAAA,sBAAA,KAGA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,aAAA,EAAA,YAAA,KAAA,QAAA,KAAA,WAAA,MAAA,EAAA,aAAA,EAAA,OACA,EAAA,EAAA,aAAA,EAAA,YAAA,KAAA,QAAA,KAAA,SAAA,KAAA,GAAA,IAAA,MAAA,EAAA,aAAA,EAAA,OACA,EAAA,EAAA,QACA,EAAA,EAAA,YACA,EAAA,EAAA,YACA,EAAA,EAAA,iBAAA,EACA,EAAA,GAAA,KAAA,cAAA,KAAA,cACA,EAAA,GAAA,KAAA,WAAA,KAAA,WACA,EAAA,GAAA,KAAA,SAAA,KAAA,QACA,OAAA,IAAA,GAAA,cAAA,EAAA,aAAA,KAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAGA,EAAA,cAAA,qBAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,YAAA,EAAA,UAAA,IAAA,YAAA,EAAA,QAAA,EAAA,MAEA,EAAA,gBCtPA,EAAA,cAAA,UAAA,gBAAA,YAAA,cAAA,cAAA,WAAA,cAAA,iBAAA,WAAA,WAAA,oBAAA,yBAAA,uBAAA,oBAAA,sBAAA,8BAAA,qBAAA,2BAAA,SAAA,GAmBA,QAAA,GAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,GAEA,QAAA,GAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,GArBA,EAAA,iBAAA,cAAA,EACA,IAAA,GAAA,EAAA,aACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,WACA,GAAA,eACA,EAAA,kBACA,EAAA,YAAA,UACA,EAAA,YAAA,oBACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,yBACA,GAAA,wBACA,EAAA,qBACA,EAAA,uBACA,EAAA,+BACA,EAAA,sBACA,EAAA,2BAOA,EAAA,MAAA,SAAA,EAAA,GACA,KAAA,SAAA,gBAAA,GAAA,KAEA,KAAA,OAAA,GAAA,EAAA,OACA,IAAA,GAAA,IACA,IAAA,gBAAA,IAEA,EAAA,KAAA,EAAA,MAAA,GAAA,SAAA,GAEA,EAAA,EAAA,KAAA,MAAA,EAAA,EAAA,QAKA,IAAA,GAAA,EAAA,KAobA,OAnbA,GAAA,WACA,YAAA,EACA,OAAA,SAAA,EAAA,GACA,MAAA,MAAA,YAAA,EAAA,EAAA,KAEA,eAAA,SAAA,EAAA,GACA,MAAA,MAAA,oBAAA,EAAA,EAAA,KAEA,oBAAA,SAAA,GACA,MAAA,MAAA,YAAA,KAAA,mBAAA,KAAA,KAEA,YAAA,SAAA,GACA,MAAA,MAAA,YAAA,GAAA,GAAA,SAAA,SAAA,KAEA,OAAA,SAAA,EAAA,GACA,MAAA,MAAA,YAAA,EAAA,EAAA,KAEA,eAAA,SAAA,EAAA,GACA,MAAA,MAAA,oBAAA,EAAA,EAAA,KAEA,oBAAA,SAAA,GACA,MAAA,MAAA,YAAA,KAAA,mBAAA,KAAA,KAEA,YAAA,SAAA,GACA,GAAA,KAAA,cAAA,CACA,GAAA,GAAA,KAAA,iBAAA,eACA,EAAA,EACA,EAAA,GAAA,GAAA,QAAA,KAAA,EAAA,EACA,MAAA,iBAAA,SAAA,GACA,EAAA,UACA,KAAA,iBAAA,WAAA,GACA,KAAA,OAAA,KAAA,OAAA,UAAA,GAAA,UAAA,QAIA,MAAA,OAAA,EAEA,OAAA,OAEA,iBAAA,SAAA,GACA,MAAA,MAAA,OAAA,EAAA,KAAA,mBAAA,IAEA,yBAAA,SAAA,GACA,MAAA,MAAA,eAAA,EAAA,IAEA,eAAA,SAAA,GACA,MAAA,MAAA,OAAA,KAAA,mBAAA,EAAA,IAEA,uBAAA,SAAA,GACA,MAAA,MAAA,eAAA,EAAA,IAEA,iBAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,sBAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAEA,yBAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,8BAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAEA,8BAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,kBACA,OAAA,MAAA,sBAAA,EAAA,KAAA,GAAA,EAAA,KAAA,KAEA,uBAAA,SAAA,EAAA,GACA,MAAA,MAAA,sBAAA,KAAA,iCAAA,EAAA,EAAA,KAEA,+BAAA,SAAA,EAAA,GACA,MAAA,MAAA,sBAAA,KAAA,iCAAA,EAAA,EAAA,GAAA,KAAA,KAAA,sBAEA,sBAAA,SAAA,EAAA,GACA,KAAA,OAAA,EACA,IAAA,GAAA,KAAA,iBAAA,eACA,EAAA,GAAA,GAAA,QAAA,UAAA,EAAA,EAAA,EAMA,OALA,MAAA,iBAAA,SAAA,GACA,EAAA,UACA,KAAA,iBAAA,WAAA,GACA,KAAA,OAAA,KAAA,OAAA,MAAA,EAAA,SAEA,MAEA,aAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,kBAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAEA,qBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,0BAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAEA,0BAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,kBACA,OAAA,MAAA,kBAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,EAAA,KAAA,KAEA,mBAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,kBAAA,KAAA,6BAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAEA,2BAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,kBAAA,KAAA,6BAAA,EAAA,EAAA,GAAA,KAAA,KAAA,oBAAA,EAAA,EAAA,GAAA,KAAA,KAAA,sBAEA,kBAAA,SAAA,EAAA,EAAA,GACA,KAAA,OAAA,EACA,IAAA,GAAA,KAAA,iBAAA,eACA,EAAA,GAAA,GAAA,QAAA,MAAA,EAAA,EAAA,EAAA,EAWA,OAVA,GAAA,UACA,EAAA,WACA,KAAA,iBAAA,WAAA,EAAA,gBACA,KAAA,iBAAA,WAAA,EAAA,eAEA,KAAA,iBAAA,WAAA,GAEA,KAAA,OAAA,KAAA,OAAA,MAAA,EAAA,SAEA,KAAA,iBAAA,SAAA,GACA,MAEA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAEA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GAAA,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,MACA,EAAA,EAAA,GAaA,OAZA,MAAA,eAAA,KAAA,iBAAA,YAAA,IAAA,EAAA,OAAA,KAAA,iBAAA,eAAA,IACA,KAAA,iBAAA,WAAA,GAAA,GAAA,QAAA,KAAA,KAAA,iBAAA,eAAA,IAEA,KAAA,eACA,KAAA,WAAA,GAAA,GAAA,SAEA,KAAA,iBAAA,SAAA,GACA,KAAA,iBAAA,SAAA,GACA,EAAA,UACA,KAAA,iBAAA,WAAA,GACA,KAAA,OAAA,KAAA,OAAA,MAAA,EAAA,SAEA,MAEA,cAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,MAAA,MAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,mBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GAAA,QAAA,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,MACA,EAAA,EAAA,GAaA,OAZA,MAAA,eAAA,KAAA,iBAAA,YAAA,IAAA,EAAA,OAAA,KAAA,iBAAA,eAAA,IACA,KAAA,iBAAA,WAAA,GAAA,GAAA,QAAA,KAAA,KAAA,iBAAA,eAAA,IAEA,KAAA,eACA,KAAA,WAAA,GAAA,GAAA,SAEA,KAAA,iBAAA,SAAA,GACA,KAAA,iBAAA,SAAA,GACA,EAAA,UACA,KAAA,iBAAA,WAAA,GACA,KAAA,OAAA,KAAA,OAAA,MAAA,EAAA,SAEA,MAEA,MAAA,WACA,GAAA,KAAA,cAAA,CACA,GAAA,GAAA,KAAA,iBACA,EAAA,GAAA,GAAA,OACA,GAAA,QACA,KAAA,WAAA,GACA,EAAA,SAAA,EAAA,iBAEA,MAAA,OAEA,wBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,kBACA,OAAA,MAAA,gBAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,gBAAA,WACA,KAAA,IAAA,OAAA,kCAEA,OAAA,SAAA,EAAA,EAAA,GACA,GAAA,gBAAA,GAAA,CACA,GAAA,GAAA,CAEA,OADA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAEA,MAAA,MAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAAA,IAGA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,gBAAA,GAAA,CACA,GAAA,GAAA,CAIA,OAHA,GAAA,EACA,EAAA,EACA,EAAA,EACA,KAAA,mBAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAEA,MAAA,MAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAAA,IAGA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,GAAA,GAAA,OAcA,OAbA,MAAA,WAAA,GACA,EAAA,SAAA,EAAA,EAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,IACA,EAAA,WAAA,GAAA,GAAA,QAAA,KAAA,EAAA,OAAA,GAAA,EAAA,OAAA,KACA,EAAA,WAAA,GAAA,GAAA,QAAA,KAAA,EAAA,OAAA,GAAA,EAAA,OAAA,KACA,EAAA,WAAA,GAAA,GAAA,QAAA,KAAA,EAAA,OAAA,GAAA,EAAA,OAAA,KACA,EAAA,QACA,KAAA,WAAA,GAAA,GAAA,SACA,KAAA,iBAAA,SAAA,EAAA,EAAA,IACA,KAAA,OAAA,KAAA,OAAA,gBAAA,EAAA,GAAA,gBAAA,EAAA,EAAA,EAAA,GAEA,MAEA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,CAMA,OALA,KAAA,EACA,KAAA,IAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,IAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,QAEA,KAAA,cAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,GAAA,EAAA,GAAA,GAAA,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,GAAA,GAAA,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,IAAA,GAAA,cAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,KAAA,GAAA,GAAA,GAAA,QAEA,MAEA,KAAA,WACA,MAAA,IAAA,GAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,SACA,KAAA,SAEA,eAAA,SAAA,GAEA,IAAA,GADA,GAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,SAAA,GAAA,eAAA,IAGA,WAAA,WAGA,IAAA,GAFA,MACA,EAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,IAAA,EAAA,aAAA,CACA,GAAA,GAAA,EAAA,kBAAA,MAEA,EAAA,KAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,SAAA,SAAA,GACA,MAAA,GAAA,uBACA,KAAA,KACA,EAAA,aACA,GAAA,MAEA,EAAA,KAAA,IAGA,MAAA,GAAA,KAAA,MAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAEA,EAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GACA,MAAA,GAAA,MAAA,EAAA,kBACA,EAAA,QACA,OAAA,IAAA,GAAA,EAAA,IAEA,cAAA,SAAA,GACA,MAAA,GACA,KAAA,OAAA,MAAA,KAAA,gBAAA,GAAA,QAEA,KAAA,QAGA,cAAA,SAAA,GACA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,OACA,OAAA,KAAA,KAAA,oBAAA,IAEA,aAAA,SAAA,GAGA,IAAA,GAFA,MACA,EAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,IAAA,EAAA,aAAA,CAEA,IAAA,GADA,GAAA,EAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,SAAA,EACA,GAAA,EAAA,OAAA,EAAA,aAAA,IAEA,EAAA,sBACA,EAAA,EAAA,OAAA,EAAA,oBAAA,aAAA,MAIA,MAAA,GAAA,OAAA,EAAA,SAAA,GACA,MAAA,GAAA,YAGA,oBAAA,SAAA,GAGA,IAAA,GAFA,GAAA,EACA,EAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,IAAA,EAAA,aAAA,CAEA,IAAA,GADA,GAAA,EAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,SAAA,GAAA,oBAAA,EAEA,GAAA,sBACA,GAAA,EAAA,oBAAA,oBAAA,KAIA,MAAA,IAEA,iBAAA,SAAA,GAEA,IAAA,GADA,GAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,IAAA,EAAA,aAAA,CAEA,IAAA,GADA,GAAA,EAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,SAAA,GAAA,iBAAA,GACA,OAAA,CAGA,IAAA,EAAA,qBACA,EAAA,oBAAA,iBAAA,GACA,OAAA,GAKA,OAAA,GAEA,gBAAA,SAAA,GAIA,IAAA,GAHA,MACA,EAAA,EAAA,QAAA,OACA,EAAA,KAAA,SAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,GACA,EAAA,EAAA,QAAA,EACA,GAAA,EAAA,OAAA,GAGA,IADA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,cAAA,EAAA,GAAA,gBAEA,OAAA,IAAA,GAAA,EAAA,IAEA,SAAA,WACA,MAAA,oBAAA,KAAA,aAAA,OAEA,OAAA,SAAA,GACA,KAAA,gBACA,KAAA,WAAA,GAAA,IACA,KAAA,iBAAA,SAAA,KAGA,WAAA,SAAA,GAEA,MADA,MAAA,SAAA,KAAA,GACA,MAEA,YAAA,WACA,MAAA,MAAA,SAAA,OAAA,GAEA,eAAA,WACA,MAAA,GAAA,KAAA,KAAA,WAEA,aAAA,WACA,MAAA,MAAA,cAAA,KAAA,iBAAA,eAAA,MAEA,eAAA,WACA,IAAA,KAAA,cACA,MAAA,KAEA,IAAA,GAAA,KAAA,gBACA,OAAA,GAAA,aAGA,EAAA,iBAFA,MAIA,+BAAA,WACA,GAAA,GAAA,KAAA,eACA,EAAA,KAAA,gBACA,OAAA,IAAA,YAAA,GAAA,QAAA,UAGA,EAAA,KAAA,EAAA,MAAA,EAAA,UAFA,GAIA,2BAAA,WACA,GAAA,GAAA,KAAA,eACA,EAAA,KAAA,gBACA,OAAA,IAAA,YAAA,GAAA,QAAA,MAGA,EAAA,KAAA,EAAA,MAAA,EAAA,WAFA,GAIA,iBAAA,WACA,GAAA,GAAA,KAAA,cACA,OAAA,GAAA,EAAA,EAAA,OAGA,EAAA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,IAAA,KAAA,EAAA,EAAA,EAAA,IAEA,EAAA,KAAA,EAAA,UACA,EAAA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,IAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,eAAA,EAAA,UACA,EAAA,OAAA,SAAA,GACA,OAAA,GAAA,IAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAEA,EAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,gBAAA,IACA,GAAA,IAAA,OAAA,EAAA,GAAA,OAAA,EAAA,IAEA,GAAA,IAAA,YAAA,GAAA,YAAA,IAGA,EAAA,eAAA,SAAA,EAAA,GACA,GAAA,GAAA,GAAA,EAKA,OAJA,GAAA,KAAA,EAAA,MAAA,GAAA,SAAA,GACA,GAAA,GAAA,EAAA,YAAA,EAAA,EAAA,KAAA,GAAA,EAAA,EACA,KAAA,EAAA,EAAA,YAAA,GAAA,EAAA,YAAA,KAEA,EAAA,SAEA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,MAAA,UAAA,GACA,GAAA,IAAA,OAAA,EAAA,EAAA,IAEA,GAAA,IAAA,OAAA,EAAA,EAAA,GAAA,SAEA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GACA,MAAA,UAAA,GACA,GAAA,IAAA,QAAA,EAAA,EAAA,EAAA,IAEA,GAAA,IAAA,QAAA,EAAA,EAAA,EAAA,GAAA,SAEA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IC3dA,EAAA,gCAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,mBACA,GACA,aACA,cACA,SACA,SACA,iBAEA,GAAA,gBAAA,SAAA,GACA,GAAA,GAAA,EAAA,SACA,GAAA,qBAAA,WACA,KAAA,UAGA,KAAA,GAFA,GAAA,KACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,QAAA,EAAA,QAGA,EAAA,iBAAA,SAAA,EAAA,GAIA,MADA,MAAA,QAAA,GAAA,KAAA,GACA,MAEA,EAAA,oBAAA,SAAA,EAAA,GAIA,MADA,MAAA,QAAA,GAAA,OAAA,EAAA,QAAA,KAAA,QAAA,GAAA,GAAA,GACA,MAEA,EAAA,UAAA,SAAA,EAAA,GAEA,GAAA,GAAA,KAAA,QAAA,GACA,EAAA,EAAA,MACA,IAAA,EAEA,IAAA,GADA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAKA,IAAA,GAAA,EAAA,eACA,OAAA,KC7CA,EAAA,gCAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,eACA,sBAAA,SAAA,GACA,MAAA,GAAA,MAAA,WAAA,eAEA,sBAAA,SAAA,EAAA,GAEA,GACA,GADA,EAAA,EAAA,MAAA,UAUA,OARA,GAAA,uBACA,EAAA,EAAA,wBAEA,EAAA,EAAA,2BAAA,EAAA,gBACA,IACA,EAAA,EAAA,cAAA,mBAGA,GAEA,MAAA,SAAA,EAAA,GACA,GAEA,GAFA,EAAA,EAAA,MACA,EAAA,EAAA,UAEA,IAAA,EAAA,cACA,EAAA,KAAA,sBAAA,EAAA,GACA,EAAA,uBAAA,GACA,EAAA,wBAAA,GACA,EAAA,aAAA,EAAA,OAEA,IAAA,EAAA,YAAA,CACA,GAAA,GAAA,EAAA,oBACA,EAAA,EAAA,qBACA,GAAA,EAAA,0BAAA,GACA,EACA,IAAA,GACA,EAAA,aAAA,EAAA,GAGA,GAAA,EAAA,aAAA,IACA,EAAA,aAAA,EAAA,EAAA,GAAA,mBAIA,EAAA,sBAAA,KAAA,cAAA,KACA,EAAA,aAAA,EAAA,EAAA,uBAEA,EAAA,aACA,EAAA,YAAA,IAGA,KAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,MACA,EAAA,EAAA,UACA,GAAA,eACA,EAAA,yBAEA,EAAA,qBAAA,KAAA,cAAA,KACA,EAAA,aAAA,EAAA,EAAA,wBAGA,cAAA,SAAA,GACA,GAAA,GAAA,EAAA,oBACA,OAAA,GAAA,eAAA,IAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,UAAA,EAAA,eAGA,IAAA,GAAA,EAAA,aACA,OAAA,KCpEA,EAAA,sBAAA,UAAA,cAAA,iBAAA,cAAA,cAAA,WAAA,aAAA,kBAAA,+BAAA,gCAAA,SAAA,GAEA,GAAA,GAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,YAAA,MAEA,GADA,EAAA,cACA,EAAA,oBACA,EAAA,EAAA,gCACA,EAAA,EAAA,gCACA,EAAA,CACA,GAAA,KAAA,SAAA,GACA,GAAA,GAAA,IACA,MAAA,IAAA,IACA,KAAA,cACA,KAAA,UAAA,EACA,KAAA,SAAA,EACA,KAAA,WAAA,EACA,KAAA,WAAA,KACA,KAAA,WAAA,KACA,KAAA,WAAA,KACA,KAAA,QAAA,KACA,KAAA,aACA,KAAA,YACA,KAAA,UACA,KAAA,gBACA,KAAA,WAAA,GAAA,GACA,KAAA,oBACA,OAAA,WACA,EAAA,yBAEA,MAAA,WACA,EAAA,yBAGA,KAAA,WAAA,qBAAA,KAAA,oBACA,KAAA,mBACA,KAAA,uBACA,KAAA,2BAAA,EACA,KAAA,QAAA,EAAA,QACA,KAAA,YAAA,EAAA,QACA,KAAA,aAAA,EAAA,QACA,KAAA,cAAA,EACA,KAAA,iBAAA,KAAA,YACA,KAAA,mBAAA,EACA,KAAA,aAAA,KACA,KAAA,mBAAA,EACA,KAAA,aAAA,KACA,KAAA,mBAAA,EACA,KAAA,aAAA,EACA,KAAA,oBAAA,EACA,KAAA,kBAAA,EACA,KAAA,UAAA,KACA,KAAA,iBAAA,KACA,KAAA,mBAAA,KACA,KAAA,mBAAA,EACA,KAAA,kBAAA,EACA,GACA,KAAA,OAAA,GAIA,IAAA,GAAA,EAAA,IA4/CA,OA3/CA,GAAA,WACA,YAAA,EACA,YAAA,SAAA,EAAA,GAIA,EAAA,SAAA,KAAA,MACA,KAAA,UAAA,OAAA,EAAA,EAAA,GACA,EAAA,mBACA,KAAA,cAAA,EACA,KAAA,iBAAA,EAAA,GACA,KAAA,cAAA,GACA,EAAA,0BAEA,SAAA,SAAA,GACA,KAAA,YAAA,KAAA,UAAA,OAAA,IAEA,YAAA,SAAA,GAGA,GAAA,GAAA,EAAA,QAAA,KAAA,UAAA,EACA,MAAA,qBAAA,EAAA,IAEA,cAAA,SAAA,GAGA,GAAA,GAAA,KAAA,UAAA,EACA,MAAA,qBAAA,EAAA,IAEA,qBAAA,SAAA,EAAA,GAIA,EAAA,cAAA,EACA,IAAA,GAAA,EAAA,QAAA,EAAA,SAAA,KACA,MAAA,eAAA,EAAA,GACA,EAAA,SAAA,OAAA,EAAA,GACA,KAAA,UAAA,OAAA,EAAA,GACA,KAAA,mBACA,KAAA,mBAAA,EACA,KAAA,cAAA,IAEA,kBAAA,WACA,KAAA,iBAEA,YAAA,SAAA,GACA,GAAA,KAAA,YAAA,EAAA,CACA,KAAA,KAAA,UAAA,QACA,KAAA,YAAA,KAAA,UAAA,KAAA,UAAA,OAAA,GAGA,KAAA,GADA,GAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,SAAA,EAAA,MAIA,YAAA,WACA,MAAA,MAAA,UAAA,MAAA,IAEA,iBAAA,WACA,MAAA,MAAA,UAAA,QAEA,WAAA,WACA,MAAA,MAAA,SAAA,MAAA,IAEA,WAAA,SAAA,GACA,MAAA,MAAA,UAAA,IAEA,cAAA,SAAA,GACA,MAAA,GAAA,QAAA,KAAA,SAAA,IAEA,aAAA,SAAA,GACA,MAAA,GAAA,QAAA,KAAA,UAAA,IAEA,YAAA,WACA,GAAA,GAAA,IACA,GAAA,KAAA,KAAA,SAAA,MAAA,GAAA,SAAA,GACA,EAAA,iBAAA,MAGA,iBAAA,SAAA,GACA,KAAA,aAAA,KAAA,KAAA,UAAA,OAAA,IACA,KAAA,YAAA,GACA,KAAA,SAAA,KAGA,WAAA,WACA,GAAA,GAAA,IACA,GAAA,KAAA,KAAA,SAAA,MAAA,GAAA,SAAA,GACA,EAAA,gBAAA,MAGA,gBAAA,SAAA,GACA,IAAA,KAAA,aAAA,KACA,KAAA,YAAA,GACA,KAAA,YAAA,EAAA,KAGA,OAAA,WACA,GAAA,GAAA,IACA,GAAA,KAAA,KAAA,SAAA,MAAA,GAAA,SAAA,GACA,EAAA,YAAA,MAGA,QAAA,SAAA,EAAA,GAEA,KAAA,OAAA,MACA,QAAA,EACA,QAAA,KAGA,cAAA,SAAA,EAAA,GACA,KAAA,aAAA,MACA,SAAA,EACA,QAAA,KAGA,eAAA,WACA,GACA,EAKA,IAJA,KAAA,mBACA,KAAA,kBAAA,EACA,KAAA,UAAA,aAAA,KAAA,cAEA,KAAA,kBAAA,CAEA,IADA,EAAA,KAAA,UAAA,OACA,KACA,KAAA,UAAA,GAAA,gBAEA,IAAA,GAAA,KAAA,YAGA,KAFA,KAAA,aAAA,EAAA,QAAA,OACA,EAAA,KAAA,UAAA,OACA,KACA,KAAA,aAAA,cAAA,KAAA,UAAA,GAAA,QAEA,MAAA,mBAAA,EACA,KAAA,aAAA,OAAA,IACA,KAAA,UAAA,cAAA,KAAA,cAGA,GAAA,KAAA,aAAA,CACA,KAAA,cAAA,CACA,IAAA,GAAA,KAAA,QACA,EAAA,KAAA,iCAAA,KAAA,YAAA,OAAA,cAAA,KAAA,eACA,GAAA,EAAA,OAAA,EACA,IAAA,EAAA,CAGA,IAFA,KAAA,QAAA,EACA,EAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,kBAEA,MAAA,UAAA,SAAA,KAAA,WAGA,KAAA,kBAAA,KAAA,mBAAA,KAAA,eACA,KAAA,kBAeA,oBAAA,WACA,GAAA,GAAA,IAEA,IAAA,KAAA,kBAAA,CACA,GAAA,IAAA,CACA,MAAA,aAAA,KAAA,YAAA,MAEA,KADA,GAAA,GAAA,KAAA,UAAA,OACA,KAAA,CACA,GAAA,GAAA,KAAA,UAAA,EACA,GAAA,sBACA,EAAA,eACA,GAAA,EACA,EAAA,aAAA,cAAA,EAAA,eAGA,KAAA,aACA,GAAA,EACA,KAAA,aAAA,cAAA,KAAA,WAAA,SAEA,GACA,KAAA,iCAAA,KAAA,cACA,KAAA,aAAA,cAAA,KAAA,UAEA,KAAA,aAAA,KAEA,KAAA,mBAAA,IAGA,oBAAA,WACA,GAAA,GAAA,IAEA,IAAA,KAAA,kBAAA,CACA,GAAA,IAAA,CACA,MAAA,aAAA,KAAA,YAAA,MAEA,KADA,GAAA,GAAA,KAAA,UAAA,OACA,KAAA,CACA,GAAA,GAAA,KAAA,UAAA,EACA,GAAA,sBACA,EAAA,eACA,GAAA,EACA,EAAA,aAAA,cAAA,EAAA,eAGA,KAAA,aACA,GAAA,EACA,KAAA,aAAA,cAAA,KAAA,WAAA,SAEA,GACA,KAAA,iCAAA,KAAA,cACA,KAAA,aAAA,cAAA,KAAA,UAEA,KAAA,aAAA,KAEA,KAAA,mBAAA,IAGA,cAAA,WAYA,GAXA,KAAA,cAEA,KAAA,oBACA,KAAA,uBAEA,KAAA,aAAA,GAEA,KAAA,qBACA,KAAA,0BACA,KAAA,oBAAA,GAEA,KAAA,iBAAA,CACA,KAAA,kBAAA,CAGA,KAAA,GAFA,GAAA,KAAA,UACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,kBAIA,iBAAA,WACA,KAAA,cAAA,EACA,KAAA,mBAAA,EACA,KAAA,mBAAA,CAEA,KADA,GAAA,GAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,yBAGA,sBAAA,WACA,IAAA,KAAA,kBAAA,CACA,KAAA,mBAAA,EACA,KAAA,mBAAA,EACA,KAAA,mBAAA,CAEA,KADA,GAAA,GAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,0BAIA,gBAAA,WAEA,KAAA,aAAA,CAEA,KADA,GAAA,GAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,wBAGA,uBAAA,WACA,KAAA,oBAAA,CAEA,KADA,GAAA,GAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,wBAGA,qBAAA,WACA,IAAA,KAAA,iBAAA,CACA,KAAA,kBAAA,CAEA,KADA,GAAA,GAAA,KAAA,SAAA,OACA,KACA,KAAA,SAAA,GAAA,yBAIA,eAAA,SAAA,GAEA,KAAA,yBACA,KAAA,YAAA,OAAA,KACA,KAAA,kBAAA,EACA,KAAA,mBACA,KAAA,YAAA,GAEA,KAAA,mBAEA,iBAAA,WACA,KAAA,0BAEA,uBAAA,WACA,KAAA,sBACA,KAAA,cAAA,IAEA,aAAA,SAAA,GACA,EACA,KAAA,yBAEA,KAAA,6BAGA,QAAA,SAAA,GACA,CAAA,GAAA,GAAA,EAAA,SAAA,KAAA,UAAA,EACA,GAAA,SAAA,EAAA,SAAA,MAEA,MAAA,IAEA,cAAA,WACA,MAAA,MAAA,aAEA,eAAA,WAEA,MADA,MAAA,iBACA,KAAA,cAEA,UAAA,WAEA,MADA,MAAA,iBACA,KAAA,SAEA,iBAAA,WAGA,IAFA,GAAA,GAAA,KAAA,YAAA,OACA,EAAA,KAAA,UAAA,OACA,KAAA,CACA,GAAA,GAAA,KAAA,UAAA,EACA,GAAA,aACA,EAAA,cAAA,EAAA,oBAIA,MAAA,MAAA,oBAAA,IAEA,kBAAA,SAAA,GACA,GAAA,KAUA,OATA,GAAA,UACA,EAAA,SAAA,GAEA,EAAA,UACA,EAAA,SAAA,GAEA,EAAA,QACA,EAAA,OAAA,GAEA,KAAA,gBAAA,EAAA,MAAA,IAEA,gBAAA,SAAA,EAAA,GAEA,SAAA,IACA,KAEA,IAAA,GAAA,SAAA,EAAA,gBAAA,EAAA,EAAA,eACA,EAAA,SAAA,EAAA,iBAAA,EAAA,EAAA,eACA,IAAA,IAAA,KAAA,YACA,MAAA,KAEA,IAAA,IAAA,KAAA,aACA,MAAA,KAEA,MAAA,iBACA,EAAA,SACA,KAAA,sBAEA,EAAA,SACA,KAAA,qBAEA,IAAA,GAAA,IAAA,EAAA,SAAA,KAAA,cAAA,EAAA,SAAA,KAAA,cAAA,EAAA,MACA,IAAA,EAAA,EAAA,UAAA,KAAA,aAAA,cAAA,IAAA,EAAA,UAAA,KAAA,aAAA,cAAA,IAAA,KAAA,QAAA,cAAA,GACA,MAAA,KAEA,IAAA,GAAA,KACA,EAAA,KAAA,WAAA,aAAA,gBAAA,EAAA,eAAA,EAAA,EAAA,EAAA,GACA;GAAA,KAAA,UAAA,OAAA,IAAA,GAAA,KAAA,aAAA,cAAA,IACA,IAAA,GAAA,GAAA,KAAA,UAAA,OAAA,EAAA,GAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,UAAA,GACA,EAAA,EAAA,gBAAA,EAAA,EACA,IAAA,EAGA,MAFA,GAAA,YAAA,KAAA,GACA,EAAA,aACA,EAIA,GAAA,EAAA,CACA,GAAA,EAAA,SAAA,KAAA,WAGA,MAFA,GAAA,KAAA,WAAA,cAAA,GAAA,GAAA,GAAA,MAAA,MAAA,KACA,EAAA,aACA,CAEA,KAAA,EAAA,SAAA,EAAA,QAAA,KAAA,WAGA,MAFA,GAAA,KAAA,WAAA,cAAA,GAAA,GAAA,GAAA,MAAA,MAAA,KACA,EAAA,aACA,EAGA,OAAA,GAAA,KAAA,YAAA,cAAA,KACA,KAAA,kBAAA,IACA,EAAA,aACA,GAAA,GAAA,MAAA,QAGA,EAAA,aACA,OAEA,cAAA,SAAA,GACA,MAAA,QAAA,KAAA,gBAAA,IAEA,kBAAA,SAAA,GACA,MAAA,MAAA,YAAA,cAAA,IAEA,qBAAA,SAAA,GACA,MAAA,MAAA,YAAA,iBAAA,IAEA,UAAA,WACA,OAAA,GAEA,UAAA,WACA,MAAA,KAAA,KAAA,SAAA,QAEA,YAAA,WACA,MAAA,MAAA,UAAA,OAAA,GAEA,eAAA,SAAA,GACA,EAAA,KAEA,KAAA,GADA,GAAA,KAAA,UAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,UAAA,GAAA,eAAA,IAGA,wBAAA,SAAA,GAGA,IAAA,GAFA,MACA,EAAA,KAAA,UAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,UAAA,EACA,GAAA,QAAA,aAAA,GAAA,WACA,EAAA,KAAA,GAGA,MAAA,IAEA,iBAAA,SAAA,GAIA,MAHA,KAAA,EAAA,QAAA,KAAA,gBAAA,IACA,KAAA,gBAAA,KAAA,GAEA,MAEA,oBAAA,SAAA,GAGA,MADA,MAAA,gBAAA,OAAA,EAAA,QAAA,KAAA,gBAAA,GAAA,GACA,MAEA,kBAAA,WACA,MAAA,MAAA,gBAAA,MAAA,IAEA,cAAA,SAAA,EAAA,GAMA,QAAA,GAAA,GACA,EAAA,YAAA,GACA,EAAA,UAAA,EAAA,EACA,IAAA,GAAA,EAAA,SACA,EAAA,EAAA,MACA,GAAA,GAAA,EAAA,CACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAEA,IACA,EAAA,iBAdA,GAAA,GAAA,GAAA,GAAA,KACA,GAAA,aACA,EAAA,MAAA,CACA,IAAA,IAAA,CAcA,GAAA,OAEA,UAAA,SAAA,EAAA,EAAA,GACA,GAAA,gBAAA,GAAA,CACA,IAAA,IAAA,EACA,MAEA,GACA,KAAA,mBAAA,EAAA,GAEA,KAAA,aAAA,EAAA,YAAA,EAAA,QAEA,CACA,GAAA,GAAA,CACA,KAAA,EAAA,IAAA,EAAA,EACA,MAEA,MAAA,UAAA,EAAA,EAAA,EAAA,EAAA,KAGA,MAAA,SAAA,EAAA,EAAA,GACA,GAAA,gBAAA,GACA,GAAA,SAAA,EAAA,CACA,GAAA,IAAA,EACA,MAEA,MAAA,aAAA,EAAA,QAAA,EAAA,QACA,CACA,GAAA,IAAA,GAAA,IAAA,EACA,MAEA,GACA,KAAA,cAAA,EAAA,QAAA,EAAA,IAEA,KAAA,aAAA,EAAA,QAAA,EAAA,QAGA,CACA,GAAA,GAAA,CACA,MAAA,MAAA,EAAA,EAAA,EAAA,EAAA,KAGA,OAAA,SAAA,EAAA,GACA,IAAA,GAAA,EAAA,KAAA,MAGA,EACA,KAAA,cAAA,EAAA,UAAA,IAEA,KAAA,aAAA,EAAA,UAAA,MAGA,aAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,aAAA,EAAA,GAAA,EAAA,EACA,GAAA,EAAA,UAAA,GAAA,YAAA,GACA,EAAA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,YAAA,GACA,KAAA,cAAA,IAEA,KAAA,WACA,MAAA,MAAA,WAAA,YAAA,OAEA,KAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,KAAA,OAAA,GAAA,GACA,MAEA,KAAA,WACA,MAAA,MAAA,WAAA,YAAA,OAEA,KAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,EAAA,KAAA,QAAA,GACA,MAEA,eAAA,WACA,MAAA,MAAA,WAAA,YAAA,kBAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,gBASA,OARA,gBAAA,IACA,SAAA,IACA,EAAA,GAEA,KAAA,aAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,KAAA,aAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,MAEA,YAAA,WACA,MAAA,MAAA,WAAA,YAAA,eAEA,YAAA,SAAA,GAGA,MADA,MAAA,aAAA,EAAA,UAAA,EAAA,KAAA,gBACA,MAEA,eAAA,SAAA,EAAA,GACA,GAGA,GAAA,EAHA,EAAA,KAAA,WAAA,YACA,EAAA,EAAA,MACA,EAAA,EAAA,KAUA,OARA,gBAAA,IACA,EAAA,EAAA,EACA,EAAA,EAAA,IAEA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAEA,KAAA,UAAA,EAAA,GAAA,GACA,MAEA,eAAA,WACA,GAAA,GAAA,KAAA,WAAA,WACA,OAAA,IAAA,GAAA,EAAA,MAAA,EAAA,QAEA,aAAA,SAAA,GACA,KAAA,WAAA,OAAA,IAEA,cAAA,SAAA,GACA,KAAA,WAAA,QAAA,IAEA,mBAAA,SAAA,EAAA,GACA,KAAA,WAAA,mBAAA,EAAA,IAEA,UAAA,SAAA,GACA,KAAA,WAAA,IAAA,IAEA,UAAA,WACA,MAAA,MAAA,WAAA,aAEA,aAAA,SAAA,GAEA,KAAA,aAAA,IACA,KAAA,wBACA,KAAA,WAAA,wBAAA,KAAA,oBACA,KAAA,WAAA,EACA,KAAA,WAAA,yBAAA,KAAA,oBACA,KAAA,yBAGA,aAAA,WACA,MAAA,MAAA,YAEA,eAAA,WACA,KAAA,UAAA,EAAA,WAEA,sBAAA,WACA,KAAA,6BAEA,qBAAA,WACA,KAAA,wBACA,KAAA,mBACA,KAAA,0BAEA,QAAA,WACA,MAAA,MAAA,YAAA,MAEA,QAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,KAAA,UAAA,GAAA,GACA,MAEA,SAAA,WACA,MAAA,MAAA,YAAA,MAEA,SAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,KAAA,WAAA,GAAA,GACA,MAEA,UAAA,WACA,MAAA,MAAA,YAAA,aAEA,UAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,MAAA,KAAA,cAAA,GACA,MAEA,WAAA,WACA,MAAA,MAAA,YAAA,cAEA,WAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,KAAA,aAAA,GAAA,GACA,MAEA,WAAA,WACA,MAAA,MAAA,YAAA,cAEA,WAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,EAAA,KAAA,cAAA,GACA,MAEA,OAAA,WACA,MAAA,MAAA,YAAA,MAEA,OAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,EAAA,KAAA,UAAA,GACA,MAEA,UAAA,WACA,MAAA,MAAA,YAAA,MAEA,UAAA,SAAA,GAGA,MADA,MAAA,UAAA,EAAA,EAAA,KAAA,aAAA,GACA,MAEA,SAAA,WACA,MAAA,MAAA,YAAA,YAEA,UAAA,WACA,MAAA,MAAA,YAAA,aAEA,MAAA,WACA,MAAA,MAAA,KAEA,UAAA,WACA,MAAA,MAAA,UAEA,WAAA,SAAA,GASA,MAPA,KAAA,KAAA,WACA,KAAA,UACA,KAAA,4BAEA,KAAA,SAAA,EACA,KAAA,0BAEA,MAEA,WAAA,WACA,MAAA,MAAA,UAEA,WAAA,SAAA,GAEA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,KAAA,KAAA,WACA,KAAA,4BACA,KAAA,SAAA,EACA,KAAA,wBAGA,WAAA,WACA,MAAA,MAAA,WAEA,YAAA,SAAA,GAEA,KAAA,YAAA,IACA,KAAA,UAAA,IAGA,UAAA,SAAA,GAEA,KAAA,QAAA,SAAA,EAAA,KAAA,GAEA,UAAA,WACA,MAAA,MAAA,SAEA,aAAA,SAAA,GAEA,KAAA,aAAA,IACA,KAAA,WAAA,EACA,KAAA,qBAGA,aAAA,WACA,MAAA,MAAA,YAEA,aAAA,SAAA,GAEA,KAAA,aAAA,IACA,KAAA,WAAA,EACA,KAAA,qBAGA,aAAA,WACA,MAAA,MAAA,YAEA,gBAAA,WACA,KAAA,WAAA,KAAA,kBACA,KAAA,iBAAA,cAAA,KAAA,iBAAA,gBAAA,KAAA,iBAAA,aAAA,KAAA,iBAAA,SACA,KAAA,iBAAA,SAAA,KACA,KAAA,iBAAA,eAAA,mBACA,MAAA,iBAAA,SAEA,KAAA,mBAAA,KAAA,UAAA,gBAAA,KAAA,mBAEA,KAAA,mBAAA,MAGA,qBAAA,WACA,MAAA,MAAA,oBAEA,qBAAA,WACA,QAAA,KAAA,oBAEA,YAAA,SAAA,GACA,GAAA,EACA,IAAA,gBAAA,GAEA,EAAA,EAAA,SAAA,OACA,IAAA,YAAA,GAAA,SACA,EAAA,MACA,CAAA,GAAA,EAGA,KAAA,IAAA,OAAA,kCAAA,EAFA,GAAA,KAIA,IAAA,KAAA,YAEA,KAAA,UAAA,EACA,KAAA,kBACA,KAAA,2BAGA,YAAA,WACA,MAAA,MAAA,WAEA,YAAA,WACA,QAAA,KAAA,WAEA,mBAAA,SAAA,GACA,KAAA,iBAAA,EACA,KAAA,kBACA,KAAA,0BAEA,mBAAA,WACA,MAAA,MAAA,kBAEA,mBAAA,WACA,QAAA,KAAA,kBAEA,oBAAA,SAAA,GAEA,KAAA,oBAAA,IACA,KAAA,kBAAA,EACA,KAAA,2BAGA,mBAAA,WACA,MAAA,MAAA,mBAEA,mBAAA,SAAA,GAEA,KAAA,mBAAA,IACA,KAAA,iBAAA,EACA,KAAA,2BAGA,kBAAA,WACA,MAAA,MAAA,kBAEA,cAAA,SAAA,IAEA,IAAA,KAAA,mBAAA,IAAA,KAAA,oBACA,KAAA,kBAAA,EACA,KAAA,iBAAA,EACA,KAAA,2BAGA,eAAA,WAGA,IAFA,GAAA,GAAA,GAAA,GAAA,MACA,EAAA,KACA,GACA,EAAA,YAAA,GAEA,EAAA,EAAA,SAAA,EAEA,OAAA,IAEA,kBAAA,WAGA,IAFA,GAAA,MACA,EAAA,KAAA,UAAA,OAAA,KAAA,UAAA,OAAA,MACA,EAAA,QAAA,CACA,GAAA,GAAA,EAAA,KACA,GAAA,SAAA,EAAA,KACA,EAAA,KAAA,GACA,EAAA,EAAA,OAAA,EAAA,UAAA,EAAA,WAGA,MAAA,IAEA,4BAAA,WAcA,QAAA,GAAA,SACA,GAAA,EAAA,IAAA,EAAA,IACA,EAAA,MAAA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,OAEA,EAAA,KAAA,GAlBA,GAGA,GAHA,KACA,KACA,IAmBA,KAjBA,EAAA,KAAA,KAAA,oBAAA,SAAA,GACA,EAAA,EAAA,OACA,EAAA,KAAA,EAAA,SAAA,SAAA,GACA,EAAA,EAAA,IAAA,EAAA,KAAA,IAEA,EAAA,QAAA,QACA,EAAA,KAAA,KAWA,EAAA,QACA,EAAA,EAAA,MACA,EAAA,KAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAOA,OAAA,IAEA,YAAA,SAAA,GAkBA,QAAA,GAAA,SACA,GAAA,EAAA,IAAA,EAAA,IACA,EAAA,MAAA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,OAEA,EAAA,KAAA,GAtBA,GAAA,OAAA,GAAA,EAAA,SAAA,KAAA,SAAA,GACA,OAAA,CAEA,IAGA,GAHA,KACA,KACA,IAoBA,KAlBA,EAAA,KAAA,KAAA,oBAAA,OAAA,EAAA,qBAAA,SAAA,GACA,EAAA,EAAA,OACA,EAAA,KAAA,EAAA,SAAA,SAAA,GACA,EAAA,EAAA,IAAA,EAAA,KAAA,IAEA,EAAA,QAAA,QAAA,IAAA,GACA,EAAA,KAAA,KAGA,EAAA,KAAA,IAAA,EAAA,KAAA,EASA,EAAA,QACA,EAAA,EAAA,MACA,EAAA,KAAA,GACA,EAAA,KAAA,EAAA,SAAA,GACA,IAAA,MACA,EAAA,EAGA,OAAA,GAAA,MAAA,EAAA,SAAA,GACA,MAAA,GAAA,MAAA,EAAA,WACA,OAAA,OAIA,UAAA,WACA,GAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,OAAA,GACA,EAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,OAAA,GACA,EAAA,CACA,GAAA,gBAAA,EAAA,SAAA,GACA,GAAA,EAAA,SAAA,CACA,GAAA,GAAA,GAAA,OAAA,EAAA,GAAA,KAAA,IACA,SAAA,IAAA,EAAA,EAAA,MAAA,WAAA,QAAA,IAAA,EAAA,MAAA,YAEA,GAAA,EAAA,SAAA,EAAA,KACA,IAEA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EACA,EAAA,KAAA,WACA,GAAA,SAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,MACA,EAAA,SAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,MACA,EAAA,SAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,WAAA,GACA,EAAA,SAAA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,YAAA,EACA,IAAA,GAAA,SAAA,cAAA,SACA,GAAA,MAAA,EACA,EAAA,OAAA,CACA,IAAA,GAAA,EAAA,WAAA,MACA,EAAA,EAAA,SAAA,cAAA,OACA,GAAA,MAAA,GAAA,OAAA,EACA,IAAA,GAAA,GAAA,GAAA,MAAA,EACA,GAAA,SAAA,GACA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,cACA,EAAA,eAAA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,MAGA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,SAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,YAAA,EAAA,IACA,EAAA,EAAA,EAAA,IAEA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,UAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,cAAA,MACA,GAAA,OAAA,WACA,EAAA,EAAA,EAAA,EACA,WACA,GAAA,OACA,MAAA,MAGA,EAAA,IAAA,GACA,EAAA,EAAA,EAAA,IAEA,wBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,MACA,UAAA,GAAA,GAAA,MAAA,GACA,GAAA,EACA,GAAA,SAGA,EAAA,EAAA,EAAA,IAEA,wBAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAUA,OATA,MAAA,SAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,MACA,UAAA,GAAA,GAAA,MAAA,GACA,GAAA,EACA,GAAA,QAGA,EAAA,EAAA,EAAA,GAEA,GAEA,yBAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAUA,OATA,MAAA,UAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,MACA,UAAA,GAAA,GAAA,MAAA,GACA,GAAA,EACA,GAAA,QAGA,EAAA,EAAA,EAAA,GAEA,GAEA,aAAA,WACA,MAAA,MAAA,YAEA,YAAA,SAAA,GAKA,KAAA,WAAA,KAAA,GACA,IAAA,KAAA,WAAA,QACA,KAAA,sBAGA,mBAAA,aAEA,qBAAA,SAAA,GACA,GAAA,GACA,EAAA,KAAA,WAAA,MACA,IAAA,IAAA,EACA,EAAA,KAAA,WAAA,OAGA,KADA,GAAA,GAAA,EACA,KACA,GAAA,KAAA,WAAA,GAAA,MAAA,OAAA,GAAA,CACA,EAAA,KAAA,WAAA,EACA,OAMA,MAAA,IAEA,eAAA,SAAA,GACA,GAAA,GAAA,EAAA,QAAA,KAAA,WAAA,EAEA,MAAA,WAAA,OAAA,EAAA,GACA,IAAA,KAAA,WAAA,QACA,KAAA,uBAGA,oBAAA,aAEA,uBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,0BAGA,oBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,uBAGA,uBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,0BAGA,0BAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,6BAGA,qBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,wBAGA,wBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,2BAGA,sBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,yBAGA,2BAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,8BAGA,aAAA,SAAA,GAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,aAAA,IAGA,oBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,uBAGA,iBAAA,SAAA,EAAA,GAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,iBAAA,EAAA,IAGA,eAAA,SAAA,EAAA,GAEA,IADA,GAAA,GAAA,KAAA,WAAA,OACA,KACA,KAAA,WAAA,GAAA,eAAA,EAAA,IAGA,mBAAA,SAAA,GACA,MAAA,MAAA,WAAA,mBAAA,IAEA,oBAAA,SAAA,GACA,MAAA,MAAA,WAAA,iBAAA,IAEA,mBAAA,SAAA,GACA,MAAA,MAAA,WAAA,iBAAA,IAEA,oBAAA,SAAA,GACA,MAAA,MAAA,WAAA,eAAA,IAEA,iCAAA,SAAA,GACA,MAAA,GAAA,UAAA,KAAA,WAAA,cAEA,iCAAA,SAAA,GACA,MAAA,GAAA,UAAA,KAAA,WAAA,eAEA,uBAAA,WAGA,IAFA,GAAA,GAAA,KACA,KACA,GACA,EAAA,KAAA,EAAA,WAAA,aAEA,EAAA,EAAA,SAAA,EAGA,KAAA,GADA,GAAA,GAAA,GACA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IACA,EAAA,eAAA,EAAA,GAEA,OAAA,IAEA,mBAAA,WACA,MAAA,IAAA,GAAA,KAAA,2BAEA,uBAAA,WACA,MAAA,MAAA,yBAAA,UAEA,mBAAA,SAAA,GAGA,IAFA,GAAA,GAAA,KACA,EAAA,EAAA,OACA,GACA,EAAA,WAAA,YAAA,gBAAA,GAEA,EAAA,EAAA,SAAA,EAEA,OAAA,IAEA,mBAAA,SAAA,GAGA,IAFA,GAAA,GAAA,KACA,KACA,GACA,EAAA,KAAA,EAAA,YAEA,EAAA,EAAA,SAAA,EAGA,KAAA,GADA,GAAA,EAAA,OACA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,aAAA,gBAAA,EAEA,OAAA,IAEA,oBAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,2BAEA,oBAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,2BAEA,oBAAA,SAAA,GAEA,MAAA,MAAA,QAAA,OAAA,KAAA,QAAA,GAAA,mBAAA,GAAA,GAEA,qBAAA,SAAA,GAEA,MAAA,MAAA,QAAA,OAAA,KAAA,QAAA,GAAA,oBAAA,GAAA,GAEA,oBAAA,SAAA,GAEA,MAAA,MAAA,QAAA,OAAA,KAAA,QAAA,GAAA,mBAAA,GAAA,GAEA,qBAAA,SAAA,GAEA,MAAA,MAAA,QAAA,OAAA,KAAA,QAAA,GAAA,oBAAA,GAAA,GAEA,gBAAA,WAEA,MAAA,MAAA,qBAAA,KAAA,cAEA,SAAA,SAAA,GACA,MAAA,MAAA,oBAAA,EAAA,oBAEA,SAAA,SAAA,GACA,MAAA,GAAA,oBAAA,KAAA,oBAEA,GAAA,YAAA,GACA,KAAA,cAAA,IAEA,GAAA,cACA,KAAA,IAAA,OAAA,mFAEA,GAAA,kBAAA,GACA,KAAA,oBAAA,IAEA,GAAA,oBACA,MAAA,MAAA,sBAEA,GAAA,iBAAA,GACA,KAAA,mBAAA,IAEA,GAAA,mBACA,MAAA,MAAA,qBAEA,GAAA,UAAA,GACA,KAAA,YAAA,IAEA,GAAA,YACA,MAAA,MAAA,eAEA,GAAA,iBAAA,GACA,KAAA,mBAAA,IAEA,GAAA,mBACA,MAAA,MAAA,sBAEA,GAAA,QAAA,GACA,KAAA,UAAA,IAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,WAAA,GACA,KAAA,aAAA,IAEA,GAAA,aACA,MAAA,MAAA,gBAEA,GAAA,WAAA,GACA,KAAA,aAAA,IAEA,GAAA,aACA,MAAA,MAAA,gBAEA,GAAA,SAAA,GACA,KAAA,WAAA,IAEA,GAAA,WACA,MAAA,MAAA,aAEA,GAAA,SAAA,GACA,KAAA,WAAA,IAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,UAAA,GACA,KAAA,YAAA,IAEA,GAAA,YACA,MAAA,MAAA,cAEA,GAAA,WAAA,GACA,KAAA,aAAA,IAEA,GAAA,aACA,MAAA,MAAA,gBAEA,GAAA,QAAA,GACA,KAAA,UAAA,IAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,aAAA,GACA,KAAA,eAAA,IAEA,GAAA,eACA,MAAA,MAAA,kBAEA,GAAA,UAAA,GACA,KAAA,YAAA,IAEA,GAAA,YACA,MAAA,MAAA,eAEA,GAAA,GAAA,GACA,KAAA,KAAA,IAEA,GAAA,KACA,MAAA,MAAA,QAEA,GAAA,GAAA,GACA,KAAA,KAAA,IAEA,GAAA,KACA,MAAA,MAAA,QAEA,GAAA,MAAA,GACA,KAAA,QAAA,IAEA,GAAA,QACA,MAAA,MAAA,WAEA,GAAA,OAAA,GACA,KAAA,SAAA,IAEA,GAAA,SACA,MAAA,MAAA,YAEA,GAAA,KAAA,GACA,KAAA,OAAA,IAEA,GAAA,OACA,MAAA,MAAA,UAEA,GAAA,QAAA,GACA,KAAA,UAAA,IAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,QAAA,GACA,KAAA,UAAA,IAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,SAAA,GACA,KAAA,WAAA,IAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,SAAA,GACA,KAAA,WAAA,IAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,UAAA,GACA,KAAA,YAAA,IAEA,GAAA,YACA,MAAA,MAAA,eAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,SACA,MAAA,MAAA,YAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,cACA,MAAA,MAAA,iBAEA,GAAA,eACA,MAAA,MAAA,kBAEA,GAAA,gBACA,MAAA,MAAA,mBAEA,GAAA,iBACA,MAAA,MAAA,oBAEA,GAAA,MACA,MAAA,MAAA,SAEA,GAAA,aACA,MAAA,MAAA,gBAEA,OAAA,SAAA,GACA,IAAA,EACA,MAAA,KAEA,IAAA,GAAA,IAWA,OAVA,GAAA,KAAA,KAAA,aAAA,SAAA,GACA,GAAA,SAAA,EAAA,GAAA,CACA,GAAA,GAAA,OAAA,yBAAA,EAAA,UAAA,EACA,IAAA,kBAAA,GAAA,MACA,EAAA,GAAA,EAAA,IAEA,EAAA,GAAA,EAAA,MAIA,MAEA,SAAA,SAAA,EAAA,GACA,EAAA,GAAA,EACA,IAAA,GAAA,KAAA,cAAA,EAAA,KAAA,SAAA,GAAA,EAAA,EACA,OAAA,GAAA,KAAA,oBAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAEA,oBAAA,SAAA,GACA,MAAA,sBAAA,EAAA,OAEA,cAAA,SAAA,EAAA,GAGA,QAAA,GAAA,EAAA,EAAA,GACA,IACA,GAAA,OAKA,GAHA,GAAA,gBAAA,GAGA,EAAA,EAAA,KAAA,EAFA,EAAA,EAAA,MAAA,EAAA,IANA,GAAA,GAAA,EAWA,IAAA,KAAA,UAAA,QAAA,EAAA,CACA,GAAA,GAAA,EACA,GAAA,KAAA,KAAA,UAAA,SAAA,GACA,IACA,GAAA,OAEA,GAAA,EAAA,SAAA,EAAA,QAEA,EAAA,WAAA,MAAA,EAAA,KAAA,EAAA,KAAA,GAcA,GAZA,KAAA,QACA,EAAA,SAAA,KAAA,QAEA,KAAA,SACA,EAAA,UAAA,KAAA,SAEA,KAAA,UACA,EAAA,WAAA,KAAA,UAEA,IAAA,KAAA,SACA,EAAA,UAAA,KAAA,UAEA,KAAA,UAAA,aAAA,CACA,GAAA,GAAA,KAAA,UAAA,WACA,GAAA,SAAA,oBAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,MAAA,GAaA,MAXA,MAAA,WACA,EAAA,WAAA,KAAA,SAAA,MACA,KAAA,iBAGA,KAAA,mBACA,EAAA,oBAAA,GAEA,KAAA,kBACA,EAAA,mBAAA,GAEA,IAGA,EAAA,UAAA,cACA,WACA,SACA,UACA,WACA,UACA,SACA,cACA,IACA,IACA,WACA,QACA,OACA,QACA,MACA,SACA,SACA,UACA,UACA,WACA,kBACA,aACA,mBACA,kBACA,YACA,aAEA,EAAA,UAAA,uBACA,EAAA,UAAA,cAAA,EACA,EAAA,GACA,IC3jDA,EAAA,sBAAA,UAAA,cAAA,iBAAA,kBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,kBACA,GAAA,sBACA,EAAA,MAAA,QAAA,GAAA,GAIA,GAAA,YAAA,GAAA,CACA,GAAA,GAAA,CAKA,OAJA,MAAA,MAAA,EAAA,MAAA,MAAA,GACA,KAAA,OAAA,EAAA,OACA,KAAA,SAAA,EAAA,SACA,KAAA,QAAA,EAAA,QAAA,MAAA,GACA,OAEA,KAAA,SACA,KAAA,OAAA,EACA,KAAA,SAAA,GACA,KAAA,UACA,IAAA,GAAA,IACA,IAAA,EACA,GAAA,YAAA,GAAA,KAAA,CACA,GAAA,GAAA,CACA,GAAA,cAAA,OAGA,KAAA,GADA,GAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,cAAA,EAAA,IAMA,IAAA,GAAA,EAAA,KA8VA,OA7VA,GAAA,WACA,YAAA,EACA,KAAA,WACA,MAAA,IAAA,GAAA,OAEA,UAAA,WACA,MAAA,MAAA,WAAA,aAEA,UAAA,WAEA,IADA,GAAA,GAAA,KAAA,MAAA,OACA,KACA,IAAA,KAAA,MAAA,GAAA,YACA,OAAA,CAGA,QAAA,GAEA,WAAA,WAGA,IAFA,GAAA,GAAA,EACA,EAAA,KAAA,MAAA,OACA,KACA,GAAA,KAAA,MAAA,GAAA,YAEA,OAAA,IAEA,IAAA,SAAA,GACA,MAAA,IAAA,EACA,KAAA,MAAA,GAEA,KAAA,MAAA,KAAA,MAAA,OAAA,IAGA,MAAA,SAAA,EAAA,GACA,MAAA,IAAA,GAAA,KAAA,MAAA,MAAA,EAAA,KAEA,WAAA,SAAA,EAAA,GACA,MAAA,MAAA,MAAA,EAAA,EAAA,QAAA,KAAA,MAAA,IAAA,EAAA,EAAA,KAEA,QAAA,WACA,MAAA,KAAA,KAAA,MAAA,QAEA,YAAA,WACA,MAAA,MAAA,WAAA,qBAAA,OAEA,UAAA,WAIA,IAAA,GAHA,GAAA,GAAA,GACA,EAAA,KAAA,MACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,eAAA,EAAA,GAAA,WAAA,YAEA,OAAA,IAEA,gBAAA,WAIA,IAAA,GAHA,GAAA,GAAA,GACA,EAAA,KAAA,MACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,eAAA,EAAA,GAAA,WAAA,YAEA,OAAA,IAEA,aAAA,WACA,MAAA,IAAA,GAAA,KAAA,cAEA,mBAAA,WACA,MAAA,IAAA,GAAA,KAAA,oBAEA,YAAA,SAAA,EAAA,GAGA,GAAA,KAAA,MAAA,OAAA,CACA,GAAA,GAAA,KAAA,MAAA,EACA,MAAA,QAAA,QAAA,SAAA,EAAA,EAAA,QAAA,EAAA,UAAA,GAAA,GAKA,MAHA,MAAA,MAAA,QAAA,GACA,KAAA,SACA,KAAA,SAAA,KAAA,SAAA,EAAA,IAAA,IAAA,KAAA,SAAA,EAAA,IAAA,GACA,MAEA,eAAA,WASA,MANA,MAAA,MAAA,QACA,KAAA,QAAA,QACA,KAAA,QAAA,QAEA,KAAA,SACA,KAAA,iBACA,MAEA,cAAA,SAAA,EAAA,GAGA,GAAA,KAAA,MAAA,OAAA,CACA,GAAA,GAAA,KAAA,UACA,MAAA,QAAA,KAAA,SAAA,EAAA,EAAA,QAAA,EAAA,UAAA,GAAA,GAKA,MAHA,MAAA,MAAA,KAAA,GACA,KAAA,SACA,KAAA,SAAA,KAAA,SAAA,KAAA,SAAA,IAAA,EAAA,IAAA,EAAA,IAAA,GACA,MAEA,iBAAA,WASA,MANA,MAAA,MAAA,MACA,KAAA,QAAA,QACA,KAAA,QAAA,MAEA,KAAA,SACA,KAAA,iBACA,MAEA,QAAA,WAEA,IAAA,GADA,GAAA,KAAA,OACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,KAAA,QAAA,EAAA,GACA,EAAA,KAAA,MAAA,EAAA,EACA,GAAA,UAAA,KAAA,KAAA,MAAA,KACA,KAAA,QAAA,EAAA,GAAA,EAAA,QAAA,EAAA,UAAA,KAAA,MAAA,OAIA,aAAA,WAKA,MAAA,OAEA,WAAA,WAKA,MAAA,OAEA,gBAAA,WACA,IAAA,GAAA,GAAA,EAAA,EAAA,KAAA,OAAA,IAAA,CACA,GAAA,GAAA,KAAA,QAAA,EAAA,EACA,IAAA,KAAA,MAAA,EAAA,GAAA,UAAA,KAAA,KAAA,MAAA,GACA,OAAA,EAGA,OAAA,GAEA,OAAA,SAAA,GACA,GAAA,KAAA,SAAA,EAAA,OACA,OAAA,CAEA,KAAA,GAAA,GAAA,EAAA,EAAA,KAAA,MAAA,OAAA,IACA,GAAA,KAAA,MAAA,KAAA,EAAA,MAAA,GACA,OAAA,CAGA,QAAA,GAEA,SAAA,SAAA,GACA,CAAA,EAAA,QAAA,KAAA,MAAA,GAEA,MAAA,MAAA,MAAA,EAAA,EAAA,QAAA,KAAA,MAAA,GAAA,IAEA,cAAA,SAAA,EAAA,GAGA,GAAA,KAAA,QAAA,EAAA,QAAA,EAAA,EAAA,GACA,OAAA,CAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,MAAA,OAAA,IACA,GAAA,KAAA,MAAA,KAAA,EAAA,MAAA,GACA,OAAA,CAGA,QAAA,GAEA,YAAA,SAAA,GACA,MAAA,MAAA,MAAA,KAAA,OAAA,EAAA,IAEA,SAAA,WACA,MAAA,MAAA,YAAA,IAEA,SAAA,WACA,MAAA,MAAA,MAAA,IAEA,SAAA,WACA,GAAA,KAAA,MAAA,QAAA,EACA,MAAA,KAEA,IAAA,GAAA,KAAA,YAAA,GACA,EAAA,KAAA,YAAA,GACA,EAAA,EAAA,QAAA,EAAA,UAAA,GAEA,EAAA,KAAA,MAAA,MAAA,EAAA,KAAA,MAAA,OAAA,EACA,IAAA,IAAA,EACA,MAAA,IAAA,GAAA,EAGA,KADA,EAAA,KAAA,EAAA,UAAA,EAAA,IACA,IAAA,EAAA,EAAA,OAAA,GAAA,UAAA,QAAA,CACA,GAAA,GAAA,EAAA,EAAA,OAAA,EACA,GAAA,KAAA,EAAA,UAAA,EAAA,UAAA,OAAA,IAEA,MAAA,IAAA,GAAA,IAGA,gBAAA,WAEA,IADA,GAAA,GAAA,KAAA,WACA,IAAA,EAAA,aACA,EAAA,EAAA,UAEA,OAAA,IAEA,KAAA,WACA,GAAA,GAAA,KAAA,MAAA,MAAA,GACA,EAAA,KAAA,YAAA,EACA,IAAA,EAAA,UAAA,OAAA,EAEA,MADA,GAAA,KAAA,EAAA,UAAA,IACA,GAAA,GAAA,EAGA,KADA,GAAA,GAAA,KAAA,MAAA,OAAA,EACA,EAAA,GAAA,CACA,GAAA,GAAA,KAAA,MAAA,GACA,EAAA,KAAA,MAAA,EAAA,EACA,GAAA,KACA,IAAA,GAAA,EAAA,QAAA,EAAA,UAAA,EACA,IAAA,IAAA,EAAA,UAAA,OAAA,EAEA,MADA,GAAA,KAAA,EAAA,UAAA,EAAA,IACA,GAAA,GAAA,EAEA,KAGA,MAAA,OAGA,YAAA,WAEA,IADA,GAAA,GAAA,KAAA,OACA,IAAA,EAAA,aACA,EAAA,EAAA,MAEA,OAAA,IAEA,eAAA,SAAA,GACA,GAAA,GAAA,aAAA,MAAA,GAAA,iBAAA,GAAA,GAAA,aAAA,MAAA,GAAA,IAEA,QAAA,SAAA,GAOA,IAAA,GADA,GAAA,KAAA,IAAA,KAAA,QAAA,OAAA,EAAA,QAAA,QACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,KAAA,QAAA,KAAA,EAAA,QAAA,GACA,MAAA,MAAA,QAAA,GAAA,EAAA,QAAA,GACA,GAEA,CAIA,OAAA,MAAA,MAAA,OAAA,EAAA,MAAA,OACA,GACA,KAAA,MAAA,OAAA,EAAA,MAAA,OACA,EAEA,GAGA,SAAA,SAAA,GACA,MAAA,KAAA,KAAA,QAAA,IAEA,QAAA,SAAA,GACA,MAAA,KAAA,KAAA,QAAA,IAEA,mBAAA,SAAA,GACA,MAAA,MAAA,YAAA,aAAA,IAEA,oBAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,cAEA,mBAAA,SAAA,GACA,MAAA,MAAA,eAAA,iBAAA,IAEA,oBAAA,SAAA,GACA,MAAA,MAAA,eAAA,eAAA,IAEA,oBAAA,SAAA,GACA,MAAA,MAAA,kBAAA,aAAA,IAEA,qBAAA,SAAA,GACA,MAAA,GAAA,YAAA,KAAA,oBAEA,oBAAA,SAAA,GACA,MAAA,MAAA,qBAAA,iBAAA,IAEA,qBAAA,SAAA,GACA,MAAA,MAAA,qBAAA,eAAA,IAEA,eAAA,WACA,GAAA,GAAA,GACA,EAAA,KAAA,MAAA,MACA,GAAA,IACA,GAAA,KAAA,MAAA,GAAA,IAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IACA,GAAA,IAAA,KAAA,MAAA,GAAA,GAEA,MAAA,SAAA,GAEA,YAAA,WAMA,MAAA,MAAA,UAEA,SAAA,WAEA,MADA,MAAA,UACA,KAAA,OAGA,UAAA,KAAA,QAAA,KAAA,KAAA,IAAA,KAAA,cAAA,IAFA,gBAKA,EAAA,wBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,iBAAA,EAAA,EAAA,SAAA,GACA,GAAA,EAAA,aACA,EAAA,IAEA,EAAA,IAEA,EAAA,iBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,GAAA,GAAA,aAAA,EAAA,QAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,IAAA,GACA,EAAA,EAAA,GAAA,GAAA,aAAA,EAAA,QAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,IAAA,EACA,KACA,EAAA,iBACA,EAAA,kBACA,IAAA,EAAA,cAAA,KAIA,EAAA,gBAAA,EAAA,SAAA,GACA,EAAA,UACA,EAAA,EAAA,SAEA,IAEA,IClYA,EAAA,gCAAA,UAAA,kBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,sBACA,EAAA,eAAA,SAAA,GACA,GAAA,GAAA,IACA,MAAA,QAAA,EAAA,QAAA,YAAA,GAAA,GACA,KAAA,QAAA,EACA,KAAA,kBAAA,KACA,KAAA,UAAA,KACA,KAAA,QAAA,KACA,KAAA,cACA,GAAA,SAAA,GAEA,EAAA,QAAA,SAAA,EAAA,SAAA,SAAA,EAAA,QAAA,aACA,EAAA,SAAA,IAGA,OAAA,SAAA,GAEA,EAAA,SAAA,KAIA,IAAA,GAAA,EAAA,cA2CA,OA1CA,GAAA,WACA,YAAA,EACA,WAAA,SAAA,GACA,KAAA,QAGA,EAAA,QAAA,SAAA,EAAA,SAAA,SAAA,KAAA,QAAA,cAGA,EAAA,QAAA,iBAAA,KAAA,cACA,KAAA,QAAA,EACA,KAAA,kBAAA,EAAA,cACA,KAAA,UAAA,EAAA,MAAA,WAAA,EAAA,eAAA,GACA,KAAA,QAAA,EAAA,QACA,KAAA,QAAA,MACA,KAAA,QAAA,KAAA,EAAA,KAAA,aAGA,SAAA,SAAA,GACA,KAAA,QAAA,EACA,KAAA,QAAA,oBAAA,KAAA,aACA,IAAA,GAAA,EAAA,aAEA,IADA,EAAA,cAAA,KAAA,kBACA,KAAA,QAAA,UAAA,KAAA,QAAA,UAAA,CACA,KAAA,UAAA,UACA,IAAA,GAAA,EAAA,MACA,EAAA,EAAA,cAAA,KAAA,WAAA,EACA,IAAA,KAAA,QAAA,SACA,KAAA,QAAA,SAAA,EAAA,KAAA,YACA,GAAA,KAAA,QAAA,WACA,KAAA,QAAA,UAAA,EAAA,KAAA,WAGA,KAAA,QAAA,IACA,KAAA,QAAA,GAAA,EAAA,KAAA,WAEA,EAAA,cAAA,GAEA,KAAA,SAAA,GACA,KAAA,WAAA,KAGA,ICnEA,EAAA,gCAAA,UAAA,kBAAA,qBAAA,oBAAA,gCAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,qBACA,IAAA,GAAA,EAAA,qBACA,EAAA,EAAA,+BACA,GAAA,eAAA,SAAA,GACA,KAAA,YAAA,KACA,KAAA,WAAA,EACA,KAAA,eAAA,CACA,IAAA,GAAA,IACA,GAAA,KAAA,MACA,YAAA,EAAA,aAAA,EACA,KAAA,SAAA,GACA,EAAA,eAAA,EAAA,SAEA,GAAA,SAAA,GACA,EAAA,eAAA,EAAA,EAAA,WAAA,EAAA,OAAA,SAIA,IAAA,GAAA,EAAA,cA6CA,OA5CA,GAAA,EAAA,GACA,eAAA,SAAA,EAAA,GACA,GAAA,IAAA,KAAA,YAAA,CACA,GAAA,GAAA,KAAA,WACA,MAAA,YAAA,EACA,KAAA,eAAA,IACA,KAAA,eAAA,GAAA,EAAA,GAEA,KAAA,eAAA,MAAA,KAAA,WAAA,IAAA,KAAA,eAAA,WAAA,SAAA,EAAA,SAAA,IACA,KAAA,eAAA,KAAA,KAIA,MAAA,SAAA,GACA,KAAA,aACA,IAAA,KAAA,YACA,KAAA,eAAA,EAAA,KAAA,OAAA,OAAA,SAGA,KAAA,SAAA,GAEA,KAAA,aACA,IAAA,KAAA,YACA,KAAA,eAAA,EAAA,KAAA,OAAA,MAAA,SAIA,EAAA,cAAA,GAAA,IACA,GAAA,SAAA,EAAA,GACA,QAAA,IAAA,8BAAA,IAEA,KAAA,SAAA,EAAA,GACA,QAAA,IAAA,gCAAA,IAEA,KAAA,SAAA,EAAA,GACA,QAAA,IAAA,gCAAA,IAEA,IAAA,SAAA,EAAA,GACA,QAAA,IAAA,+BAAA,IAEA,KAAA,WACA,QAAA,IAAA,0BAGA,IClEA,EAAA,uBAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,MAAA,SAAA,GAEA,KAAA,SAAA,EACA,KAAA,SAAA,EACA,KAAA,MAAA,EAAA,MACA,KAAA,KAAA,EAAA,KACA,KAAA,QAAA,EAAA,QACA,KAAA,SAAA,EAAA,SACA,KAAA,cAAA,EAAA,cACA,KAAA,OAAA,EAAA,OAEA,IAAA,GAAA,EAAA,KAWA,OAVA,GAAA,WACA,YAAA,EACA,OAAA,WACA,KAAA,SAAA,GAEA,MAAA,WACA,KAAA,SAAA,EACA,KAAA,SAAA,IAGA,ICzBA,EAAA,yBAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,QAAA,WACA,KAAA,aAGA,IAAA,GAAA,EAAA,OAaA,OAZA,GAAA,WACA,YAAA,EACA,iBAAA,SAAA,GAEA,KAAA,UAAA,KAAA,IAEA,oBAAA,SAAA,GACA,GAAA,GAAA,EAAA,QAAA,KAAA,UAAA,EAEA,MAAA,UAAA,OAAA,EAAA,KAGA,ICpBA,EAAA,uBAAA,UAAA,oBAAA,kBAAA,yBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,wBACA,GAAA,MAAA,WACA,EAAA,KAAA,MACA,KAAA,MAAA,KACA,KAAA,UAAA,EACA,KAAA,YAAA,EACA,KAAA,WAAA,EACA,KAAA,SAAA,EACA,KAAA,MAAA,KACA,KAAA,KAAA,QAEA,IAAA,GAAA,EAAA,KA2CA,OA1CA,GAAA,EAAA,GACA,KAAA,SAAA,EAAA,GAEA,OADA,KAAA,MAAA,EACA,EAAA,QACA,IAAA,GACA,KAAA,UAAA,CACA,MACA,KAAA,GACA,KAAA,YAAA,CACA,MACA,KAAA,GACA,KAAA,WAAA,IAIA,GAAA,SAAA,EAAA,GAEA,OADA,KAAA,MAAA,EACA,EAAA,QACA,IAAA,GACA,KAAA,UAAA,CACA,MACA,KAAA,GACA,KAAA,YAAA,CACA,MACA,KAAA,GACA,KAAA,WAAA,IAIA,KAAA,SAAA,GACA,KAAA,MAAA,GAEA,KAAA,SAAA,GACA,KAAA,MAAA,GAEA,IAAA,WACA,KAAA,MAAA,MAEA,SAAA,WACA,MAAA,WAGA,IC1DA,EAAA,uBAAA,UAAA,oBAAA,kBAAA,yBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,wBACA,GAAA,MAAA,SAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,GAAA,EACA,KAAA,MAAA,EACA,KAAA,SAAA,EACA,KAAA,MAAA,KACA,KAAA,KAAA,QAEA,IAAA,GAAA,EAAA,KAeA,OAdA,GAAA,EAAA,GACA,KAAA,SAAA,GACA,KAAA,MAAA,GAEA,IAAA,SAAA,GACA,KAAA,MAAA,GAEA,OAAA,SAAA,GACA,KAAA,MAAA,GAEA,SAAA,WACA,MAAA,SAAA,KAAA,MAGA,IC5BA,EAAA,qBAAA,UAAA,oBAAA,kBAAA,yBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,wBACA,GAAA,IAAA,SAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,GAAA,EACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,KACA,KAAA,KAAA,MAEA,IAAA,GAAA,EAAA,GAeA,OAdA,GAAA,EAAA,GACA,KAAA,SAAA,GACA,KAAA,MAAA,GAEA,IAAA,SAAA,GACA,KAAA,MAAA,GAEA,OAAA,SAAA,GACA,KAAA,MAAA,GAEA,SAAA,WACA,MAAA,OAAA,KAAA,MAGA,IC5BA,EAAA,qBAAA,UAAA,oBAAA,kBAAA,yBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,wBACA,GAAA,IAAA,SAAA,GACA,EAAA,KAAA,MACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,KACA,KAAA,KAAA,MAEA,IAAA,GAAA,EAAA,GAEA,OADA,GAAA,EAAA,MACA,ICdA,EAAA,uBAAA,UAAA,kBAAA,qBAAA,sBAAA,sBAAA,oBAAA,oBAAA,uBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,sBACA,EAAA,uBACA,EAAA,uBACA,EAAA,qBACA,EAAA,qBACA,EAAA,uBACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,eAAA,EACA,KAAA,eAAA,EACA,KAAA,oBACA,KAAA,MAAA,GAAA,GAAA,MACA,KAAA,UAAA,KAAA,OACA,KAAA,sBACA,KAAA,YACA,KAAA,WAAA,EAEA,IAAA,GAAA,EAAA,KAoiBA,OAniBA,GAAA,WACA,YAAA,EACA,WAAA,SAAA,GACA,KAAA,SAAA,KAAA,IAEA,cAAA,SAAA,GACA,IAAA,GAAA,GAAA,KAAA,SAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,SAAA,KAAA,GACA,KAAA,SAAA,OAAA,EAAA,IAIA,cAAA,SAAA,GAEA,IADA,GAAA,GAAA,KAAA,SAAA,OACA,KAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,IAAA,EAAA,KAAA,EACA,MAAA,GAGA,MAAA,SAEA,eAAA,SAAA,GAEA,GAAA,GAAA,EAAA,KAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,UAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAEA,OAAA,IAEA,UAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,aAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,MAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,MAAA,IAEA,QAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,WAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,MAAA,GAAA,EAAA,GACA,KAAA,QAAA,KAAA,MAAA,IAEA,iBAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,oBAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,iBAAA,KAAA,MAAA,IAEA,UAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,aAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,MAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,MAAA,IAEA,UAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,aAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,MAAA,KAAA,EAAA,IAEA,SAAA,SAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,YAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,MAEA,KAAA,MAAA,IAAA,EAAA,IAEA,QAAA,SAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,WAAA,EAAA,kBAAA,GAAA,KAEA;GAAA,GAAA,GAAA,GAAA,IAAA,EACA,MAAA,WAAA,EACA,IAAA,GAAA,KAAA,MAAA,2BACA,MAAA,cAAA,EAAA,UAAA,EAAA,GAAA,IAEA,MAAA,SAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,SAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,eAAA,EACA,IAAA,EAAA,CACA,KAAA,cAAA,EACA,IAAA,GAAA,KAAA,MAAA,2BACA,MAAA,cAAA,EAAA,QAAA,EAAA,GAAA,KAGA,SAAA,SAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,YAAA,EAAA,kBAAA,GAAA,OAGA,WAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,eAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,GAAA,GAAA,MAAA,EAAA,EAAA,EACA,MAAA,WAAA,GACA,KAAA,UAAA,EAAA,IAEA,SAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,aAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,IAAA,EAAA,GACA,KAAA,cAAA,GACA,KAAA,QAAA,EAAA,KAKA,kBAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,sBAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,IACA,KAAA,iBAAA,EAAA,IAKA,UAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,cAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,KAAA,EAAA,GACA,KAAA,UAAA,EAAA,KAKA,YAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,gBAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,OAAA,EAAA,GACA,KAAA,cAAA,GACA,KAAA,YAAA,EAAA,KAKA,SAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,aAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,GAAA,GAAA,IAAA,EAAA,EAAA,EACA,MAAA,WAAA,GACA,KAAA,UAAA,EAAA,IAEA,OAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,WAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,IAAA,EAAA,GACA,KAAA,cAAA,GACA,KAAA,QAAA,EAAA,KAKA,gBAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,oBAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,IACA,KAAA,iBAAA,EAAA,IAKA,QAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,YAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,KAAA,EAAA,GACA,KAAA,UAAA,EAAA,KAKA,UAAA,SAAA,EAAA,EAAA,GACA,KAAA,WACA,KAAA,SAAA,KAAA,cAAA,EAAA,KAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,kBAAA,GAAA,KAEA,IAAA,GAAA,KAAA,cAAA,EACA,KACA,EAAA,OAAA,EAAA,GACA,KAAA,cAAA,GACA,KAAA,YAAA,EAAA,KAKA,YAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,QACA,KAAA,UAAA,EAAA,EACA,MACA,KAAA,QACA,KAAA,WAAA,EAAA,EAAA,EACA,MACA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,EACA,MACA,SACA,QAAA,KACA,QAAA,IAAA,yBAAA,KAIA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,QACA,KAAA,QAAA,EAAA,EACA,MACA,KAAA,QACA,KAAA,SAAA,EAAA,EAAA,EACA,MACA,KAAA,MACA,KAAA,OAAA,EAAA,EAAA,EACA,MACA,SACA,QAAA,KACA,QAAA,IAAA,yBAAA,KAIA,mBAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,QACA,KAAA,iBAAA,EAAA,EACA,MACA,KAAA,QACA,KAAA,kBAAA,EAAA,EAAA,EACA,MACA,KAAA,MACA,KAAA,gBAAA,EAAA,EAAA,EACA,MACA,SACA,QAAA,KACA,QAAA,IAAA,yBAAA,KAIA,cAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,QACA,SAAA,QAAA,KACA,QAAA,IAAA,6CAEA,MACA,KAAA,QACA,KAAA,YAAA,EAAA,EAAA,EACA,MACA,KAAA,MACA,KAAA,UAAA,EAAA,EAAA,EACA,MACA,SACA,QAAA,KACA,QAAA,IAAA,yBAAA,KAIA,YAAA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,QACA,KAAA,UAAA,EAAA,EACA,MACA,KAAA,QACA,KAAA,UAAA,EAAA,EAAA,EACA,MACA,KAAA,MACA,KAAA,QAAA,EAAA,EAAA,EACA,MACA,SACA,QAAA,KACA,QAAA,IAAA,yBAAA,KAIA,YAAA,aAEA,WAAA,aAEA,aAAA,aAEA,aAAA,aAEA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,kBAAA,IAAA,GAAA,GAAA,MAAA,KAAA,MACA,MAAA,cAAA,EAAA,KAAA,EAAA,GAAA,GACA,EAAA,SACA,KAAA,WAAA,EAAA,EAAA,EAAA,GAAA,GAEA,EAAA,MAAA,GAEA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,kBAAA,IAAA,GAAA,GAAA,MAAA,KAAA,MACA,MAAA,cAAA,EAAA,cAAA,EAAA,GAAA,IAEA,UAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,kBAAA,IAAA,GAAA,GAAA,MAAA,KAAA,MACA,GAAA,SACA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,GAEA,KAAA,cAAA,EAAA,OAAA,EAAA,GAAA,GACA,EAAA,MAAA,GAEA,UAAA,SAAA,EAAA,GACA,KAAA,mBAAA,EAAA,GAAA,IAEA,YAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,kBAAA,IAAA,GAAA,GAAA,MAAA,KAAA,MACA,MAAA,cAAA,EAAA,SAAA,EAAA,GAAA,GACA,EAAA,SACA,KAAA,WAAA,EAAA,EAAA,EAAA,GAAA,GAEA,EAAA,MAAA,GAEA,mBAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KAAA,MAAA,kBAAA,IAAA,GAAA,GAAA,MAAA,KAAA,OACA,EAAA,EAAA,OAAA,GAAA,GAAA,MAAA,KAAA,OACA,EAAA,EAAA,aAAA,EAAA,UACA,IAAA,GAAA,EAAA,CAGA,GAAA,EACA,KAAA,EAAA,EAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,SACA,EAAA,MAAA,KAAA,EAAA,MAAA,GADA,KAKA,GACA,KAAA,cAAA,EAAA,OAAA,EAAA,GAAA,GAEA,KAAA,WAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,YAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,MAAA,IAEA,YAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,OAAA,EACA,IAAA,GAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IACA,KAAA,cAAA,EAAA,MAAA,EAAA,EAAA,GAAA,QAAA,EAAA,GAAA,EAGA,IACA,KAAA,cAAA,EAAA,OAAA,EAAA,GAAA,IAGA,WAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAIA,GAHA,GACA,KAAA,cAAA,EAAA,MAAA,EAAA,GAAA,GAEA,EAAA,OAAA,EACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IACA,KAAA,cAAA,EAAA,MAAA,EAAA,EAAA,GAAA,OAAA,EAAA,GAAA,IAIA,iBAAA,WAGA,IAFA,GAAA,GAAA,KACA,EAAA,KAAA,SAAA,OACA,KAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,GAAA,OACA,EAAA,mBAAA,EAAA,MAAA,KAIA,cAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EACA,IACA,KAAA,IAAA,OAAA,iCACA,MAAA,GAEA,KADA,SAAA,IAAA,EAAA,OACA,EAGA,GAAA,GAAA,GAAA,GAAA,OACA,MAAA,EACA,KAAA,EACA,QAAA,EACA,SAAA,EACA,cAAA,KACA,OAAA,EAAA,YAEA,MAAA,kBAAA,EAAA,EAAA,GACA,KAAA,kBAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,WAAA,cAAA,EAAA,OAAA,GAAA,EAAA,gBACA,EAAA,kBAGA,kBAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,UAAA,EAAA,QAKA,IAAA,GAFA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,UAAA,MAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GACA,GAAA,CASA,KARA,GAAA,EAAA,KACA,EAAA,GAAA,GACA,EAAA,EAAA,UAEA,GAAA,EAAA,KACA,EAAA,GAAA,GACA,EAAA,EAAA,SAEA,EACA,SAIA,kBAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,UAAA,EAAA,QAIA,IAAA,GADA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,CACA,GAAA,GAAA,EAAA,MAAA,EACA,GAAA,cAAA,CAEA,KAAA,GADA,GAAA,EAAA,oBACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GACA,GAAA,CASA,KARA,GAAA,EAAA,KACA,EAAA,GAAA,GACA,EAAA,EAAA,UAEA,GAAA,EAAA,KACA,EAAA,GAAA,GACA,EAAA,EAAA,SAEA,EACA,OAGA,GAAA,EAAA,QACA,SAIA,YAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,YAAA,GAAA,UAAA,GAAA,aAAA,CACA,IAAA,KAAA,eAAA,CACA,GAAA,GAAA,SAAA,GAEA,GACA,EAAA,iBAEA,EAAA,iBAAA,KAAA,WACA,EAAA,mBACA,EAAA,WACA,EAAA,SAAA,KAAA,uBAEA,EAAA,KAGA,MAAA,eAAA,iBAAA,EAAA,EAAA,GACA,KAAA,mBAAA,MACA,KAAA,EACA,SAAA,EACA,WAAA,QAGA,MAAA,eAAA,iBAAA,EAAA,EAAA,GACA,KAAA,mBAAA,MACA,KAAA,EACA,SAAA,SAAA,GAEA,EAAA,mBACA,EAAA,WACA,EAAA,SAAA,KAAA,uBAEA,EAAA,IAEA,WAAA,KAIA,qBAAA,SAAA,EAAA,EAAA,GAEA,KAAA,eAAA,iBAAA,EAAA,EAAA,GACA,KAAA,mBAAA,MACA,KAAA,EACA,SAAA,SAAA,GAEA,EAAA,IAEA,WAAA,KAGA,iBAAA,WACA,GAAA,GAAA,IACA,GAAA,KAAA,KAAA,mBAAA,SAAA,GACA,EAAA,eAAA,oBAAA,EAAA,KAAA,EAAA,SAAA,EAAA,eAGA,kBAAA,WACA,GAAA,KAAA,iBAAA,OAAA,CAGA,IAAA,GADA,GAAA,KAAA,iBAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,iBAAA,IAEA,MAAA,iBAAA,OAAA,KAIA,EAAA,kBAAA,QAAA,GAAA,GACA,GAAA,KACA,KAAA,GAAA,KAAA,GACA,GAAA,EAAA,eAAA,GACA,GAAA,YAAA,GAAA,kBAAA,GAAA,mBAAA,EAAA,CAEA,IAAA,GADA,MACA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,GAAA,KAAA,EACA,GAAA,KAAA,EAAA,IAEA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,KAAA,SAEA,GAAA,KAAA,EAAA,KAAA,gBAAA,GAAA,IAAA,OAAA,EAAA,GAAA,KAAA,KAAA,UAAA,EAAA,KAIA,OAAA,IAAA,EAAA,KAAA,KAAA,KAEA,EAAA,iBAAA,SAAA,GACA,MAAA,OAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAEA,ICxjBA,EAAA,mCAAA,UAAA,cAAA,mBAAA,SAAA,GAEA,EAAA,cACA,IAAA,GAAA,EAAA,kBACA,GAAA,kBAAA,SAAA,GACA,GAAA,GAAA,IACA,MAAA,QAAA,EAAA,QACA,gBAAA,EACA,YAAA,GACA,GACA,KAAA,UAAA,EACA,KAAA,QAAA,KACA,KAAA,MAAA,KACA,KAAA,UAAA,KACA,KAAA,KAAA,KACA,KAAA,cAAA,KACA,KAAA,qBAAA,KACA,KAAA,YAAA,OACA,KAAA,mBACA,UAAA,SAAA,GACA,GAAA,EAAA,MAAA,cAAA,EAAA,OAAA,GAAA,CAGA,GAAA,GAAA,EAAA,MAAA,eAAA,YACA,EAAA,EAAA,UAAA,WACA,GAAA,KAAA,cAAA,EAAA,WAAA,YAAA,IACA,EAAA,UAAA,IAAA,MAGA,KAAA,cACA,GAAA,SAAA,GAEA,IAAA,EAAA,QAAA,SAAA,EAAA,SAAA,SAAA,EAAA,YAAA,CACA,GAAA,GAAA,EAAA,aACA,GAAA,cAAA,EAAA,KACA,EAAA,QAAA,GACA,EAAA,cAAA,IAGA,OAAA,SAAA,GAEA,GAAA,GAAA,EAAA,aACA,GAAA,cAAA,EAAA,KACA,EAAA,QAAA,GACA,EAAA,cAAA,EACA,EAAA,WACA,EAAA,KAAA,UAAA,EAAA,uBAGA,KAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UAAA,cAAA,EAAA,QAAA,MAAA,MAAA,EAAA,eACA,IAAA,EAAA,QAAA,UAAA,CACA,GAAA,GAAA,EAAA,KAAA,eAAA,YAAA,gBACA,GAAA,QAAA,WACA,MAAA,EACA,YAAA,EACA,SAAA,EAAA,KAAA,SAGA,GAAA,KAAA,UAAA,GAAA,EAGA,IADA,EAAA,cAAA,EAAA,QAAA,MACA,EAAA,QAAA,KAAA,CACA,GAAA,GAAA,EAAA,aACA,GAAA,cAAA,EAAA,KACA,EAAA,QAAA,KAAA,EAAA,EAAA,OACA,EAAA,cAAA,KAKA,IAAA,GAAA,EAAA,iBA2CA,OA1CA,GAAA,WACA,YAAA,EACA,UAAA,SAAA,GACA,EAAA,QAAA,UAAA,EACA,EAAA,QAAA,iBAAA,KAAA,cACA,KAAA,UAAA,EACA,KAAA,QAAA,EAAA,QACA,KAAA,MAAA,EAAA,MAAA,WAAA,EAAA,eAAA,GACA,KAAA,UAAA,KAAA,MAAA,eACA,KAAA,KAAA,EAAA,cACA,KAAA,cAAA,EAAA,QAAA,MACA,KAAA,qBAAA,EAAA,cAAA,YACA,KAAA,YAAA,EAAA,QAAA,QAAA,EAAA,SAAA,OAAA,OACA,KAAA,QAAA,OACA,KAAA,QAAA,MAAA,EAAA,KAAA,QAGA,QAAA,SAAA,GACA,KAAA,QAAA,UAAA,EACA,KAAA,QAAA,oBAAA,KAAA,cACA,KAAA,UAAA,EACA,KAAA,QAAA,KACA,KAAA,QAAA,IAAA,EAAA,KAAA,QAGA,UAAA,SAAA,GACA,EAAA,QAAA,SAAA,EAAA,UAAA,KAAA,QAAA,cAAA,EAAA,SAAA,QAAA,KAAA,KAAA,QAAA,aAGA,KAAA,UAAA,EAAA,QAAA,UACA,KAAA,UAAA,IAGA,KAAA,SAAA,GACA,KAAA,UAAA,IAEA,WAAA,SAAA,GACA,KAAA,QAAA,gBACA,KAAA,UAAA,KAIA,ICnHA,EAAA,wBAAA,UAAA,cAAA,iBAAA,kBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,kBACA,GAAA,qBACA,IAAA,GAAA,CACA,GAAA,MAAA,SAAA,GACA,KAAA,IAAA,IACA,KAAA,MAAA,EAAA,MACA,KAAA,MAAA,EAAA,MACA,KAAA,SAAA,EAAA,SACA,KAAA,yBAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,SACA,KAAA,eAAA,EAAA,eACA,KAAA,YAAA,EAAA,YACA,KAAA,SAAA,EAAA,SACA,KAAA,aAAA,EAAA,aAEA,KAAA,YAAA,EAAA,WACA,KAAA,iBAAA,EAAA,eACA,KAAA,eAAA,EAAA,aAEA,KAAA,UADA,KAAA,WAAA,KAAA,MACA,GAAA,GAAA,MAAA,KAAA,OAEA,KAAA,kBAAA,SAAA,KAAA,UAGA,KAAA,gBACA,KAAA,eAAA,CACA,IAAA,GAAA,IACA,MAAA,uBAAA,WACA,EAAA,gCAEA,KAAA,SAAA,iBAAA,aAAA,KAAA,wBACA,KAAA,SAAA,iBAAA,cAAA,KAAA,wBACA,KAAA,YAAA,KAAA,0BAAA,KAAA,aAEA,KAAA,kBAAA,GAAA,GACA,KAAA,UAAA,EAEA,IAAA,GAAA,EAAA,KAiFA,OAhFA,GAAA,WACA,YAAA,EACA,iBAAA,SAAA,GACA,KAAA,cAAA,EACA,KAAA,kBAAA,KAAA,cAAA,iBACA,KAAA,kBAAA,gBAEA,eAAA,SAAA,GACA,KAAA,YAAA,EACA,KAAA,gBAAA,KAAA,YAAA,qBACA,KAAA,gBAAA,gBAEA,SAAA,WACA,MAAA,MAAA,UAAA,KAAA,KAAA,kBAAA,KAAA,kBAAA,WAAA,KAAA,QAAA,KAAA,gBAAA,KAAA,gBAAA,WAAA,MAEA,MAAA,WACA,MAAA,MAAA,KAEA,GAAA,MACA,MAAA,MAAA,KAEA,eAAA,WACA,MAAA,MAAA,aAAA,MAAA,IAEA,qBAAA,WACA,MAAA,MAAA,aAAA,QAEA,OAAA,WACA,KAAA,IAAA,OAAA,+BAEA,0BAAA,WACA,KAAA,IAAA,OAAA,kDAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAMA,MAAA,aAAA,KAAA,GACA,EAAA,gBAEA,eAAA,SAAA,GACA,GAAA,EACA,KAAA,EAAA,EAAA,EAAA,KAAA,aAAA,SACA,KAAA,aAAA,GAAA,UACA,IAAA,KAAA,aAAA,GAAA,QAAA,EAAA,QAFA,KAOA,KAAA,aAAA,OAAA,EAAA,IAEA,QAAA,WACA,KAAA,cAAA,UACA,KAAA,YAAA,WAEA,cAAA,WACA,KAAA,IAAA,OAAA,sCAEA,aAAA,WACA,KAAA,IAAA,OAAA,qCAEA,eAAA,WACA,KAAA,IAAA,OAAA,uCAEA,QAAA,WAEA,KAAA,UAAA,EACA,KAAA,SAAA,oBAAA,aAAA,KAAA,wBACA,KAAA,SAAA,oBAAA,cAAA,KAAA,yBAEA,QAAA,WACA,KAAA,IAAA,OAAA,gCAEA,6BAAA,cAGA,EAAA,oBAAA,EACA,ICzHA,EAAA,qCAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,qBAAA,SAAA,EAAA,GACA,KAAA,OAAA,EACA,KAAA,QAAA,EACA,KAAA,cAGA,IAAA,GAAA,EAAA,oBAwFA,OAvFA,GAAA,WACA,YAAA,EACA,YAAA,WACA,KAAA,UAAA,OACA,KAAA,YAAA,OACA,KAAA,UAAA,OACA,KAAA,QAAA,OACA,KAAA,SAAA,OACA,KAAA,SAAA,OACA,KAAA,eAAA,OACA,KAAA,WAAA,OACA,KAAA,KAAA,OACA,KAAA,UAAA,QAEA,cAAA,SAAA,EAAA,GACA,KAAA,OAAA,MAAA,EACA,KAAA,OAAA,OAAA,EACA,KAAA,eAEA,aAAA,SAAA,GACA,KAAA,YAAA,IACA,KAAA,UAAA,EACA,KAAA,QAAA,UAAA,GAAA,EAAA,eAAA,EAAA,iBAAA,IAGA,eAAA,SAAA,GACA,KAAA,cAAA,IACA,KAAA,YAAA,EACA,KAAA,QAAA,YAAA,GAAA,EAAA,eAAA,EAAA,iBAAA,IAGA,aAAA,SAAA,GACA,KAAA,YAAA,IACA,KAAA,UAAA,EACA,KAAA,QAAA,UAAA,IAGA,WAAA,SAAA,GACA,KAAA,UAAA,IACA,KAAA,QAAA,EACA,KAAA,QAAA,QAAA,IAGA,YAAA,SAAA,GACA,KAAA,WAAA,IACA,KAAA,SAAA,EACA,KAAA,QAAA,SAAA,IAGA,YAAA,SAAA,GAEA,KAAA,WAAA,IACA,KAAA,SAAA,EACA,KAAA,QAAA,YACA,KAAA,QAAA,YAAA,OAAA,KAAA,GACA,SAAA,KAAA,QAAA,QACA,KAAA,QAAA,QAAA,EACA,SAAA,KAAA,QAAA,iBACA,KAAA,QAAA,eAAA,EAAA,QAKA,kBAAA,SAAA,GACA,KAAA,iBAAA,IACA,KAAA,eAAA,EACA,SAAA,KAAA,QAAA,eACA,KAAA,QAAA,eAAA,EACA,SAAA,KAAA,QAAA,uBACA,KAAA,QAAA,qBAAA,KAKA,QAAA,SAAA,GACA,KAAA,OAAA,IACA,KAAA,KAAA,EACA,KAAA,QAAA,KAAA,IAGA,aAAA,SAAA,GACA,KAAA,YAAA,IACA,KAAA,UAAA,EACA,KAAA,QAAA,UAAA,KAIA,ICjGA,EAAA,6BAAA,UAAA,kBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,sBACA,EAAA,aAAA,SAAA,EAAA,GAEA,KAAA,MAAA,EACA,KAAA,UAAA,GAGA,IAAA,GAAA,EAAA,YAsLA,OArLA,GAAA,WACA,YAAA,EACA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,MAAA,OAAA,KAAA,WAEA,UAAA,SAAA,GACA,KAAA,SAAA,EACA,KAAA,SAAA,GAEA,wBAAA,WACA,GAAA,GAAA,KAAA,SAAA,KAAA,MAAA,WAAA,KAAA,MAAA,MACA,OAAA,QAAA,EACA,KAEA,GAAA,GAAA,GAAA,KAAA,WAGA,uBAAA,WACA,MAAA,MAAA,SAAA,KAAA,KAAA,2BAEA,sBAAA,WACA,MAAA,MAAA,QAAA,KAAA,KAAA,2BAEA,cAAA,SAAA,GAEA,GAAA,GAAA,KAAA,yBACA,EAAA,EAAA,wBACA,OAAA,QAAA,GAAA,OAAA,EACA,EAAA,MAAA,QAAA,EAAA,OAEA,IAAA,EACA,EAEA,OAAA,EAAA,EAAA,IAIA,cAAA,SAAA,GAEA,GAAA,GAAA,KAAA,MAAA,QAAA,EAAA,MACA,OAAA,KAAA,EACA,KAAA,WAAA,EAAA,SACA,EAEA,KAAA,SAAA,GAAA,EAGA,KAAA,MAAA,cAAA,EAAA,OACA,EAAA,SAAA,EAAA,GACA,EAAA,MAAA,cAAA,KAAA,OACA,KAAA,SAAA,GAAA,EAEA,GAIA,aAAA,SAAA,GACA,MAAA,KAAA,KAAA,cAAA,IAEA,aAAA,SAAA,GACA,MAAA,KAAA,KAAA,cAAA,IAEA,SAAA,WACA,QAAA,KAAA,OAEA,eAAA,WACA,GAAA,KAAA,SACA,KAAA,MAAA,WAAA,UAAA,OAAA,EACA,KAAA,MAAA,cAAA,KAAA,MAAA,WAAA,UAAA,GAAA,GAEA,KAAA,WAAA,OAEA,CACA,GAAA,IAAA,KAAA,MAAA,QAAA,OAEA,MADA,MAAA,MAAA,KACA,IAEA,IAAA,GAAA,KAAA,MAAA,QAAA,KAAA,MAAA,QAAA,OAAA,EACA,MAAA,MAAA,mBACA,KAAA,MAAA,WAAA,UAAA,OAAA,EAAA,IACA,KAAA,MAAA,cAAA,KAAA,MAAA,WAAA,UAAA,EAAA,GAAA,EAAA,GACA,KAAA,WAAA,IAKA,MAAA,OAEA,gBAAA,WACA,GAAA,KAAA,SAAA,CACA,GAAA,IAAA,KAAA,MAAA,QAAA,OAEA,MADA,MAAA,MAAA,KACA,IAEA,IAAA,GAAA,KAAA,MAAA,QAAA,KAAA,MAAA,QAAA,OAAA,EACA,MAAA,MAAA,mBACA,EAAA,GAAA,IACA,KAAA,MAAA,cAAA,KAAA,MAAA,WAAA,UAAA,EAAA,GAAA,EAAA,GACA,KAAA,WAAA,QAKA,IAAA,KAAA,MAAA,WAAA,UAAA,OAAA,EAAA,CACA,GAAA,GAAA,KAAA,MAAA,WAAA,SACA,MAAA,MAAA,cAAA,EAAA,EAAA,OAAA,GAAA,EAAA,OAAA,OAEA,MAAA,WAAA,EAGA,OAAA,OAEA,gBAAA,SAAA,EAAA,GACA,KAAA,iBAAA,EAAA,SAAA,GACA,EAAA,EAAA,eAGA,iBAAA,SAAA,EAAA,GACA,KAAA,UACA,EAAA,KAAA,OAEA,KAAA,gBAAA,EAAA,SAAA,GACA,EAAA,UACA,EAAA,EAAA,SAEA,IAEA,gBAAA,SAAA,EAAA,EAAA,GAGA,KAAA,MAAA,UACA,EAAA,MAAA,SACA,IAAA,GAAA,KAAA,MACA,GAAA,MAAA,YAEA,KADA,GAAA,IAAA,GACA,EAAA,aAAA,IAAA,CAEA,GAAA,IAAA,CASA,IARA,GACA,IACA,EAAA,EAAA,IAEA,GAAA,GAEA,EAAA,EAAA,GAEA,GAAA,EAAA,UAEA,GADA,EAAA,WAAA,GACA,IAAA,EAAA,cAAA,GACA,UAGA,GAAA,iBAGA,GACA,EAAA,IAGA,SAAA,WACA,MAAA,KAAA,KAAA,SAAA,SAAA,SAAA,IAAA,KAAA,MAAA,WAAA,MAAA,KAGA,EAAA,cAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,QAAA,EACA,OAAA,KAAA,EACA,IAAA,EACA,EAEA,EAAA,GAAA,EAGA,EAAA,cAAA,GACA,EAAA,EAAA,GACA,EAAA,cAAA,GACA,EAAA,GAAA,EAEA,GAIA,IChMA,EAAA,qBAAA,UAAA,kBAAA,cAAA,iBAAA,cAAA,eAAA,SAAA,GAOA,QAAA,GAAA,EAAA,GACA,MAAA,IAAA,GAAA,EAAA,GANA,GAAA,GAAA,EAAA,mBACA,EAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,eACA,EAAA,EAAA,eAIA,GAAA,EACA,EAAA,GACA,EAAA,GACA,GAAA,EACA,GAAA,CACA,IAAA,UAAA,SAAA,cAAA,CACA,GAeA,GAfA,EAAA,SAAA,cAAA,OAAA,MACA,GACA,YACA,kBACA,aACA,eACA,eAEA,GACA,kBACA,wBACA,mBACA,qBACA,oBAGA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,IAAA,GAAA,CACA,EAAA,EAAA,EACA,OAGA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,IAAA,GAAA,CACA,EAAA,EAAA,EACA,OAGA,IACA,EAAA,oBAEA,4BAAA,IAAA,mBAAA,MACA,GAAA,GAEA,gBAAA,KACA,GAAA,GAGA,EAAA,MACA,OAAA,SAAA,GAQA,MAPA,GAAA,KAAA,MAAA,UAAA,MAAA,KAAA,UAAA,GAAA,SAAA,GACA,GAAA,EACA,IAAA,GAAA,KAAA,GACA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAIA,GAEA,aAAA,OAAA,QAAA,SAAA,GAIA,QAAA,MAHA,GAAA,UAAA,OAAA,EACA,KAAA,IAAA,OAAA,iEAKA,OADA,GAAA,UAAA,EACA,GAAA,IAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,mBACA,GAAA,KACA,GAAA,kBAEA,IACA,EAAA,MAAA,yBAAA,UAEA,EAAA,MAAA,GAAA,EACA,EAAA,MAAA,GAAA,YAEA,WAAA,WACA,MAAA,yBAEA,gBAAA,WACA,MAAA,+BAEA,8BAAA,WAQA,IAAA,GAPA,GAAA,EACA,GACA,KACA,MACA,SACA,KAEA,EAAA,EAAA,EAAA,EAAA,SAAA,OAAA,wBAAA,EACA,OAAA,sBAAA,OAAA,EAAA,GAAA,yBACA,OAAA,qBAAA,OAAA,EAAA,GAAA,yBAAA,OAAA,EAAA,GAAA,8BAEA,QAAA,wBACA,OAAA,sBAAA,SAAA,GACA,GAAA,IAAA,GAAA,OAAA,UACA,EAAA,KAAA,IAAA,EAAA,IAAA,EAAA,IACA,EAAA,OAAA,WAAA,WACA,EAAA,EAAA,IACA,EAEA,OADA,GAAA,EAAA,EACA,IAGA,OAAA,uBACA,OAAA,qBAAA,SAAA,GACA,aAAA,MAIA,uBAAA,SAAA,GACA,MAAA,GAAA,8BAAA,EAAA,2BAAA,EAAA,0BAAA,EAAA,yBAAA,EAAA,wBAAA,GAEA,aAAA,SAAA,GACA,GAAA,oBAAA,QAAA,CACA,GAAA,GAAA,EAAA,uBAAA,EACA,OAAA,QAAA,iBAAA,EAEA,MAAA,IAEA,WAAA,SAAA,EAAA,EAAA,GAOA,IAAA,GANA,GAAA,EAAA,IAAA,EAAA,MAAA,GAAA,WACA,OAAA,IAEA,EAAA,EAAA,IAAA,EAAA,MAAA,GAAA,WACA,OAAA,IAEA,EAAA,EAAA,EAAA,EAAA,IACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,GAAA,EAAA,EAAA,IACA,IAAA,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,EAAA,IAAA,IAAA,EAAA,KAAA,EAAA,IAAA,IAAA,EAAA,KAAA,EAAA,MACA,EAAA,IAAA,EACA,EAAA,IAAA,GAIA,GAAA,GAAA,EAAA,QAAA,GAAA,GACA,EAAA,EAAA,YAAA,GAAA,GACA,EAAA,EAAA,QAAA,GAAA,GACA,EAAA,EAAA,YAAA,GAAA,GACA,EAAA,EAAA,EACA,QACA,UAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,IAAA,GACA,UAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,OAAA,kBAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAGA,qBAAA,SAAA,EAAA,GAiBA,QAAA,GAAA,GAOA,QAAA,GAAA,GACA,GAAA,GAAA,SAAA,cAAA,SACA,GAAA,MAAA,EACA,EAAA,OAAA,CACA,IAAA,GAAA,EAAA,WAAA,KACA,GAAA,aAAA,EAAA,EAAA,GACA,EAAA,GAAA,IAAA,SAAA,mBACA,EAAA,QAAA,MAAA,WACA,EAAA,YAAA,OAAA,KAdA,EAAA,OACA,EAAA,OAAA,mBAAA,GACA,EAAA,GACA,EAAA,SACA,IAAA,GAAA,EAAA,aAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAgBA,OAJA,IACA,EAAA,GAEA,EAAA,UAAA,EAAA,EAAA,EAAA,GACA,EAEA,QAAA,GAAA,GACA,GAAA,GAAA,EACA,GAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MACA,GAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MACA,GAAA,EAAA,EAAA,KAAA,EACA,GAAA,EAAA,EAAA,KAAA,CACA,OAAA,IAAA,GAAA,EAAA,YAAA,EAAA,GAAA,YAAA,EAAA,QAAA,EAAA,KA9CA,GAAA,GAAA,GAAA,EAAA,UAAA,EAAA,UAAA,KACA,EAAA,GAAA,EAAA,WAAA,EAAA,WAAA,IACA,EAAA,GAAA,EAAA,aAAA,EAAA,aAAA,EAAA,GACA,EAAA,EAAA,QACA,EAAA,EAAA,WACA,EAAA,SAAA,cAAA,SACA,GAAA,MAAA,EACA,EAAA,OAAA,CACA,IAAA,GAAA,EAAA,WAAA,KACA,IACA,EAAA,QAAA,MAAA,WACA,GAAA,GAAA,SAAA,cAAA,KACA,GAAA,GAAA,KAAA,eACA,EAAA,YAAA,OAAA,IAmCA,IAAA,GAAA,GAAA,EACA,GAAA,OAAA,EAAA,YAAA,EAAA,EAAA,EAAA,IACA,EAAA,OAAA,EAAA,QAAA,GACA,IAAA,GAAA,EAAA,EACA,GAAA,EAAA,MAAA,EAAA,WACA,EAAA,EAAA,aAAA,EAAA,UACA,IAAA,GAAA,EAAA,CAGA,KAFA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,OAAA,SAAA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,GAAA,CAEA,GADA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KACA,EAAA,MAAA,EAAA,UAAA,MAAA,EAAA,MAAA,EAAA,UAAA,KAAA,CACA,IACA,QAAA,IAAA,mCACA,QAAA,IAAA,2BAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,mBAAA,EAAA,EAAA,KAAA,KACA,QAAA,IAAA,2BAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,mBAAA,EAAA,EAAA,KAAA,KAEA,OAEA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MAIA,IAFA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,OAAA,SAAA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,GAAA,CAEA,GADA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KACA,EAAA,MAAA,EAAA,UAAA,MAAA,EAAA,MAAA,EAAA,UAAA,KAAA,CACA,GACA,QAAA,IAAA,kCAEA,OAEA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MAIA,IAFA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,OAAA,SAAA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,GAAA,CAEA,GADA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QACA,EAAA,MAAA,EAAA,UAAA,MAAA,EAAA,MAAA,EAAA,UAAA,KAAA,CACA,GACA,QAAA,IAAA,kCAEA,OAEA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MAIA,IAFA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,OAAA,SAAA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,GAAA,CAEA,GADA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QACA,EAAA,MAAA,EAAA,UAAA,MAAA,EAAA,MAAA,EAAA,UAAA,KAAA,CACA,GACA,QAAA,IAAA,kCAEA,OAEA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,EAAA,SAAA,KAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,MAEA,IACA,QAAA,IAAA,cAAA,GACA,QAAA,IAAA,cAAA,GAEA,IAAA,GAAA,GAAA,IAAA,EAAA,KAAA,EAAA,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAKA,OAJA,GAAA,UAAA,EACA,EAAA,UAAA,EACA,EAAA,aAAA,EAAA,eAAA,GACA,EAAA,UAAA,KAAA,IAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,KAAA,IAAA,EAAA,KAAA,EAAA,MAAA,KAAA,IAAA,EAAA,KAAA,EAAA,OACA,GAGA,IAAA,GAAA,EAAA,IACA,OAAA,KC/RA,EAAA,8BAAA,UAAA,oBAAA,cAAA,kBAAA,aAAA,uBAAA,oCAAA,qBAAA,4BAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,cACA,EAAA,EAAA,uBACA,GAAA,qCACA,EAAA,sBACA,EAAA,6BACA,EAAA,oBACA,IAAA,KACA,GAAA,YAAA,SAAA,GAEA,EAAA,KAAA,KAAA,GACA,KAAA,aAAA,EAAA,MAAA,aACA,SAAA,EAAA,iBACA,KAAA,aAAA,EAAA,eAAA,EAAA,KAAA,aAAA,SAAA,cAAA,UAAA,WAAA,OAAA,GAEA,KAAA,aAAA,KAAA,MAAA,YAAA,MACA,KAAA,cAAA,KAAA,MAAA,YAAA,MACA,IAAA,GAAA,SAAA,cAAA,SACA,GAAA,MAAA,KAAA,aAAA,KAAA,aACA,EAAA,OAAA,KAAA,cAAA,KAAA,aACA,EAAA,MAAA,MAAA,KAAA,aAAA,KACA,EAAA,MAAA,OAAA,KAAA,cAAA,KACA,EAAA,MAAA,SAAA,WACA,EAAA,MAAA,KAAA,IACA,EAAA,MAAA,IAAA,IACA,KAAA,MAAA,OAAA,GACA,KAAA,OAAA,EACA,KAAA,QAAA,EAAA,WAAA,MACA,KAAA,MAAA,EAAA,MACA,KAAA,QAAA,WAAA,GACA,KAAA,QAAA,WAAA,GACA,KAAA,eAAA,EACA,KAAA,QAAA,GAAA,GAAA,qBAAA,KAAA,OAAA,KAAA,SACA,KAAA,eAAA,EAEA,IAAA,GAAA,EAAA,WA8QA,OA7QA,GAAA,EAAA,GACA,OAAA,SAAA,EAAA,GACA,EAAA,KACA,IAAA,GAAA,KAAA,uBAAA,EAAA,UACA,KAAA,IAAA,KAAA,YAAA,UAAA,CAGA,KAAA,QAAA,aAAA,KAAA,aAAA,EAAA,EAAA,KAAA,aAAA,EAAA,EACA,IAAA,GAAA,EAAA,KAAA,YAAA,aAAA,EAAA,aAAA,EAAA,WACA,GAAA,YACA,KAAA,kBAAA,GACA,GACA,KAAA,cAAA,EAAA,OAAA,IAEA,KAAA,gBAAA,EAAA,GACA,GACA,KAAA,gBAGA,KAAA,YAAA,EAAA,UAEA,gBAAA,WAOA,QAAA,GAAA,GACA,MAAA,GAAA,WAAA,aAAA,EAEA,QAAA,KACA,GAAA,GAAA,EAAA,aAAA,EAAA,aACA,EAAA,EAAA,cAAA,EAAA,YACA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,EAAA,KAEA,OADA,GAAA,cAAA,EAAA,GACA,EAEA,GAAA,GAAA,SAAA,cAAA,SACA,GAAA,MAAA,EAAA,aAAA,EAAA,aACA,EAAA,OAAA,EAAA,cAAA,EAAA,YACA,IAAA,GAAA,EAAA,WAAA,KACA,OAAA,IAAA,GAAA,qBAAA,EAAA,GAGA,QAAA,KACA,MAAA,GAAA,EAAA,OAAA,GAEA,QAAA,GAAA,GACA,GAAA,GAAA,EAAA,UACA,IAAA,EAAA,GAAA,CACA,GAAA,GAAA,GACA,GAAA,KAAA,EACA,IAAA,GAAA,EAAA,OACA,GAAA,aAAA,EAAA,aAAA,EAAA,EAAA,EAAA,aAAA,EAAA,EAEA,KAAA,GADA,GAAA,EAAA,MAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,MAAA,GAAA,UAAA,YAAA,sBAAA,OAGA,GAAA,UAAA,YAAA,sBAAA,IAAA,QAEA,GAAA,YACA,EAAA,cAAA,EAAA,YAGA,QAAA,GAAA,GACA,GAAA,GAAA,EAAA,UAIA,IAHA,EAAA,YACA,EAAA,eAEA,EAAA,GAAA,CACA,GAAA,GAAA,EAAA,EAAA,OAAA,GAAA,QACA,EAAA,EAAA,EAAA,OAAA,GAAA,OACA,EAAA,EAAA,WAAA,aAAA,CACA,KACA,EAAA,YAAA,EAAA,WAAA,cAEA,EAAA,OACA,EAAA,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,UACA,IACA,EAAA,YAAA,EAEA,IAAA,GAAA,EAAA,KACA,KAAA,EAAA,SACA,EAAA,KAAA,OAGA,GAAA,UAAA,aAAA,sBAAA,IAAA,SArEA,GACA,GADA,EAAA,KAEA,EAAA,GAAA,GAAA,aAAA,KAAA,mBAAA,GACA,EAAA,GAAA,GAAA,aAAA,KAAA,iBAAA,GACA,GAAA,KAAA,QACA,MAAA,QAAA,aAmEA,IACA,GADA,EAAA,CAEA,GAAA,MAAA,UACA,EAAA,MAAA,SACA,IAAA,GAAA,EAAA,MAAA,QAAA,EAAA,SAAA,EAAA,EAEA,KADA,EAAA,GAAA,GAAA,MACA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,MAAA,MAAA,EACA,GAAA,cAAA,GACA,GAAA,EAAA,YAAA,EAAA,EACA,IAAA,GACA,EAAA,GAGA,EAAA,gBAAA,EAAA,SAAA,GACA,GAAA,GAAA,EAAA,MAAA,UACA,IAAA,EAAA,SAAA,CAEA,GADA,GAAA,EAAA,YAAA,EAAA,EACA,IAAA,EAOA,OAAA,CALA,IADA,EAAA,EAAA,OACA,EAAA,YAAA,CACA,GAAA,GAAA,EAAA,EAAA,OAAA,EACA,GAAA,YAAA,QAMA,KAAA,GACA,EAAA,EAAA,OAEA,GAAA,EAAA,YAAA,EAAA,IAEA,GACA,EAAA,EAAA,MAAA,MACA,IAAA,GAAA,EAAA,MAAA,QAAA,EAAA,QAAA,EAAA,EACA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,CACA,GAAA,GAAA,EAAA,MAAA,MAAA,EACA,IAAA,EAAA,YAAA,EAAA,EACA,IAAA,GACA,EAAA,GAEA,EAAA,qBAGA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,KAAA,OAAA,WAAA,YAAA,KAAA,SAEA,0BAAA,SAAA,GACA,EAAA,sBAAA,KAAA,UAEA,QAAA,SAAA,GAMA,MALA,GAAA,UAAA,QAAA,KAAA,KAAA,GACA,KAAA,SAAA,IACA,KAAA,OAAA,MAAA,OAAA,EACA,KAAA,OAAA,GAEA,EAAA,GAEA,cAAA,SAAA,GACA,KAAA,QAAA,OACA,KAAA,eAAA,IAEA,aAAA,WACA,KAAA,QAAA,WAEA,eAAA,SAAA,GACA,KAAA,QAAA,YACA,EAAA,eAAA,KAAA,SACA,KAAA,QAAA,QAEA,kBAAA,SAAA,GACA,EAAA,YACA,KAAA,QAAA,OACA,KAAA,QAAA,aAAA,KAAA,aAAA,EAAA,EAAA,KAAA,aAAA,EAAA,GACA,KAAA,QAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,WAAA,EAAA,aACA,KAAA,QAAA,YAGA,aAAA,WACA,MAAA,iEAAA,KAAA,OAAA,YAAA,yBAAA,KAAA,OAAA,OAAA,cAAA,KAAA,OAAA,MAAA,SAEA,eAAA,SAAA,EAAA,GACA,EAAA,UAAA,KAAA,OAAA,EAAA,IAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAEA,GAAA,UAAA,YAAA,KAAA,KAAA,GACA,KAAA,sBAAA,EAAA,WAAA,YAAA,EAAA,MAAA,EAAA,EAAA,OAAA,IACA,EAAA,WAAA,kBACA,KAAA,kBAGA,eAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAEA,GAAA,UAAA,eAAA,KAAA,KAAA,GACA,KAAA,sBAAA,EAAA,WAAA,YAAA,EAAA,MAAA,EAAA,EAAA,OAAA,IACA,EAAA,WAAA,kBACA,KAAA,kBAGA,mBAAA,WAEA,MAAA,KAAA,KAAA,gBAEA,uBAAA,SAAA,GAGA,KAAA,YAAA,KAAA,YAAA,MAAA,EAAA,OAAA,GAAA,aAEA,sBAAA,SAAA,EAAA,GAEA,KAAA,qBAGA,KAAA,uBAAA,EAAA,oBAAA,IAFA,KAAA,YAAA,EAAA,YAKA,uBAAA,SAAA,EAAA,GAEA,KAAA,qBAGA,KAAA,uBAAA,EAAA,qBAAA,IAFA,KAAA,YAAA,EAAA,YAKA,eAAA,SAAA,GACA,KAAA,sBAAA,EAAA,UAAA,gBAAA,EAAA,QAEA,kBAAA,SAAA,GACA,KAAA,uBAAA,EAAA,UAAA,YAAA,EAAA,QAEA,QAAA,WACA,MAAA,UAEA,uBAAA,SAAA,GAEA,EAAA,MAAA,aACA,KAAA,kBAAA,IAGA,oBAAA,SAAA,GAEA,KAAA,kBAAA,IAEA,uBAAA,SAAA,GAEA,KAAA,eAAA,IAEA,0BAAA,SAAA,GAEA,KAAA,kBAAA,IAEA,qBAAA,SAAA,GAEA,KAAA,eAAA,IAEA,wBAAA,SAAA,GAEA,KAAA,kBAAA,IAEA,sBAAA,aAEA,2BAAA,SAAA,GAEA,EAAA,KAAA,iBACA,KAAA,iBAEA,KAAA,oBAIA,ICrTA,EAAA,2BAAA,UAAA,oBAAA,cAAA,kBAAA,uBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,oBACA,GAAA,cACA,IAAA,GAAA,EAAA,mBACA,EAAA,EAAA,uBACA,GAAA,sBACA,EAAA,SAAA,SAAA,GAEA,EAAA,KAAA,KAAA,EACA,IAAA,GAAA,EAAA,MAAA,YAAA,MACA,EAAA,EAAA,MAAA,YAAA,MACA,MAAA,IAAA,SAAA,cAAA,MACA,IAAA,GAAA,KAAA,GACA,GAAA,MAAA,SAAA,WACA,EAAA,MAAA,KAAA,IACA,EAAA,MAAA,IAAA,IACA,EAAA,MAAA,MAAA,IACA,EAAA,MAAA,OAAA,IACA,EAAA,MAAA,KAAA,YAAA,EAAA,MAAA,EAAA,UACA,KAAA,KAAA,EAAA,KAAA,KACA,KAAA,MAAA,OAAA,KAAA,KACA,KAAA,MAAA,EAAA,MACA,KAAA,YAAA,EACA,KAAA,gBACA,KAAA,cACA,KAAA,UAEA,IAAA,GAAA,EAAA,QAsJA,OArJA,GAAA,EAAA,GACA,YAAA,SAAA,GACA,EAAA,UAAA,YAAA,KAAA,KAAA,EACA,IAAA,GAAA,EAAA,KACA,MAAA,eACA,IAAA,GAAA,EAAA,WACA,EAAA,EAAA,eACA,GAAA,iBAAA,GACA,KAAA,iBAAA,EAAA,GACA,KAAA,aAAA,EAAA,eAAA,EACA,KAAA,WAAA,EAAA,eAAA,CACA,IAAA,EACA,KAAA,EAAA,EAAA,EAAA,KAAA,OAAA,OAAA,IAAA,CACA,GAAA,GAAA,KAAA,OAAA,EACA,GAAA,SACA,IAAA,GAAA,EAAA,QAAA,EAEA,IAAA,IAAA,EACA,MAGA,IAAA,KAAA,IAAA,WAAA,QACA,KAAA,IAAA,YAAA,GACA,KAAA,OAAA,KAAA,KAEA,KAAA,IAAA,aAAA,KAAA,oBAAA,KAAA,OAAA,KACA,KAAA,OAAA,OAAA,EAAA,EAAA,IAEA,EAAA,mBAAA,EAAA,eAAA,IAEA,eAAA,SAAA,GACA,EAAA,UAAA,eAAA,KAAA,KAAA,EACA,IAAA,GAAA,EAAA,KACA,MAAA,eACA,IAAA,GAAA,KAAA,oBAAA,SAEA,MAAA,aAAA,EAAA,mBACA,MAAA,WAAA,EAAA,aACA,KAAA,IAAA,YAAA,EACA,IAAA,GAAA,KAAA,gBAAA,EACA,MAAA,OAAA,OAAA,EAAA,IAEA,oBAAA,SAAA,GACA,MAAA,MAAA,aAAA,EAAA;EAEA,cAAA,SAAA,GACA,EAAA,UAAA,QAAA,KAAA,KAAA,EAEA,KADA,GAAA,GAAA,KAAA,OAAA,OACA,KACA,KAAA,OAAA,GAAA,WAGA,gBAAA,SAAA,GACA,GAAA,EACA,KAAA,EAAA,EAAA,EAAA,KAAA,OAAA,OAAA,IACA,GAAA,IAAA,KAAA,OAAA,GAAA,QAAA,GACA,MAAA,EAGA,MAAA,IAAA,OAAA,kDAAA,EAAA,aAEA,OAAA,aAEA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,KAAA,IAAA,WAAA,YAAA,KAAA,MAEA,iBAAA,SAAA,EAAA,GAEA,EAAA,MAAA,WADA,EAAA,YACA,UAEA,UAGA,0BAAA,aAEA,aAAA,WACA,MAAA,MAAA,KAEA,QAAA,SAAA,GAMA,MALA,GAAA,UAAA,QAAA,KAAA,KAAA,GACA,KAAA,SAAA,IACA,KAAA,IAAA,MAAA,OAAA,EACA,KAAA,OAAA,GAEA,EAAA,GAEA,cAAA,aAEA,aAAA,aAEA,aAAA,WACA,kDAAA,KAAA,MAAA,QAAA,aAAA,KAAA,MAAA,SAAA,KAAA,6CAAA,EAAA,KAAA,KAAA,OAAA,0BAEA,eAAA,aAEA,QAAA,WACA,MAAA,OAEA,uBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,KACA,KAAA,GAAA,KAAA,MAAA,WAAA,CACA,GAAA,GAAA,KAAA,WAAA,EACA,GAAA,UACA,EAAA,cAAA,GAAA,IACA,KAAA,iBAAA,EAAA,KAAA,aAAA,MAIA,oBAAA,SAAA,KAGA,uBAAA,aAEA,0BAAA,aAEA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,UACA,EAAA,EAAA,MACA,EAAA,KAAA,aAAA,EAAA,cACA,KACA,EAAA,iBAAA,GACA,EAAA,6BACA,EAAA,mBAAA,EAAA,eAAA,KAIA,wBAAA,SAAA,GACA,EAAA,QAAA,MACA,KAAA,qBAAA,IAGA,sBAAA,SAAA,GAEA,GAAA,GAAA,KACA,EAAA,EAAA,KACA,GAAA,MAAA,wBAAA,KAAA,kBAAA,KAAA,gBAAA,SAAA,GACA,GAAA,EAAA,cAAA,GAAA,GAAA,CACA,GAAA,GAAA,EAAA,aAAA,EAAA,eACA,EAAA,EAAA,UACA,GAAA,mBAAA,EAAA,eAAA,MAEA,EAAA,KAAA,QAEA,2BAAA,eAGA,IClLA,EAAA,gCAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,cAAA,WACA,KAAA,kBAAA,KACA,KAAA,cAAA,KACA,KAAA,qBAAA,KACA,KAAA,iBAAA,KAEA,IAAA,GAAA,EAAA,aAiCA,OAhCA,GAAA,WACA,YAAA,EACA,YAAA,WACA,QAAA,KAAA,sBAEA,QAAA,WACA,QAAA,KAAA,kBAEA,QAAA,WACA,KAAA,sBAAA,KAAA,qBAAA,UACA,KAAA,kBAAA,KAAA,iBAAA,WAEA,wBAAA,SAAA,GACA,MAAA,MAAA,sBAAA,GACA,KAAA,qBAAA,UACA,KAAA,qBAAA,OAAA,IAEA,KAAA,uBAAA,GAGA,oBAAA,SAAA,GACA,MAAA,MAAA,kBAAA,GACA,KAAA,iBAAA,UACA,KAAA,iBAAA,OAAA,IAEA,KAAA,mBAAA,GAGA,SAAA,WACA,MAAA,6BAAA,KAAA,kBAAA,KAAA,kBAAA,KAAA,IAAA,QAAA,KAAA,cAAA,KAAA,cAAA,KAAA,IAAA,oBAAA,KAAA,qBAAA,KAAA,qBAAA,cAAA,IAAA,QAAA,KAAA,iBAAA,KAAA,iBAAA,cAAA,MAGA,IC1CA,EAAA,+BAAA,UAAA,kBAAA,+BAAA,qBAAA,6BAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,gCACA,EAAA,sBACA,EAAA,6BACA,EAAA,aAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,kBACA,KAAA,cACA,KAAA,gBAAA,GAAA,GAAA,cACA,KAAA,gBAAA,kBAAA,EACA,KAAA,gBAAA,qBAAA,EACA,KAAA,iBAAA,EACA,KAAA,mBAAA,OAAA,EACA,GACA,KAAA,aAAA,GAAA,GAAA,aAAA,EAAA,QAAA,GACA,KAAA,aAAA,kBAEA,KAAA,aAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,IAAA,GAGA,KAAA,WADA,EACA,GAAA,GAAA,aAAA,EAAA,QAAA,GAEA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,IAAA,GAEA,KAAA,iBAAA,OAAA,EAEA,IAAA,GAAA,EAAA,YAmFA,OAlFA,GAAA,WACA,YAAA,EACA,kBAAA,WAGA,IAFA,GAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,MAAA,KAAA,aAAA,MAAA,aAAA,GACA,EAAA,KAAA,aAAA,MAAA,QAAA,KAAA,aAAA,SAAA,EAAA,GACA,EAAA,MAAA,QAAA,GAAA,CACA,GAAA,GAAA,EAAA,MAAA,UAIA,IAHA,EAAA,cAAA,sBAAA,EAAA,OACA,KAAA,uBAAA,EAAA,cAAA,sBAAA,EAAA,SAEA,EAAA,MAAA,OAAA,KAAA,aAAA,MAAA,MAAA,QAGA,KAFA,GAAA,MAAA,cAAA,KAAA,aAAA,MAAA,MAAA,EAAA,MAAA,WAMA,IAAA,WACA,GAAA,GAAA,IACA,MAAA,oBACA,EAAA,aAAA,gBAAA,EAAA,WAAA,SAAA,GACA,GAAA,GAAA,EAAA,MAAA,UACA,GAAA,SACA,EAAA,cAAA,MAAA,EAAA,GAEA,EAAA,cAAA,KAAA,EAAA,KAEA,GACA,KAAA,kBACA,KAAA,YAAA,OAGA,YAAA,SAAA,GACA,KAAA,oBAAA,CACA,IAAA,GAAA,KAAA,eACA,GAAA,iBAAA,EAAA,EAAA,MAAA,OAAA,KACA,KAAA,WAAA,KAAA,GACA,KAAA,gBAAA,GAAA,GAAA,cACA,KAAA,gBAAA,kBAAA,EAAA,cACA,KAAA,gBAAA,qBAAA,EAAA,kBAEA,aAAA,SAAA,EAAA,GACA,KAAA,iBAAA,EACA,KAAA,gBAAA,cAAA,EACA,KAAA,oBAAA,GAEA,YAAA,SAAA,GACA,KAAA,mBACA,KAAA,YAAA,GAEA,KAAA,gBAAA,qBAAA,EAAA,MAAA,QAGA,oBAAA,WACA,MAAA,MAAA,kBAEA,uBAAA,SAAA,GACA,KAAA,eAAA,KAAA,IAEA,sBAAA,WACA,KAAA,eAAA,OAEA,sBAAA,WACA,MAAA,KAAA,KAAA,eAAA,OACA,KAAA,eAAA,KAAA,eAAA,OAAA,GAEA,MAGA,0BAAA,SAAA,GACA,IAAA,GAAA,GAAA,KAAA,eAAA,OAAA,EAAA,GAAA,EAAA,IAGA,IAFA,GAAA,GAAA,KAAA,eAAA,GACA,EAAA,EAAA,OACA,KACA,GAAA,EAAA,iBAAA,EAAA,IACA,MAAA,EAIA,OAAA,QAGA,IC9GA,EAAA,4BAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,YAAA,EACA,KAAA,KAAA,EACA,KAAA,SAAA,EACA,KAAA,KAAA,EAEA,IAAA,GAAA,EAAA,SAqBA,OApBA,GAAA,WACA,YAAA,EACA,iBAAA,SAAA,GACA,MAAA,MAAA,WAAA,GAEA,aAAA,SAAA,GAGA,IAFA,GAAA,GAAA,EAAA,oBACA,EAAA,EAAA,OACA,KACA,GAAA,KAAA,iBAAA,EAAA,IACA,OAAA,CAGA,QAAA,GAEA,YAAA,SAAA,GACA,GAAA,GAAA,KAAA,WACA,OAAA,IAAA,GAAA,EAAA,UAAA,EAAA,KAAA,SAGA,IC9BA,EAAA,2BAAA,UAAA,oBAAA,cAAA,iBAAA,cAAA,kBAAA,uBAAA,qBAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,kBACA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,uBACA,GAAA,sBACA,EAAA,oBACA,IAAA,GAAA,4BAEA,GAAA,SAAA,SAAA,GAEA,GAAA,GAAA,EAAA,KACA,MAAA,MAAA,EAAA,MACA,KAAA,IAAA,SAAA,gBAAA,EAAA,OACA,KAAA,EAAA,SAAA,gBAAA,EAAA,KACA,KAAA,KAAA,SAAA,gBAAA,EAAA,OACA,IAAA,GAAA,EAAA,MAAA,YAAA,MACA,EAAA,EAAA,MAAA,YAAA,MACA,MAAA,IAAA,YAAA,KAAA,MACA,KAAA,IAAA,YAAA,KAAA,GACA,KAAA,KAAA,EAAA,KAAA,KACA,KAAA,IAAA,aAAA,QAAA,GACA,KAAA,IAAA,aAAA,SAAA,GACA,KAAA,IAAA,aAAA,oBAAA,IACA,KAAA,IAAA,MAAA,SAAA,WACA,KAAA,IAAA,MAAA,KAAA,IACA,KAAA,IAAA,MAAA,IAAA,IACA,KAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,EAAA,UACA,KAAA,IAAA,MAAA,kBAAA,OACA,EAAA,OAAA,KAAA,KACA,KAAA,YAAA,EACA,KAAA,iBACA,KAAA,cACA,EAAA,KAAA,KAAA,GACA,KAAA,oBAAA,EACA,KAAA,qBAAA,EAEA,IAAA,GAAA,EAAA,SACA,EAAA,EAAA,QAAA,MAmVA,OAlVA,GAAA,EAAA,GACA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAIA,GAAA,UAAA,YAAA,KAAA,KAAA,EAGA,KAFA,GAAA,GAAA,KAAA,UAAA,OACA,EAAA,KACA,EAAA,QAAA,EAAA,QAAA,CACA,GAAA,GAAA,EAAA,cACA,EAAA,KAAA,WAAA,EAkBA,IAjBA,IACA,GACA,EAAA,SAAA,gBAAA,EAAA,KACA,KAAA,eAAA,EAAA,WAAA,eAAA,GACA,KAAA,sBAAA,EAAA,KAAA,WAAA,GAAA,KAGA,EAAA,KAAA,EACA,KAAA,iBACA,KAAA,wBAEA,KAAA,gBAAA,EAAA,WAAA,GACA,EAAA,eAAA,EACA,EAAA,MAAA,EAAA,OACA,KAAA,WAAA,GAAA,GAEA,EAAA,iBACA,EAAA,SAAA,EAAA,OACA,KAEA,GAAA,cAAA,EAAA,MAAA,EAAA,SACA,EAAA,EAEA,GAAA,GAAA,EAAA,WACA,EAAA,EAAA,cACA,EAAA,KAAA,WAAA,GACA,EAAA,EAAA,kBAAA,KAAA,IAAA,KAAA,KAAA,EACA,MAAA,WAAA,EAAA,GACA,KAAA,gBAAA,EAAA,GACA,KAAA,cAAA,GAAA,EACA,EAAA,YAAA,IAEA,eAAA,SAAA,GACA,GAAA,GAAA,EAAA,KAGA,GAAA,UAAA,eAAA,KAAA,KAAA,EACA,IAAA,GAAA,EAAA,cACA,EAAA,EAAA,WACA,EAAA,KAAA,cAAA,EACA,MAAA,WAAA,GAAA,YAAA,SACA,MAAA,cAAA,GACA,EAAA,eACA,EAAA,cAAA,KAAA,IAAA,KAAA,KAGA,KADA,GAAA,GAAA,EAAA,OACA,EAAA,OAAA,KAAA,UAAA,QAAA,CACA,GAAA,GAAA,EAAA,cACA,EAAA,KAAA,WAAA,EACA,GAAA,iBACA,IAAA,EAAA,iBACA,EAAA,WAAA,YAAA,SACA,GAAA,YACA,MAAA,WAAA,IAEA,EAAA,mBAEA,KAAA,EAAA,kBAEA,sBAAA,SAAA,EAAA,EAAA,GAEA,GAAA,EAAA,WAAA,OAEA,CAEA,GAEA,GAFA,EAAA,EAAA,OAAA,EACA,EAAA,EAAA,QAAA,EAEA,KAAA,EAAA,EAAA,EAAA,EAAA,WAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,WAAA,EACA,IAAA,EAAA,MAAA,CACA,EAAA,MAAA,SACA,IAAA,GAAA,EAAA,MAAA,QAAA,EACA,IAAA,EAAA,EACA,OAIA,IAAA,EAAA,WAAA,OACA,EAAA,YAAA,GAEA,EAAA,aAAA,EAAA,EAAA,WAAA,QAnBA,GAAA,YAAA,IAuBA,WAAA,SAAA,EAAA,GAEA,EAAA,mBACA,EAAA,kBAAA,GAEA,EAAA,eACA,EAAA,cAAA,KAAA,IAAA,KAAA,OAGA,gBAAA,SAAA,EAAA,GAEA,KAAA,sBAAA,EAAA,GACA,KAAA,mBAAA,EAAA,IAEA,sBAAA,SAAA,EAAA,GAEA,EAAA,MAAA,SADA,IAAA,KAAA,SAAA,KAAA,UAAA,YAAA,EAAA,aACA,UAEA,QAGA,mBAAA,SAAA,EAAA,GACA,GAAA,EAEA,GADA,IAAA,KAAA,SACA,KAAA,UAAA,aAEA,EAAA,aAEA,EAAA,aAAA,UAAA,IAEA,wBAAA,SAAA,GACA,MAAA,MAAA,cAAA,EAAA,MAAA,gBAEA,qBAAA,SAAA,GACA,MAAA,MAAA,WAAA,EAAA,MAAA,gBAEA,eAAA,SAAA,EAAA,GACA,EAAA,aACA,EAAA,aAAA,cACA,EAAA,gBAAA,aAGA,EAAA,aAAA,YAAA,EAAA,YAAA,oBAGA,OAAA,WACA,KAAA,wBAEA,qBAAA,WACA,GAAA,KAAA,mBAAA,CACA,GAAA,GAAA,KAAA,mBACA,MAAA,oBAAA,GACA,KAAA,oBAAA,EACA,KAAA,qBAAA,IAGA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,KAAA,IAAA,WAAA,YAAA,KAAA,MAEA,uBAAA,SAAA,GAEA,GAAA,GAAA,KAAA,uBAAA,CACA,MAAA,oBAAA,EACA,KAAA,oBAAA,GAEA,eAAA,WACA,KAAA,aACA,KAAA,+BAEA,KAAA,wBAAA,IAGA,6BAAA,WAEA,GAAA,KAAA,aAAA,CACA,GAAA,GAAA,CACA,GAAA,UAAA,KAAA,SAAA,aACA,KAAA,SAAA,iCAAA,EACA,IAAA,GAAA,EAAA,MAAA,mBACA,KAAA,EAAA,UAAA,CACA,KAAA,kBAAA,IAAA,EAAA,YAAA,KAAA,MAAA,EAAA,KAAA,GAAA,KAAA,MAAA,EAAA,KAAA,IACA,IAAA,GAAA,EAAA,UAAA,KAAA,kBAAA,YAEA,MAAA,0BAAA,KAAA,KAAA,EAAA,KAAA,GAAA,KAAA,KAAA,EAAA,KAAA,IAEA,KAAA,wBAAA,OACA,MAAA,0BACA,KAAA,wBAAA,IAGA,0BAAA,SAAA,EAAA,GACA,KAAA,IAAA,aAAA,QAAA,GACA,KAAA,IAAA,aAAA,SAAA,IAEA,oBAAA,SAAA,GAEA,GAAA,GAAA,KAAA,UAAA,cACA,IAAA,KAAA,aACA,EAAA,KAAA,kBAAA,EAAA,YAAA,YAAA,KAAA,kBAAA,cAAA,KAAA,KACA,GACA,KAAA,eAAA,KAAA,kBAAA,KAAA,OAEA,IAAA,KAAA,yBAAA,CACA,GAAA,GAAA,GAAA,GACA,EAAA,EAAA,WAOA,IANA,KAAA,gBACA,EAAA,OAAA,EAAA,YAAA,EAAA,MAAA,EAAA,QAEA,KAAA,aACA,EAAA,OAAA,EAAA,UAAA,EAAA,gBAEA,KAAA,SAAA,CACA,GAAA,GAAA,EAAA,gBACA,GAAA,OAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAEA,EAAA,QAAA,EAAA,aACA,IAAA,GAAA,EAAA,MAAA,oBACA,EAAA,KAAA,SAAA,oBAAA,KAAA,SAAA,aACA,EAAA,EAAA,iBAAA,GACA,EAAA,EAAA,YAAA,KAAA,MAAA,EAAA,KAAA,GAAA,KAAA,MAAA,EAAA,KAAA,IACA,EAAA,EAAA,UACA,MAAA,0BAAA,KAAA,KAAA,EAAA,WAAA,EAAA,GAAA,KAAA,KAAA,EAAA,YAAA,EAAA,IACA,EAAA,OAAA,GACA,EAAA,QAAA,GACA,EAAA,KAAA,kBAAA,EAAA,YAAA,KAAA,KACA,KAAA,eAAA,EAAA,KAAA,OAEA,MAAA,eAAA,EAAA,KAAA,IAGA,0BAAA,aAEA,aAAA,WACA,MAAA,MAAA,KAEA,QAAA,SAAA,GAMA,MALA,GAAA,UAAA,QAAA,KAAA,KAAA,GACA,KAAA,SAAA,IACA,KAAA,IAAA,MAAA,OAAA,EACA,KAAA,OAAA,GAEA,EAAA,GAEA,cAAA,aAEA,aAAA,aAEA,aAAA,WACA,MAAA,GAAA,SAAA,OAAA,KAAA,KAAA,SAAA,QAEA,eAAA,SAAA,EAAA,EAAA,GAEA,GADA,KAAA,eAAA,KAAA,UAAA,eAAA,KAAA,IACA,OAAA,MAWA,CACA,GAAA,GAAA,OAAA,KAAA,OAAA,WAAA,OACA,EAAA,GAAA,OACA,EAAA,KAAA,cACA,SAAA,IAAA,EACA,IAAA,GAAA,GAAA,OAAA,IAAA,KAAA,gCACA,EAAA,EAAA,gBAAA,EAQA,MAPA,GAAA,YACA,EAAA,OAAA,WACA,EAAA,UAAA,EAAA,EAAA,GACA,EAAA,gBAAA,GACA,EAAA,aAEA,EAAA,IAAA,EACA,GAAA,OAAA,+EAxBA,EAAA,YACA,MAAA,EAAA,KAAA,gBACA,aAAA,EACA,iBAAA,EACA,kBAAA,EACA,aAAA,EACA,eAAA,WACA,EAAA,eAmBA,KAAA,uBAEA,QAAA,WACA,MAAA,OAEA,uBAAA,SAAA,GAEA,GAAA,GAAA,KAAA,qBAAA,EACA,GACA,KAAA,sBAAA,EAAA,UAAA,GACA,KAAA,WAAA,KAAA,OACA,KAAA,sBAAA,KAAA,SAAA,KAAA,qBAAA,KAAA,UAAA,iBAGA,oBAAA,SAAA,GAEA,GAAA,GAAA,KAAA,qBAAA,EACA,GACA,KAAA,mBAAA,EAAA,UAAA,GACA,KAAA,WAAA,KAAA,OACA,KAAA,mBAAA,KAAA,SAAA,KAAA,qBAAA,KAAA,UAAA,iBAGA,uBAAA,aAEA,0BAAA,aAEA,qBAAA,SAAA,GAEA,GAAA,GAAA,KAAA,wBAAA,EACA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,SACA,GAAA,mBACA,EAAA,kBAAA,GAEA,EAAA,eACA,EAAA,cAAA,KAAA,IAAA,KAAA,QAIA,wBAAA,SAAA,GACA,EAAA,QAAA,MACA,KAAA,qBAAA,IAGA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,KACA,EAAA,EAAA,KACA,IAAA,EAAA,aAAA,KAAA,SACA,KAAA,6BACA,IAAA,EAAA,SAAA,EAAA,MAAA,KAAA,UAAA,CACA,GAAA,GAAA,KAAA,WAAA,EAAA,cACA,MAAA,eAAA,EAAA,eAAA,OAEA,MAAA,0BAGA,2BAAA,eAGA,IC5XA,EAAA,2BAAA,UAAA,kBAAA,2BAAA,6BAAA,0BAAA,2BAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,4BACA,EAAA,8BACA,EAAA,2BACA,EAAA,2BAEA,EAAA,SAAA,SAAA,EAAA,EAAA,GACA,KAAA,iBAAA,EACA,KAAA,KAAA,EACA,KAAA,eAAA,EACA,KAAA,iBAAA,KAAA,oBAEA,IAAA,GAAA,EAAA,QAiBA,OAhBA,GAAA,WACA,YAAA,EACA,gBAAA,SAAA,GACA,MAAA,IAAA,GAAA,UAAA,KAAA,iBAAA,KAAA,KAAA,KAAA,EAAA,UAAA,KAAA,eAAA,MAGA,EAAA,OAAA,GAAA,GAAA,EAAA,YAAA,aACA,EAAA,IAAA,GAAA,GAAA,EAAA,SAAA,UACA,EAAA,IAAA,GAAA,GAAA,EAAA,SAAA,UACA,EAAA,uBAAA,EAAA,OAAA,iBACA,EAAA,oBAAA,EAAA,IAAA,iBACA,EAAA,oBAAA,EAAA,IAAA,iBACA,EAAA,OAAA,EAAA,OACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,MAAA,EAAA,MACA,IC/BA,EAAA,4BAAA,UAAA,oBAAA,kBAAA,qBAAA,2BAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,0BACA,GAAA,WAAA,SAAA,GACA,EAAA,KAAA,KAAA,GACA,EAAA,cACA,KAAA,gBAAA,EAAA,cAGA,IAAA,GAAA,EAAA,UAmBA,OAlBA,GAAA,EAAA,GACA,gBAAA,SAAA,GACA,KAAA,eAAA,IAEA,UAAA,WACA,OAAA,GAEA,YAAA,WACA,KAAA,IAAA,OAAA,6CAEA,kBAAA,WACA,OAAA,GAEA,oBAAA,SAAA,GACA,MAAA,4BAAA,EAAA,SAGA,EAAA,UAAA,qBAAA,EAAA,QACA,IC/BA,EAAA,0BAAA,UAAA,mBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,kBACA,GAAA,SAAA,SAAA,GACA,GAAA,GAAA,EAAA,SACA,GAAA,mBAAA,WACA,KAAA,MAAA,IACA,IAAA,GAAA,IACA,MAAA,cAAA,WACA,EAAA,kBACA,EAAA,mBAGA,EAAA,QAAA,WACA,MAAA,QAAA,KAAA,OAEA,EAAA,QAAA,WACA,MAAA,MAAA,OAEA,EAAA,QAAA,SAAA,GACA,GAAA,KAAA,YAAA,EAAA,CACA,GAAA,GAAA,KAAA,WAAA,OAAA,CACA,IAAA,KAAA,OAAA,KAAA,MAAA,sBACA,KAAA,MAAA,qBAAA,KAAA,eAEA,KAAA,MAAA,EACA,GAAA,KAAA,OAAA,KAAA,MAAA,mBACA,KAAA,MAAA,kBAAA,KAAA,eAEA,KAAA,kBACA,KAAA,iBAEA,MAAA,MAEA,IAAA,GAAA,EAAA,kBACA,GAAA,mBAAA,WACA,KAAA,OAAA,KAAA,MAAA,mBACA,KAAA,MAAA,kBAAA,KAAA,eAEA,GACA,EAAA,KAAA,MAGA,IAAA,GAAA,EAAA,mBACA,GAAA,oBAAA,WACA,KAAA,OAAA,KAAA,MAAA,sBACA,KAAA,MAAA,qBAAA,KAAA,eAEA,GACA,EAAA,KAAA,OAGA,EAAA,iBAAA,SAAA,GACA,EAAA,aAAA,KAAA,OACA,KAAA,MAAA,kBACA,EAAA,QAAA,OACA,KAAA,MAAA,gBAAA,sBAAA,EAAA,WAGA,EAAA,gBAAA,SAAA,GACA,KAAA,MAAA,iBACA,EAAA,QAAA,WAGA,EAAA,gBAAA,WACA,GAAA,GAAA,QAUA,OANA,IAHA,KAAA,MAEA,KAAA,MAAA,MACA,KAAA,MAAA,QAAA,IACA,KAAA,MAAA,iBACA,YAAA,KAAA,QAAA,KAEA,KAAA,MAAA,IANA,SAUA,EAAA,oBAAA,WACA,OAAA,KAAA,QAAA,KAAA,MAAA,kBAEA,EAAA,WAAA,WAEA,MAAA,MAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,QAAA,KAAA,MAAA,eAEA,EAAA,cAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,UACA,EAAA,OAAA,KAAA,OACA,IAAA,EAAA,kBACA,EAAA,YAAA,EAAA,iBAAA,KAGA,EAAA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,OAAA,KAAA,QACA,EAAA,EAAA,eAAA,EACA,IACA,EAAA,YAAA,IAGA,EAAA,yBAAA,SAAA,EAAA,GAWA,MAVA,MAAA,QACA,IACA,GAAA,OAGA,GADA,gBAAA,MAAA,MACA,EAAA,UAAA,KAAA,MAAA,IAEA,EAAA,SAAA,KAAA,MAAA,YAGA,GAEA,EAAA,cAAA,QAAA,OAAA,EAAA,cACA,OAAA,eAAA,EAAA,QACA,IAAA,EAAA,QACA,IAAA,EAAA,UAEA,EAAA,iBACA,EAAA,eAAA,cAIA,IAAA,GAAA,EAAA,QACA,OAAA,KC1HA,EAAA,2BAAA,UAAA,kBAAA,wBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,mBACA,EAAA,EAAA,uBACA,GAAA,UAAA,SAAA,GACA,GAAA,GAAA,EAAA,SACA,GAAA,oBAAA,WACA,KAAA,QAAA,KACA,KAAA,mBAAA,GAAA,EACA,IAAA,GAAA,IACA,MAAA,gBAAA,WACA,EAAA,kBACA,EAAA,qBAGA,EAAA,UAAA,WACA,MAAA,QAAA,KAAA,SAEA,EAAA,aAAA,WACA,MAAA,MAAA,mBAAA,WAEA,EAAA,aAAA,SAAA,GAMA,MALA,MAAA,iBAAA,IACA,KAAA,mBACA,KAAA,mBAAA,UAAA,EACA,KAAA,oBAEA,MAEA,EAAA,WAAA,WACA,MAAA,MAAA,mBAAA,SAEA,EAAA,WAAA,SAAA,GAMA,MALA,MAAA,mBAAA,UAAA,IACA,KAAA,mBACA,KAAA,mBAAA,QAAA,EACA,KAAA,oBAEA,MAEA,EAAA,YAAA,WACA,MAAA,MAAA,mBAAA,UAEA,EAAA,YAAA,SAAA,GAMA,MALA,MAAA,mBAAA,WAAA,IACA,KAAA,mBACA,KAAA,mBAAA,SAAA,EACA,KAAA,oBAEA,MAEA,EAAA,YAAA,WACA,MAAA,MAAA,mBAAA,UAEA,EAAA,YAAA,SAAA,GAMA,MALA,MAAA,mBAAA,WAAA,IACA,KAAA,mBACA,KAAA,mBAAA,SAAA,EACA,KAAA,oBAEA,MAEA,EAAA,kBAAA,WACA,MAAA,MAAA,mBAAA,gBAEA,EAAA,kBAAA,SAAA,GAMA,MALA,MAAA,mBAAA,iBAAA,IACA,KAAA,mBACA,KAAA,mBAAA,eAAA,EACA,KAAA,oBAEA,MAEA,EAAA,cAAA,SAAA,GAIA,MAHA,MAAA,mBACA,KAAA,mBAAA,EACA,KAAA,mBACA,MAEA,EAAA,cAAA,WACA,MAAA,MAAA,oBAEA,EAAA,UAAA,WACA,MAAA,MAAA,SAEA,EAAA,UAAA,SAAA,GACA,GAAA,KAAA,cAAA,EAAA,CACA,KAAA,kBACA,IAAA,GAAA,KAAA,WAAA,OAAA,CACA,IAAA,KAAA,SAAA,KAAA,QAAA,sBACA,KAAA,QAAA,qBAAA,KAAA,iBAEA,KAAA,QAAA,EACA,GAAA,KAAA,SAAA,KAAA,QAAA,mBACA,KAAA,QAAA,kBAAA,KAAA,iBAEA,KAAA,mBAEA,MAAA,MAEA,IAAA,GAAA,EAAA,kBACA,GAAA,mBAAA,WACA,KAAA,SAAA,KAAA,QAAA,mBACA,KAAA,QAAA,kBAAA,KAAA,iBAEA,GACA,EAAA,KAAA,MAGA,IAAA,GAAA,EAAA,mBACA,GAAA,oBAAA,WACA,KAAA,SAAA,KAAA,QAAA,sBACA,KAAA,QAAA,qBAAA,KAAA,iBAEA,GACA,EAAA,KAAA,OAGA,EAAA,mBAAA,SAAA,GACA,EAAA,eAAA,KAAA,SACA,EAAA,aAAA,KAAA,gBACA,EAAA,WAAA,KAAA,cACA,EAAA,YAAA,KAAA,eACA,EAAA,YAAA,KAAA,eACA,EAAA,kBAAA,KAAA,qBACA,KAAA,QAAA,kBACA,EAAA,QAAA,OACA,KAAA,QAAA,gBAAA,sBAAA,EAAA,WAGA,EAAA,kBAAA,SAAA,GACA,KAAA,QAAA,iBACA,EAAA,QAAA,WAGA,EAAA,kBAAA,WACA,IAAA,KAAA,QACA,MAAA,eAEA,IAAA,GAAA,UAeA,OAbA,IADA,KAAA,QAAA,MACA,KAAA,QAAA,QAAA,IACA,KAAA,QAAA,iBACA,cAAA,KAAA,QAAA,KAEA,KAAA,QAAA,IAEA,GAAA,iBAAA,KAAA,eAAA,IACA,GAAA,mBAAA,KAAA,aAAA,IACA,GAAA,oBAAA,KAAA,cAAA,IACA,KAAA,gBACA,GAAA,qBAAA,KAAA,cAAA,KAAA,KAAA,IACA,GAAA,sBAAA,KAAA,oBAAA,KAEA,GAEA,EAAA,gBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,YACA,EAAA,SAAA,KAAA,OACA,IAAA,EAAA,kBACA,EAAA,YAAA,EAAA,iBAAA,KAGA,EAAA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,SAAA,KAAA,QACA,EAAA,EAAA,eAAA,EACA,IACA,EAAA,YAAA,IAGA,EAAA,0BAAA,SAAA,EAAA,GAEA,QAAA,GAAA,EAAA,EAAA,GACA,IACA,GAAA,OAKA,GAHA,GAAA,gBAAA,GAGA,EAAA,EAAA,KAAA,EAFA,EAAA,EAAA,MAAA,EAAA,IANA,GAAA,GAAA,IAWA,IAAA,KAAA,QAAA,CACA,GAAA,GAAA,GAAA,EACA,iBAAA,MAAA,QACA,EAAA,SAAA,KAAA,SAEA,EAAA,SAAA,KAAA,QAAA,YAAA,GAEA,EAAA,MACA,YACA,UACA,WACA,kBACA,SAAA,GACA,EAAA,KAAA,EAAA,IACA,EAAA,EAAA,EAAA,MAGA,KAAA,UACA,EAAA,WAAA,KAAA,UAAA,KAAA,WAAA,GAGA,MAAA,IAEA,EAAA,cACA,SACA,YACA,UACA,WACA,WACA,kBACA,OAAA,EAAA,cACA,OAAA,eAAA,EAAA,UACA,IAAA,EAAA,UACA,IAAA,EAAA,YAEA,OAAA,eAAA,EAAA,aACA,IAAA,EAAA,aACA,IAAA,EAAA,eAEA,OAAA,eAAA,EAAA,WACA,IAAA,EAAA,WACA,IAAA,EAAA,aAEA,OAAA,eAAA,EAAA,YACA,IAAA,EAAA,YACA,IAAA,EAAA,cAEA,OAAA,eAAA,EAAA,YACA,IAAA,EAAA,YACA,IAAA,EAAA,cAEA,OAAA,eAAA,EAAA,kBACA,IAAA,EAAA,kBACA,IAAA,EAAA,oBAEA,EAAA,mBACA,EAAA,iBAAA,cAIA,IAAA,GAAA,EAAA,SACA,OAAA,KCnPA,EAAA,sBAAA,UAAA,oBAAA,aAAA,kBAAA,qBAAA,0BAAA,yBAAA,0BAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,cACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,2BACA,EAAA,EAAA,0BACA,EAAA,EAAA,0BACA,GAAA,qBAAA,aACA,EAAA,KAAA,SAAA,EAAA,GACA,KAAA,OAAA,KACA,EAAA,MACA,KAAA,qBACA,KAAA,sBACA,EAAA,KAAA,MACA,KAAA,SAAA,GACA,KAAA,OAAA,GAEA,IAAA,GAAA,EAAA,IAkHA,OAjHA,GAAA,EAAA,GACA,SAAA,SAAA,GAQA,MAPA,MAAA,SAAA,IACA,gBAAA,KACA,EAAA,GAAA,GAAA,IAEA,KAAA,OAAA,EACA,KAAA,mBAEA,MAEA,SAAA,WACA,MAAA,MAAA,QAEA,gBAAA,WACA,KAAA,mBACA,KAAA,aACA,KAAA,eAAA,KAAA,sBACA,KAAA,oBAGA,mBAAA,WACA,MAAA,MAAA,QAAA,KAAA,OAAA,cAAA,KAAA,oBAAA,KAAA,OAAA,QAEA,iBAAA,WACA,KAAA,mBAEA,SAAA,WACA,MAAA,MAAA,QAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,OACA,MAAA,aACA,EAAA,YACA,KAAA,OAAA,eAAA,GACA,KAAA,QACA,KAAA,iBAAA,GACA,EAAA,OACA,KAAA,gBAAA,IAEA,KAAA,UACA,KAAA,mBAAA,GACA,EAAA,SACA,KAAA,kBAAA,MAIA,WAAA,WACA,KAAA,IAAA,OAAA,4CAEA,kBAAA,WACA,MAAA,UAAA,gBAAA,6BAAA,SAEA,kBAAA,SAAA,GACA,GAAA,GAAA,KAAA,WAAA,KAAA,OAAA,aAAA,EACA,KACA,EAAA,QAEA,EACA,EAAA,aAAA,IAAA,GACA,EAAA,aAAA,MACA,EAAA,gBAAA,KAEA,EAAA,aAAA,QAAA,KAAA,kBAAA,KAAA,sBAEA,cAAA,SAAA,EAAA,GACA,KAAA,cAAA,EAAA,GACA,KAAA,cAAA,EAAA,GACA,KAAA,gBAAA,EAAA,IAEA,cAAA,SAAA,EAAA,GACA,KAAA,iBAAA,EAAA,GACA,KAAA,mBAAA,EAAA,IAEA,UAAA,WACA,OAAA,GAEA,kBAAA,SAAA,GACA,IAAA,KAAA,WACA,OAAA,CAEA,IAAA,GAAA,KAAA,OAAA,cAAA,EAIA,QAHA,GAAA,KAAA,2BAAA,KAAA,cACA,EAAA,KAAA,OAAA,gBAAA,KAAA,oBAAA,cAAA,IAEA,GAEA,qBAAA,SAAA,GACA,MAAA,MAAA,WAAA,KAAA,OAAA,iBAAA,IAAA,GAEA,GAAA,OAAA,GACA,KAAA,SAAA,IAEA,GAAA,SACA,MAAA,MAAA,YAEA,oBAAA,SAAA,GACA,MAAA,qBAAA,KAAA,OAAA,WAAA,MAAA,EAAA,OAEA,cAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,cAAA,KAAA,KAAA,EAAA,EAGA,OAFA,GAAA,KAAA,yBAAA,EAAA,GACA,EAAA,KAAA,0BAAA,EAAA,MAIA,EAAA,UAAA,cAAA,SAAA,OAAA,EAAA,UAAA,cACA,EAAA,UAAA,qBACA,EAAA,OACA,EAAA,KAEA,EAAA,GACA,EAAA,GACA,ICrIA,EAAA,wBAAA,UAAA,oBAAA,kBAAA,qBAAA,cAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,aACA,GAAA,OAAA,SAAA,EAAA,GACA,gBAAA,GACA,EAAA,GAEA,KAAA,QAAA,EACA,EAAA,OAEA,EAAA,KAAA,KAAA,EAAA,OAAA,EAAA,EAAA,GAAA,GAEA,IAAA,GAAA,EAAA,MAuCA,OAtCA,GAAA,EAAA,GACA,iBAAA,WACA,KAAA,SAAA,EAAA,OAAA,EAAA,EAAA,KAAA,WAEA,kBAAA,WACA,MAAA,UAAA,gBAAA,6BAAA,WAEA,kBAAA,SAAA,GACA,EAAA,aAAA,IAAA,KAAA,SACA,EAAA,aAAA,QAAA,KAAA,kBAAA,KAAA,sBAEA,oBAAA,SAAA,GACA,MAAA,uBAAA,KAAA,QAAA,MAAA,EAAA,OAEA,UAAA,WACA,MAAA,MAAA,SAEA,UAAA,SAAA,GAKA,MAJA,MAAA,UAAA,IACA,KAAA,QAAA,EACA,KAAA,oBAEA,MAEA,mBAAA,WACA,MAAA,MAAA,QAAA,KAAA,OAAA,OAAA,QAAA,KAAA,mBAAA,UAAA,GAAA,KAAA,OAAA,QAEA,kBAAA,SAAA,GACA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,QAAA,KAAA,SAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,QAAA,GACA,MAAA,MAAA,UAAA,MAGA,EAAA,UAAA,cAAA,UAAA,OAAA,EAAA,UAAA,cACA,ICtDA,EAAA,wBAAA,WAAA,WAEA,MAAA,UAAA,GACA,MAAA,GAAA,QAAA,KAAA,SAAA,QAAA,KAAA,QAAA,QAAA,KAAA,QAAA,QAAA,MAAA,UAAA,QAAA,MAAA,UAAA,QAAA,MAAA,aCHA,EAAA,qBAAA,UAAA,oBAAA,uBAAA,cAAA,kBAAA,qBAAA,0BAAA,oBAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,wBACA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,0BACA,GAAA,qBAAA,aACA,EAAA,qBACA,EAAA,IAAA,SAAA,EAAA,GACA,EAAA,MACA,KAAA,cAAA,EACA,GAAA,EAAA,SACA,EAAA,EAAA,IAEA,KAAA,WAAA,SAAA,cAAA,OACA,KAAA,YAAA,EAAA,KAAA,YACA,KAAA,YAAA,IAAA,WAAA,YACA,KAAA,YAAA,IAAA,OAAA,GACA,KAAA,YAAA,IAAA,MAAA,GACA,KAAA,mBAAA,EACA,EAAA,QAAA,EACA,EAAA,KAAA,KAAA,GAEA,IAAA,GAAA,EAAA,GAwGA,OAvGA,GAAA,EAAA,GACA,4BAAA,EACA,mBAAA,WACA,GAAA,GAAA,EAAA,KAAA,SACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,QAAA,EAAA,WAEA,yBAAA,WACA,GAAA,GAAA,SAAA,cAAA,MAWA,OAVA,GAAA,GAAA,KACA,QAAA,SACA,QAAA,eACA,OAAA,eACA,SAAA,WACA,KAAA,EACA,IAAA,EACA,MAAA,MACA,OAAA,QAEA,GAEA,cAAA,WACA,IAAA,KAAA,kBAAA,CAGA,KAAA,mBAAA,CACA,IAAA,GAAA,KAAA,0BACA,MAAA,WAAA,YAAA,KAAA,UACA,EAAA,YAAA,KAAA,UACA,SAAA,KAAA,YAAA,EACA,IAAA,GAAA,KAAA,oBACA,MAAA,eAAA,GACA,KAAA,YAAA,MAAA,EAAA,YACA,KAAA,YAAA,OAAA,EAAA,aACA,SAAA,KAAA,YAAA,GACA,EAAA,YAAA,KAAA,UACA,KAAA,WAAA,YAAA,KAAA,UACA,KAAA,mBAAA,IAEA,cAAA,WACA,MAAA,MAAA,YAEA,iBAAA,aAEA,mBAAA,SAAA,GACA,EAAA,KAAA,kBAAA,EAAA,YAAA,KAAA,aAEA,UAAA,WACA,OAAA,GAEA,WAAA,SAAA,GAUA,MATA,MAAA,WAAA,IACA,KAAA,UACA,KAAA,WAAA,YAAA,KAAA,UAEA,KAAA,SAAA,EACA,KAAA,UAAA,EAAA,GACA,KAAA,WAAA,YAAA,KAAA,UACA,KAAA,iBAEA,MAEA,WAAA,WACA,MAAA,MAAA,UAEA,eAAA,SAAA,GACA,KAAA,eAAA,IACA,KAAA,aAAA,IAGA,cAAA,WACA,MAAA,MAAA,cAEA,GAAA,SAAA,GACA,KAAA,WAAA,IAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,aAAA,GACA,KAAA,eAAA,IAEA,GAAA,eACA,MAAA,MAAA,iBAEA,oBAAA,SAAA,GACA,MAAA,wBAAA,EAAA,KAAA,WAAA,UAAA,QAAA,KAAA,QAAA,SAAA,EAAA,OAEA,cAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,cAAA,KAAA,KAAA,EAAA,EAOA,OANA,MAAA,cACA,IACA,GAAA,OAEA,GAAA,EAAA,qBAEA,KAGA,EAAA,UAAA,cACA,UACA,eACA,OAAA,EAAA,UAAA,cACA,EAAA,UAAA,qBAAA,EAAA,KACA,ICjIA,EAAA,sBAAA,UAAA,kBAAA,qBAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,qBAAA,YACA,GAAA,KAAA,SAAA,GAOA,GANA,KAAA,QAAA,EAAA,EAAA,QACA,QAAA,WACA,MAAA,IAEA,MAAA,UACA,GACA,gBAAA,GAAA,QAAA,CACA,GAAA,GAAA,EAAA,OACA,GAAA,QAAA,WACA,MAAA,IAGA,EAAA,KAAA,KAAA,GACA,KAAA,eACA,GACA,KAAA,OAAA,GAGA,IAAA,GAAA,EAAA,IAyBA,OAxBA,GAAA,UAAA,EAAA,EAAA,WACA,EAAA,UAAA,aAAA,WASA,IAAA,GARA,GAAA,EAAA,IAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,OAEA,EAAA,EAAA,IAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,IAAA,EAAA,UAEA,GAAA,EAAA,GAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,GAAA,KAAA,EACA,QAAA,KAAA,QAAA,MACA,EAAA,IAAA,EACA,WAAA,KAAA,QAAA,MACA,EAAA,OAAA,EAEA,EAAA,QAAA,EAEA,GAAA,EAAA,MAAA,KAAA,QAAA,QAAA,EAAA,KAAA,SAAA,EAAA,MAGA,EAAA,UAAA,YAAA,EACA,ICjDA,EAAA,qBAAA,UAAA,mBAAA,SAAA,GAiDA,QAAA,GAAA,GACA,MAAA,gBAAA,GACA,EAAA,KAEA,EAnDA,GAAA,GAAA,EAAA,mBACA,GACA,SACA,SACA,WAEA,GACA,SACA,cAEA,GACA,SACA,OACA,SACA,UACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEA,GACA,SACA,kBACA,kBACA,YACA,iBACA,gBACA,WACA,iBACA,iBAoBA,GAAA,KAAA,SAAA,GACA,KAAA,OAAA,SACA,KAAA,SAAA,SACA,KAAA,QAAA,SACA,KAAA,SAAA,SACA,KAAA,MAAA,OACA,KAAA,YAAA,SACA,KAAA,QAAA,YACA,IAAA,SAAA,EACA,IAAA,WAAA,EAIA,IAAA,GAHA,GAAA,EAAA,OAAA,EAAA,MAAA,0BAAA,SAAA,GACA,MAAA,GAAA,OAAA,IAEA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,EACA,IAAA,WAAA,OACA,IAAA,EAAA,SAAA,EAAA,GAEA,KAAA,OAAA,MACA,IAAA,EAAA,SAAA,EAAA,GAEA,KAAA,SAAA,MACA,IAAA,EAAA,SAAA,EAAA,GAEA,KAAA,QAAA,MACA,CAAA,IAAA,EAAA,SAAA,EAAA,GAGA,CACA,GAAA,GAAA,EAAA,MAAA,KACA,MAAA,MAAA,EAAA,GACA,EAAA,KACA,KAAA,YAAA,EAAA,IAEA,KAAA,QAAA,EAAA,MAAA,EAAA,GAAA,KAAA,IACA,OARA,KAAA,SAAA,OAWA,WAAA,IACA,SAAA,EAAA,QACA,KAAA,OAAA,EAAA,OAEA,SAAA,EAAA,UACA,KAAA,SAAA,EAAA,SAEA,SAAA,EAAA,SACA,KAAA,QAAA,GAAA,EAAA,QAEA,SAAA,EAAA,UACA,KAAA,SAAA,EAAA,SAEA,SAAA,EAAA,OACA,KAAA,MAAA,EAAA,EAAA,OAEA,SAAA,EAAA,aACA,KAAA,YAAA,EAAA,YAEA,SAAA,EAAA,SACA,KAAA,QAAA,EAAA,QAqBA;KAAA,MAAA,KAAA,mBAGA,IAAA,GAAA,EAAA,IAwFA,OAvFA,GAAA,WACA,YAAA,EACA,QAAA,WACA,MAAA,MAAA,OAEA,SAAA,WACA,MAAA,MAAA,QAEA,WAAA,WACA,MAAA,MAAA,UAEA,UAAA,WACA,MAAA,MAAA,SAEA,WAAA,WACA,MAAA,MAAA,UAEA,QAAA,WACA,MAAA,MAAA,OAEA,cAAA,WACA,MAAA,MAAA,aAEA,UAAA,WACA,MAAA,MAAA,SAEA,GAAA,QACA,MAAA,MAAA,WAEA,GAAA,SACA,MAAA,MAAA,YAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,UACA,MAAA,MAAA,aAEA,GAAA,WACA,MAAA,MAAA,cAEA,GAAA,QACA,MAAA,MAAA,WAEA,GAAA,cACA,MAAA,MAAA,iBAEA,GAAA,UACA,MAAA,MAAA,aAEA,KAAA,SAAA,GACA,MAAA,IAAA,GAAA,EAAA,QACA,MAAA,KAAA,OACA,QAAA,KAAA,SACA,OAAA,KAAA,QACA,QAAA,KAAA,SACA,KAAA,KAAA,MACA,WAAA,KAAA,YACA,OAAA,KAAA,SACA,KAEA,iBAAA,WACA,GAAA,GAAA,EAkBA,OAjBA,WAAA,KAAA,SACA,GAAA,KAAA,OAAA,KAEA,WAAA,KAAA,WACA,GAAA,KAAA,SAAA,KAEA,WAAA,KAAA,UACA,GAAA,KAAA,QAAA,KAEA,WAAA,KAAA,WACA,GAAA,KAAA,SAAA,KAEA,GAAA,KAAA,MACA,WAAA,KAAA,cACA,GAAA,IAAA,KAAA,aAEA,GAAA,IAAA,KAAA,SAGA,MAAA,WACA,MAAA,MAAA,YAGA,EAAA,QAAA,GAAA,GACA,IClOA,EAAA,sBAAA,UAAA,oBAAA,uBAAA,cAAA,cAAA,kBAAA,qBAAA,0BAAA,yBAAA,0BAAA,oBAAA,oBAAA,qBAAA,SAAA,GAsUA,QAAA,GAAA,EAAA,EAAA,GACA,GAAA,GAAA,MAAA,EACA,EAAA,MAAA,CACA,GAAA,UAAA,GAAA,WACA,MAAA,MAAA,MAAA,IAEA,EAAA,UAAA,GAAA,SAAA,GACA,GAAA,KACA,GAAA,GAAA,CACA,IAAA,GAAA,KAAA,MAAA,KAAA,EAEA,OADA,MAAA,QAAA,GACA,MAEA,OAAA,eAAA,EAAA,UAAA,GACA,IAAA,EAAA,UAAA,GACA,IAAA,EAAA,UAAA,KAnVA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,wBACA,EAAA,EAAA,eACA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,2BACA,EAAA,EAAA,0BACA,EAAA,EAAA,0BACA,GAAA,qBAAA,aACA,EAAA,qBACA,EAAA,oBACA,IAAA,GAAA,SAAA,gBAAA,6BAAA,MACA,GAAA,aAAA,QAAA,KACA,EAAA,aAAA,SAAA,KACA,EAAA,aAAA,QAAA,0FACA,IAAA,GAAA,SAAA,gBAAA,6BAAA,OACA,GAAA,YAAA,SAAA,eAAA,KACA,EAAA,YAAA,EACA,IACA,GADA,EAAA,KAAA,OAAA,UAAA,UAAA,QAAA,0BAAA,KAAA,OAAA,UAAA,UAAA,QAAA,WAEA,GAAA,CACA,GAAA,KAAA,SAAA,EAAA,GACA,KAAA,MAAA,GACA,KAAA,MAAA,EAAA,KAAA,QACA,KAAA,WAAA,MACA,KAAA,cAAA,SACA,KAAA,QAAA,SAAA,KAAA,SAAA,EAAA,KAAA,QACA,KAAA,qBACA,EAAA,OACA,EAAA,IACA,EAAA,KAGA,EAAA,MACA,SAAA,EAAA,OACA,EAAA,KAAA,WAEA,SAAA,IACA,EAAA,KAAA,GAEA,KAAA,sBACA,EAAA,KAAA,KAAA,GACA,KAAA,kBAEA,IAAA,GAAA,EAAA,IAyVA,OAxVA,GAAA,EAAA,GACA,6BAAA,EACA,QAAA,SAAA,GAKA,MAJA,KAAA,KAAA,QACA,KAAA,MAAA,EACA,KAAA,kBAEA,MAEA,QAAA,WACA,MAAA,MAAA,OAEA,gBAAA,SAAA,GAQA,MANA,KAAA,KAAA,gBACA,KAAA,cAAA,EACA,KAAA,kBACA,KAAA,cAAA,kBAAA,KAAA,OACA,KAAA,kBAEA,MAEA,gBAAA,WACA,MAAA,MAAA,eAEA,gBAAA,WAIA,QAAA,GAAA,EAAA,GACA,GAAA,GAAA,EAAA,SAAA,EAAA,oBAAA,EACA,IAAA,IAAA,EAEA,GADA,GAAA,EACA,EACA,EAAA,oBAAA,KAAA,OAGA,IADA,EAAA,oBAAA,OAAA,EAAA,QAAA,EAAA,oBAAA,GAAA,GACA,EAAA,WAAA,EAEA,KADA,GAAA,SAAA,KACA,GAAA,OAAA,2CAAA,EAAA,KAAA,wFAbA,GAAA,GAAA,IACA,MAAA,iBAAA,aAAA,KAAA,aACA,IAAA,IAAA,CAmBA,IAHA,EAAA,SAAA,KAAA,gBAAA,KAAA,QAAA,EAAA,QACA,GAAA,KAAA,QAAA,EAAA,KACA,GAAA,KAAA,aAAA,KAAA,sBAAA,EAAA,KACA,IAAA,KAAA,oBAAA,OACA,KAAA,IAAA,OAAA,0GAEA,IACA,KAAA,0BAGA,eAAA,WACA,KAAA,SAAA,GAAA,aAAA,KAAA,cACA,KAAA,eAAA,KAAA,wBACA,WAAA,KAAA,cACA,KAAA,eAAA,KAAA,2BACA,SAAA,KAAA,eAAA,eAAA,KAAA,cACA,KAAA,eAAA,KAAA,wBAEA,KAAA,eAAA,KAAA,wBAEA,KAAA,mBAEA,iBAAA,WACA,KAAA,kBAEA,eAAA,WACA,KAAA,kBAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,SACA,KAAA,WAAA,KAAA,eACA,EAAA,QAAA,KAAA,MAAA,WACA,EAAA,aAAA,KAAA,aAEA,KAAA,YACA,KAAA,iBAAA,GACA,EAAA,SAAA,KAAA,MAAA,EAAA,GACA,KAAA,gBAAA,IAEA,KAAA,cACA,KAAA,mBAAA,GACA,EAAA,WAAA,KAAA,MAAA,EAAA,GACA,KAAA,kBAAA,KAGA,WAAA,WACA,KAAA,IAAA,OAAA,4CAEA,kBAAA,WACA,GAAA,GAAA,SAAA,gBAAA,6BAAA,OAEA,OADA,GAAA,YAAA,SAAA,eAAA,KACA,GAEA,kBAAA,SAAA,GACA,QAAA,KAAA,WACA,EAAA,UAAA,UAAA,KAAA,MACA,EAAA,aAAA,QAAA,KAAA,kBAAA,KAAA,qBACA,EAAA,aAAA,oBAAA,cACA,EAAA,aAAA,YAAA,KAAA,YACA,EAAA,aAAA,cAAA,KAAA,MAAA,aACA,EAAA,aAAA,YAAA,KAAA,MAAA,WACA,EAAA,aAAA,aAAA,KAAA,MAAA,YACA,EAAA,aAAA,cAAA,KAAA,MAAA,aACA,EAAA,aAAA,eAAA,KAAA,MAAA,eAEA,cAAA,SAAA,EAAA,GACA,KAAA,cAAA,EAAA,GACA,KAAA,cAAA,EAAA,GACA,KAAA,gBAAA,EAAA,IAEA,cAAA,SAAA,EAAA,GACA,KAAA,iBAAA,EAAA,GACA,KAAA,mBAAA,EAAA,IAEA,4BAAA,EACA,cAAA,WACA,MAAA,UAAA,cAAA,QAEA,iBAAA,SAAA,GACA,GAAA,GAAA,EAAA,EACA,GAAA,MAAA,KAAA,KAAA,UACA,EAAA,MAAA,MAAA,KAAA,aACA,EAAA,MAAA,KAAA,gBAAA,OACA,EAAA,OAAA,KAAA,gBAAA,QACA,EAAA,QACA,EAAA,YAAA,KAAA,kBACA,EAAA,aAAA,MAAA,KAAA,aAEA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,gBAAA,KACA,EAAA,EAAA,YAAA,YAAA,EAAA,YAAA,EAAA,GACA,GAAA,KAAA,kBAAA,EAAA,IAEA,eAAA,WACA,GAAA,KAAA,QAAA,CACA,GAAA,GAAA,SAAA,cAAA,OAEA,OADA,GAAA,UAAA,KAAA,KACA,EAEA,MAAA,UAAA,eAAA,KAAA,OAGA,qBAAA,WACA,GAAA,GAAA,KACA,EAAA,KAAA,sBACA,OAAA,KAAA,EAAA,OAAA,IAAA,EAAA,OACA,EAEA,EAAA,KAAA,qBAAA,SAAA,GACA,EAAA,KAAA,EAAA,KACA,EAAA,UAAA,EAAA,UACA,EAAA,SAAA,EAAA,KAAA,EAAA,KAEA,UAAA,GACA,WAAA,IACA,aAAA,GAAA,KAAA,IAAA,KAAA,IAAA,EAAA,MAAA,KAAA,IAAA,EAAA,MAAA,KAAA,IAAA,EAAA,MAAA,KAAA,IAAA,EAAA,UAGA,uBAAA,WACA,GAAA,GAAA,EAAA,cAGA,OAFA,GAAA,KAAA,KAAA,KACA,EAAA,UAAA,KAAA,UACA,EAAA,YAAA,KAAA,MAAA,OAEA,qBAAA,WACA,IAAA,EAAA,WAAA,CACA,IAAA,SAAA,KAEA,CACA,GAAA,EACA,MAAA,GAAA,OAEA,MAAA,IAAA,OAAA,4EALA,SAAA,KAAA,YAAA,GASA,KAAA,kBAAA,EACA,IAAA,GAAA,EAAA,SACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,EAAA,SAEA,wBAAA,WACA,IAAA,EACA,MAAA,GAAA,OAEA,UAAA,KAAA,MAAA,mBACA,EAAA,QAAA,KAAA,OACA,KAAA,MAAA,iBAAA,EAAA,YAEA,IAAA,GAAA,KAAA,yBACA,EAAA,KAAA,MAAA,gBACA,OAAA,IAAA,GAAA,EAAA,EAAA,KAAA,EAAA,EAAA,OAEA,qBAAA,WACA,GAAA,GAAA,KACA,EAAA,QAAA,KAAA,UACA,EAAA,SAAA,cAAA,MACA,GAAA,GAAA,KACA,SAAA,WACA,KAAA,EACA,IAAA,EACA,QAAA,eACA,OAAA,eACA,QAAA,UAEA,IAAA,GAAA,SAAA,cAAA,OACA,GAAA,GAAA,IAAA,OAAA,KAAA,WACA,EAAA,YAAA,KAAA,kBACA,EAAA,aAAA,YAAA,KAAA,WACA,IAAA,GAAA,SAAA,cAAA,MACA,GAAA,GAAA,KACA,iBAAA,WACA,QAAA,eACA,MAAA,EACA,OAAA,EAAA,KACA,OAAA,eACA,QAAA,iBAEA,EAAA,YAAA,GACA,EAAA,YAAA,GACA,SAAA,KAAA,YAAA,EACA,IAAA,GAAA,EAAA,wBACA,EAAA,EAAA,wBACA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,MAAA,EAAA,IACA,UAAA,KAAA,YAAA,EACA,IAAA,GAAA,EAAA,MAAA,EAAA,IACA,OAAA,GAAA,SAAA,GAAA,EAAA,IAEA,QAAA,SAAA,GAKA,MAJA,MAAA,OAAA,IACA,KAAA,MAAA,YAAA,GAAA,KAAA,EAAA,GAAA,GAAA,KAAA,GACA,KAAA,kBAEA,MAEA,QAAA,WACA,MAAA,MAAA,MAAA,WAEA,aAAA,SAAA,GAGA,MAFA,MAAA,WAAA,EACA,KAAA,iBACA,MAEA,aAAA,WACA,MAAA,MAAA,YAEA,UAAA,WACA,OAAA,GAEA,oBAAA,SAAA,GACA,MAAA,sBAAA,EAAA,KAAA,MAAA,QAAA,KAAA,QAAA,OAAA,EAAA,OAEA,cAAA,SAAA,EAAA,GAIA,QAAA,GAAA,EAAA,EAAA,GACA,IACA,GAAA,OAKA,GAHA,GAAA,gBAAA,GAGA,EAAA,EAAA,KAAA,EAFA,EAAA,EAAA,MAAA,EAAA,IARA,GAAA,GAAA,EAAA,UAAA,cAAA,KAAA,KAAA,EAAA,EAmBA,OAlBA,GAAA,KAAA,yBAAA,EAAA,GACA,EAAA,KAAA,0BAAA,EAAA,GAWA,KAAA,QAAA,GAAA,GAAA,MAAA,WACA,EAAA,OAAA,KAAA,KAAA,QAAA,KAAA,QAEA,QAAA,KAAA,YACA,EAAA,YAAA,KAAA,YAEA,KAqBA,EAAA,aAAA,aAAA,UACA,EAAA,aAAA,aAAA,UACA,EAAA,cAAA,cAAA,WACA,EAAA,YAAA,YAAA,SACA,EAAA,WAAA,WAAA,QACA,EAAA,aAAA,aAAA,cACA,EAAA,UAAA,cACA,eACA,OACA,OACA,aACA,aACA,cACA,YACA,WACA,aACA,aACA,OAAA,EAAA,UAAA,cACA,EAAA,UAAA,qBACA,EAAA,OACA,EAAA,IACA,EAAA,KAEA,EAAA,UAAA,mCACA,EAAA,IACA,EAAA,KAEA,OAAA,eAAA,EAAA,UAAA,QACA,IAAA,EAAA,UAAA,QACA,IAAA,EAAA,UAAA,UAEA,OAAA,eAAA,EAAA,UAAA,QACA,IAAA,EAAA,UAAA,QACA,IAAA,EAAA,UAAA,UAEA,OAAA,eAAA,EAAA,UAAA,aACA,IAAA,EAAA,UAAA,aACA,IAAA,EAAA,UAAA,eAEA,OAAA,eAAA,EAAA,UAAA,gBACA,IAAA,EAAA,UAAA,gBACA,IAAA,EAAA,UAAA,kBAEA,EAAA,GACA,EAAA,GACA,GAAA,EACA,EAAA,GAAA,GAAA,KAAA,aAAA,SACA,GAAA,EACA,ICxYA,EAAA,0BAAA,UAAA,oBAAA,kBAAA,sBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,qBACA,GAAA,SAAA,SAAA,EAAA,GACA,KAAA,SAAA,EACA,EAAA,KAAA,KAAA,EAAA,GAEA,IAAA,GAAA,EAAA,QAEA,OADA,GAAA,EAAA,MACA,ICXA,EAAA,uBAAA,UAAA,oBAAA,cAAA,kBAAA,qBAAA,0BAAA,oBAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,eACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,0BACA,GAAA,qBAAA,aACA,EAAA,qBACA,EAAA,MAAA,SAAA,EAAA,GAEA,EAAA,MACA,IACA,EAAA,MAAA,EAEA,IAAA,GAAA,IACA,MAAA,aAAA,WACA,EAAA,kBACA,EAAA,OAAA,oBAAA,OAAA,EAAA,eAEA,EAAA,KAAA,KAAA,GAEA,IAAA,GAAA,EAAA,KAiHA,OAhHA,GAAA,EAAA,GACA,4BAAA,EACA,gBAAA,WACA,KAAA,eAAA,GAAA,GAAA,EAAA,EAAA,KAAA,gBAAA,KAAA,oBAEA,SAAA,WACA,MAAA,MAAA,QAEA,SAAA,SAAA,GAEA,GAAA,KAAA,SAAA,IAAA,gBAAA,KAAA,KAAA,QAAA,IAAA,KAAA,OAAA,KAAA,CAIA,GAHA,KAAA,QACA,KAAA,OAAA,oBAAA,OAAA,KAAA,cAEA,gBAAA,GAAA,CACA,GAAA,GAAA,CACA,GAAA,SAAA,cAAA,OACA,EAAA,iBAAA,OAAA,KAAA,cACA,EAAA,IAAA,MACA,aAAA,oBACA,EAAA,OAAA,EAAA,QACA,EAAA,iBAAA,OAAA,KAAA,cAGA,aAAA,mBACA,KAAA,eAAA,yBACA,KAAA,qBAAA,EAAA,QACA,KAAA,0BAGA,KAAA,eAAA,+BACA,MAAA,oBACA,KAAA,0BAGA,KAAA,OAAA,EACA,KAAA,kBAEA,MAAA,OAEA,cAAA,WACA,MAAA,MAAA,OAAA,OAEA,eAAA,WACA,MAAA,MAAA,OAAA,QAEA,YAAA,WACA,MAAA,MAAA,OAAA,KAEA,UAAA,WACA,OAAA,GAEA,YAAA,SAAA,GACA,EAAA,QAAA,UAAA,KAAA,OAAA,EAAA,IAEA,WAAA,WACA,KAAA,IAAA,OAAA,4BAEA,kBAAA,WACA,GAAA,GAAA,SAAA,gBAAA,6BAAA,QAGA,OAFA,GAAA,aAAA,IAAA,GACA,EAAA,aAAA,IAAA,GACA,GAEA,kBAAA,SAAA,GACA,GAAA,GAAA,8BACA,GAAA,aAAA,QAAA,KAAA,gBAAA,MACA,EAAA,aAAA,SAAA,KAAA,iBAAA,MACA,EAAA,eAAA,EAAA,aAAA,KAAA,gBAEA,cAAA,WAKA,MAJA,MAAA,OAAA,MAAA,QAAA,QACA,KAAA,OAAA,MAAA,SAAA,WACA,KAAA,OAAA,MAAA,KAAA,IACA,KAAA,OAAA,MAAA,IAAA,IACA,KAAA,QAEA,iBAAA,SAAA,GACA,EAAA,MAAA,KAAA,OAAA,MACA,EAAA,IAAA,KAAA,OAAA,MAGA,mBAAA,SAAA,EAAA,GACA,EAAA,KAAA,kBAAA,EAAA,YAAA,IAEA,GAAA,OAAA,GACA,KAAA,SAAA,IAEA,GAAA,SACA,MAAA,MAAA,YAEA,oBAAA,SAAA,GACA,MAAA,wBAAA,KAAA,OAAA,IAAA,KAAA,OAAA,IAAA,QAAA,KAAA,OAAA,SAAA,OAAA,EAAA,SAGA,EAAA,UAAA,cAAA,SAAA,OAAA,EAAA,UAAA,cACA,EAAA,UAAA,qBACA,EAAA,OACA,EAAA,IACA,EAAA,KAEA,EAAA,eAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,+BACA,EAAA,6BACA,EAAA,SAAA,gBAAA,EAAA,QAMA,OALA,GAAA,aAAA,IAAA,GACA,EAAA,aAAA,IAAA,GACA,EAAA,aAAA,QAAA,EAAA,MACA,EAAA,aAAA,SAAA,EAAA,MACA,EAAA,eAAA,EAAA,aAAA,GACA,GAEA,ICvIA,EAAA,sBAAA,UAAA,oBAAA,kBAAA,qBAAA,aAAA,eAAA,SAAA,GA8FA,QAAA,GAAA,GACA,GAAA,GAAA,EAAA,cACA,EAAA,MAAA,EACA,EAAA,MAAA,EACA,EAAA,IAAA,CACA,GAAA,UAAA,GAAA,WACA,MAAA,MAAA,IAEA,EAAA,UAAA,GAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EACA,KAAA,iBACA,MAEA,OAAA,eAAA,EAAA,UAAA,GACA,IAAA,EAAA,UAAA,GACA,IAAA,EAAA,UAAA,KA3GA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,cACA,EAAA,EAAA,cACA,GAAA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,gBAAA,GACA,YAAA,IACA,KAAA,IAAA,EAAA,EACA,KAAA,IAAA,EAAA,EACA,KAAA,IAAA,EAAA,EACA,KAAA,IAAA,EAAA,EACA,EAAA,QAEA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,EAAA,QAGA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,EAAA,OAEA,EAAA,KAAA,KAAA,KAAA,kBAAA,GAEA,IAAA,GAAA,EAAA,IA6FA,OA5FA,GAAA,EAAA,GACA,QAAA,SAAA,EAAA,EAAA,EAAA,GAEA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,kBAEA,UAAA,SAAA,EAAA,GACA,gBAAA,GACA,KAAA,QAAA,EAAA,EAAA,KAAA,IAAA,KAAA,KAEA,KAAA,QAAA,EAAA,EAAA,EAAA,EAAA,KAAA,IAAA,KAAA,MAGA,GAAA,IAAA,GACA,KAAA,UAAA,IAEA,GAAA,MACA,MAAA,IAAA,GAAA,KAAA,IAAA,KAAA,MAEA,UAAA,SAAA,EAAA,GACA,gBAAA,GACA,KAAA,QAAA,KAAA,IAAA,KAAA,IAAA,EAAA,GAEA,KAAA,QAAA,KAAA,IAAA,KAAA,IAAA,EAAA,EAAA,EAAA,IAGA,GAAA,IAAA,GACA,KAAA,UAAA,IAEA,GAAA,MACA,MAAA,IAAA,GAAA,KAAA,IAAA,KAAA,MAEA,gBAAA,WAKA,MAAA,GAAA,YAAA,KAAA,IAAA,KAAA,IAAA,KAAA,IAAA,KAAA,MAEA,eAAA,WACA,KAAA,SAAA,KAAA,oBAEA,kBAAA,WACA,OAAA,GAEA,kBAAA,WACA,MAAA,UAAA,gBAAA,6BAAA,SAEA,kBAAA,SAAA,GACA,EAAA,aAAA,KAAA,KAAA,KACA,EAAA,aAAA,KAAA,KAAA,KACA,EAAA,aAAA,KAAA,KAAA,KACA,EAAA,aAAA,KAAA,KAAA,KACA,EAAA,aAAA,QAAA,KAAA,kBAAA,KAAA,sBAEA,oBAAA,SAAA,GACA,MAAA,qBAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,MAAA,EAAA,SAqBA,EAAA,MACA,EAAA,MACA,EAAA,MACA,EAAA,MACA,EAAA,UAAA,cACA,KACA,KACA,KACA,KACA,KACA,MACA,OAAA,EAAA,UAAA,cACA,IC5HA,EAAA,2BAAA,UAAA,oBAAA,kBAAA,qBAAA,aAAA,eAAA,SAAA,GAwIA,QAAA,GAAA,GACA,GAAA,GAAA,UAAA,EACA,EAAA,UAAA,EACA,EAAA,QAAA,CACA,GAAA,UAAA,GAAA,WACA,MAAA,MAAA,IAEA,EAAA,UAAA,GAAA,SAAA,GAGA,MAFA,MAAA,GAAA,EACA,KAAA,sBACA,MAEA,OAAA,eAAA,EAAA,UAAA,OAAA,GACA,IAAA,EAAA,UAAA,GACA,IAAA,EAAA,UAAA,KApJA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,aACA,GAAA,eACA,EAAA,UAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,gBAAA,IACA,EAAA,EACA,KAAA,OAAA,EAAA,OAAA,EACA,KAAA,OAAA,EAAA,OAAA,EACA,KAAA,WAAA,EAAA,UACA,KAAA,YAAA,EAAA,WACA,KAAA,cAAA,EAAA,cAAA,EACA,KAAA,eAAA,EAAA,eAAA,GACA,UAAA,OAAA,GACA,KAAA,OAAA,EACA,KAAA,OAAA,EACA,KAAA,WAAA,EACA,KAAA,YAAA,EACA,KAAA,cAAA,EACA,KAAA,eAAA,EACA,EAAA,QAEA,KAAA,OAAA,EACA,KAAA,OAAA,EACA,KAAA,WAAA,EACA,KAAA,YAAA,EACA,KAAA,cAAA,EACA,KAAA,eAAA,EACA,EAAA,OAEA,EAAA,KAAA,KAAA,KAAA,uBAAA,GAEA,IAAA,GAAA,EAAA,SAoIA,OAnIA,GAAA,EAAA,GACA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,KAAA,OAAA,EACA,KAAA,OAAA,EACA,KAAA,WAAA,EACA,KAAA,YAAA,EACA,KAAA,cAAA,GAAA,EACA,KAAA,eAAA,GAAA,EACA,KAAA,uBAEA,UAAA,WACA,MAAA,KAAA,KAAA,eAAA,IAAA,KAAA,gBAEA,qBAAA,WAOA,GAAA,KAAA,YAAA,CACA,GAAA,GAAA,KAAA,IAAA,KAAA,WAAA,EAAA,KAAA,YAAA,EACA,OAAA,GAAA,eAAA,KAAA,OAAA,KAAA,OAAA,KAAA,WAAA,KAAA,YAAA,KAAA,IAAA,EAAA,KAAA,eAAA,KAAA,IAAA,EAAA,KAAA,iBAEA,MAAA,GAAA,UAAA,KAAA,OAAA,KAAA,OAAA,KAAA,WAAA,KAAA,cAGA,oBAAA,WACA,KAAA,SAAA,KAAA,yBAEA,mBAAA,WACA,MAAA,MAAA,QAAA,KAAA,OAAA,OAAA,QAAA,KAAA,mBAAA,UAAA,GAAA,KAAA,OAAA,QAEA,kBAAA,SAAA,GACA,GAAA,GAAA,EAAA,GAAA,KAAA,QAAA,EAAA,GAAA,KAAA,OAAA,KAAA,YAAA,EAAA,GAAA,KAAA,QAAA,EAAA,GAAA,KAAA,OAAA,KAAA,WACA,KAAA,IAAA,KAAA,YACA,MAAA,EAEA,IAAA,GAAA,EAAA,GAAA,CAQA,IAPA,EAAA,EAAA,KAAA,OAAA,KAAA,WAAA,GACA,EAAA,KAAA,OAAA,KAAA,cACA,EAAA,GAAA,EAAA,GAAA,IAEA,EAAA,KAAA,OAAA,KAAA,WAAA,KAAA,cACA,EAAA,GAAA,EAAA,GAAA,GAEA,EACA,OAAA,CASA,IAPA,EAAA,EAAA,KAAA,OAAA,KAAA,YAAA,GACA,EAAA,KAAA,OAAA,KAAA,eACA,EAAA,GAAA,EAAA,GAAA,IAEA,EAAA,KAAA,OAAA,KAAA,YAAA,KAAA,eACA,EAAA,GAAA,EAAA,GAAA,GAEA,EACA,OAAA,CAEA,IAAA,GAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,CAKA,OAJA,IAAA,KAAA,cACA,GAAA,KAAA,eACA,GAAA,EACA,GAAA,EACA,GAAA,EAAA,GAEA,YAAA,SAAA,GACA,GAAA,GAAA,EAAA,OACA,OAAA,MAAA,YACA,EAAA,UAAA,YAAA,KAAA,KAAA,IAEA,KAAA,QACA,KAAA,iBAAA,GACA,EAAA,SAAA,KAAA,OAAA,KAAA,OAAA,KAAA,WAAA,KAAA,aACA,KAAA,gBAAA,IAEA,KAAA,UACA,KAAA,mBAAA,GACA,EAAA,WAAA,KAAA,OAAA,KAAA,OAAA,KAAA,WAAA,KAAA,aACA,KAAA,kBAAA,IARA,SAWA,kBAAA,WACA,MAAA,UAAA,gBAAA,6BAAA,SAEA,kBAAA,SAAA,GACA,EAAA,aAAA,IAAA,KAAA,QACA,EAAA,aAAA,IAAA,KAAA,QACA,EAAA,aAAA,QAAA,KAAA,YACA,EAAA,aAAA,SAAA,KAAA,aACA,EAAA,aAAA,KAAA,KAAA,eACA,EAAA,aAAA,KAAA,KAAA,gBACA,EAAA,aAAA,QAAA,KAAA,kBAAA,KAAA,sBAEA,oBAAA,SAAA,GACA,MAAA,0BAAA,KAAA,OAAA,KAAA,KAAA,OAAA,KAAA,KAAA,WAAA,KAAA,KAAA,YAAA,KAAA,KAAA,cAAA,KAAA,KAAA,eAAA,MAAA,EAAA,SAoBA,EAAA,KACA,EAAA,KACA,EAAA,SACA,EAAA,UACA,EAAA,YACA,EAAA,aACA,EAAA,UAAA,cACA,QACA,QACA,YACA,aACA,eACA,iBACA,OAAA,EAAA,UAAA,cACA,ICvKA,EAAA,uBAAA,UAAA,oBAAA,kBAAA,0BAAA,cAAA,SAAA,GAEA,GAAA,GAAA,EAAA,qBACA,EAAA,EAAA,mBACA,EAAA,EAAA,0BACA,GAAA,cACA,EAAA,MAAA,SAAA,GACA,EAAA,KAAA,KAAA,KAAA,KAAA,IAAA,IAAA,GAEA,IAAA,GAAA,EAAA,KACA,OAAA,GAAA,EAAA,KCVA,EAAA,sBAAA,UAAA,kBAAA,qBAAA,qBAAA,SAAA,GAEA,GAAA,GAAA,EAAA,mBACA,EAAA,EAAA,sBACA,EAAA,EAAA,qBAAA,YACA,GAAA,KAAA,SAAA,GAOA,GANA,KAAA,QAAA,EAAA,EAAA,QACA,QAAA,WACA,MAAA,IAEA,MAAA,UACA,GACA,gBAAA,GAAA,QAAA,CACA,GAAA,GAAA,EAAA,OACA,GAAA,QAAA,WACA,MAAA,IAGA,EAAA,KAAA,KAAA,GACA,KAAA,eACA,GACA,KAAA,OAAA,GAGA,IAAA,GAAA,EAAA,IAyBA,OAxBA,GAAA,UAAA,EAAA,EAAA,WACA,EAAA,UAAA,aAAA,WASA,IAAA,GARA,GAAA,EAAA,IAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,QAEA,EAAA,EAAA,IAAA,EAAA,IAAA,KAAA,SAAA,SAAA,GACA,MAAA,GAAA,KAAA,EAAA,SAEA,GAAA,EAAA,GAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,CACA,GAAA,GAAA,KAAA,SAAA,EACA,GAAA,IAAA,EACA,SAAA,KAAA,QAAA,MACA,EAAA,KAAA,EACA,UAAA,KAAA,QAAA,MACA,EAAA,MAAA,EAEA,EAAA,QAAA,EAEA,GAAA,EAAA,OAAA,KAAA,QAAA,QAAA,EAAA,KAAA,SAAA,EAAA,MAGA,EAAA,UAAA,YAAA,EACA,ICjDA,EAAA,kCAAA,UAAA,oBAAA,mBAAA,SAAA,GAEA,EAAA,oBACA,IAAA,GAAA,EAAA,mBACA,EAAA,EAAA,kBAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,IAIA,IAHA,EAAA,MACA,EAAA,SAAA,EAAA,UAAA,EACA,KAAA,QAAA,gBAAA,GAAA,EAAA,GAAA,GAAA,EACA,EAAA,MAAA,CACA,KAAA,YAAA,SAAA,cAAA,OACA,KAAA,QAAA,GAAA,QAAA,EAAA,MAAA,aACA,IAAA,GAAA,SAAA,cAAA,QACA,GAAA,YAAA,SAAA,eAAA,EAAA,QACA,EAAA,aAAA,MAAA,KAAA,QAAA,IACA,KAAA,YAAA,YAAA,GACA,KAAA,YAAA,YAAA,KAAA,aAEA,MAAA,YAAA,KAAA,OAEA,MAAA,SAAA,EACA,KAAA,MAAA,EAAA,MACA,KAAA,QAAA,aAAA,WAAA,EAAA,UACA,KAAA,QAAA,MAAA,SAAA,UACA,IAAA,GAAA,EAAA,UACA,MAAA,cAAA,SAAA,GAEA,EAAA,OACA,EAAA,MAAA,IAGA,KAAA,cAAA,WAEA,EAAA,UAAA,IAEA,KAAA,aAAA,WAEA,EAAA,SAAA,IAEA,KAAA,QAAA,iBAAA,QAAA,KAAA,eACA,KAAA,QAAA,iBAAA,QAAA,KAAA,eACA,KAAA,QAAA,iBAAA,OAAA,KAAA,cACA,KAAA,sBAAA,EACA,KAAA,uBACA,KAAA,mBAAA,KAAA,WAAA,KAAA,MACA,EAAA,UAAA,iBAAA,SAAA,KAAA,oBACA,KAAA,aACA,EAAA,WAAA,iBAAA,SAAA,KAAA,oBACA,OAAA,WAAA,KAAA,WAAA,KAAA,MAAA,KAyBA,OAtBA,GAAA,WACA,YAAA,EACA,QAAA,WACA,KAAA,QAAA,oBAAA,QAAA,KAAA,eACA,KAAA,QAAA,oBAAA,QAAA,KAAA,eACA,KAAA,QAAA,oBAAA,OAAA,KAAA,cACA,KAAA,uBACA,KAAA,SAAA,UAAA,oBAAA,SAAA,KAAA,oBACA,KAAA,SAAA,WAAA,oBAAA,SAAA,KAAA,sBAGA,gBAAA,WACA,MAAA,MAAA,MAAA,qBAAA,KAAA,MAAA,WAAA,aAAA,cAEA,WAAA,WACA,GAAA,GAAA,KAAA,iBACA,MAAA,QAAA,MAAA,KAAA,EAAA,EAAA,KACA,KAAA,QAAA,MAAA,IAAA,EAAA,EAAA,KACA,KAAA,QAAA,MAAA,MAAA,EAAA,MAAA,KACA,KAAA,QAAA,MAAA,OAAA,EAAA,OAAA,OAGA,ICzEA,EAAA,sBAAA,UAAA,kBAAA,WAAA,YAAA,SAAA,GAwCA,QAAA,GAAA,GACA,GAAA,GAAA,CAKA,OAJA,MAAA,EAAA,OAAA,EAAA,OAAA,KACA,EAAA,KACA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,IAEA,KAAA,MAAA,SAAA,EAAA,IAAA,GA5CA,GAAA,GAAA,EAAA,mBACA,EAAA,EAAA,YAAA,MACA,EAAA,EAAA,YAAA,MACA,GAAA,MAAA,QAAA,GAAA,EAAA,EAAA,EAAA,GAEA,GADA,KAAA,aACA,gBAAA,GAAA,CACA,GAAA,GAAA,EAAA,QAAA,KAAA,IAAA,cACA,GAAA,EACA,EAAA,EAAA,cAAA,EACA,KACA,EAAA,IAAA,EAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,cAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,cAAA,GACA,EAAA,EAAA,OAAA,KAAA,EACA,IAAA,EAAA,CACA,EAAA,MAAA,KAAA,GACA,GAAA,CACA,QAGA,IAAA,EACA,KAAA,IAAA,OAAA,+CAAA,OAEA,CACA,GAAA,GAAA,SAAA,EAAA,EAAA,CACA,UAAA,GAAA,SAAA,EACA,KAAA,QAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,GAAA,GAAA,IAAA,GAEA,KAAA,QAAA,EAAA,EAAA,EAAA,IAKA,IAAA,GAAA,EAAA,MACA,EAAA,iBACA,EAAA,qBACA,EAAA,YAsaA,OA7ZA,GAAA,gBAEA,OAAA,gBACA,MAAA,SAAA,GACA,EAAA,QAAA,EAAA,EAAA,EAAA,MAIA,OAAA,2BACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,SAAA,EAAA,GAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,EAAA,GAAA,IAAA,MAIA,OAAA,2BACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,MAIA,OAAA,GAAA,QAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,MAIA,OAAA,GAAA,QAAA,WAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,WAAA,EAAA,QAIA,OAAA,GAAA,QAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,MAIA,OAAA,GAAA,QAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QACA,MAAA,SAAA,EAAA,GACA,EAAA,QAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,SAAA,EAAA,GAAA,IAAA,WAAA,EAAA,QAIA,EAAA,SAAA,SAAA,EAAA,EAAA,GAOA,MANA,GAAA,IACA,GAAA,GAEA,EAAA,IACA,GAAA,GAEA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAEA,EAAA,EAAA,EACA,EAEA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAEA,GAEA,EAAA,WACA,YAAA,EACA,KAAA,WACA,MAAA,IAAA,GAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAEA,OAAA,WACA,MAAA,MAAA,GAEA,OAAA,SAAA,GACA,MAAA,MAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,IAEA,GAAA,OACA,MAAA,MAAA,UAEA,GAAA,KAAA,GACA,MAAA,MAAA,OAAA,IAEA,SAAA,WACA,MAAA,MAAA,GAEA,SAAA,SAAA,GACA,MAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,EAAA,KAAA,IAEA,GAAA,SACA,MAAA,MAAA,YAEA,GAAA,OAAA,GACA,MAAA,MAAA,SAAA,IAEA,QAAA,WACA,MAAA,MAAA,GAEA,QAAA,SAAA,GACA,MAAA,MAAA,QAAA,KAAA,EAAA,KAAA,EAAA,EAAA,KAAA,IAEA,GAAA,QACA,MAAA,MAAA,WAEA,GAAA,MAAA,GACA,MAAA,MAAA,QAAA,IAEA,SAAA,WACA,MAAA,MAAA,GAEA,SAAA,SAAA,GACA,MAAA,MAAA,QAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAEA,GAAA,SACA,MAAA,MAAA,YAEA,GAAA,OAAA,GACA,MAAA,MAAA,SAAA,IAEA,QAAA,SAAA,EAAA,EAAA,EAAA,GAMA,MALA,MAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,MACA,KAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,MACA,KAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EAAA,MACA,KAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,cACA,MAEA,WAAA,WACA,GAAA,IAAA,KAAA,EACA,MAAA,OAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,GAEA,IAAA,GAAA,IAAA,KAAA,GAAA,IAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,GACA,OAAA,QAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,EAAA,KAGA,MAAA,WAEA,MAAA,MAAA,MAEA,YAAA,WAEA,GAAA,GAAA,KAAA,IAEA,IADA,KAAA,KAAA,KAAA,aACA,IAAA,KAAA,MAAA,KAAA,UAAA,OAGA,IAAA,GAFA,GAAA,KAAA,UAAA,MAAA,GACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,MAIA,aAAA,WAIA,MAAA,OAEA,eAAA,WACA,MAAA,MAAA,SAEA,QAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,IAAA,IACA,EAAA,EAAA,EAAA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EAAA,EACA,IAAA,GAAA,CAYA,OAVA,GADA,GAAA,EACA,GAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAEA,EAAA,EAAA,EAAA,EACA,KAAA,EAAA,KAAA,MAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,EAAA,KAAA,MAAA,IAAA,EAAA,SAAA,EAAA,EAAA,IACA,KAAA,EAAA,KAAA,MAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,cACA,MAEA,OAAA,SAAA,GACA,MAAA,MAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAEA,UAAA,SAAA,GACA,MAAA,IAAA,GAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAEA,YAAA,SAAA,GACA,GAAA,EAAA,GAAA,EAAA,EACA,KAAA,IAAA,OAAA,mCAAA,EAEA,OAAA,UAAA,EAAA,GAAA,GAEA,cAAA,SAAA,GACA,EAAA,KAAA,YAAA,EACA,IAAA,GAAA,KAAA,IAAA,IAAA,KAAA,MAAA,KAAA,EAAA,IACA,EAAA,KAAA,IAAA,IAAA,KAAA,MAAA,KAAA,EAAA,IACA,EAAA,KAAA,IAAA,IAAA,KAAA,MAAA,KAAA,EAAA,GACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAEA,mBAAA,SAAA,GACA,EAAA,KAAA,YAAA,EACA,IAAA,GAAA,KAAA,IAAA,IAAA,KAAA,SAAA,KAAA,MAAA,GAAA,IAAA,KAAA,YACA,EAAA,KAAA,IAAA,IAAA,KAAA,WAAA,KAAA,MAAA,GAAA,IAAA,KAAA,cACA,EAAA,KAAA,IAAA,IAAA,KAAA,UAAA,KAAA,MAAA,GAAA,IAAA,KAAA,YACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,KAAA,aAEA,YAAA,SAAA,GACA,EAAA,KAAA,YAAA,EACA,IAAA,GAAA,KAAA,IAAA,EAAA,KAAA,MAAA,EAAA,KAAA,IACA,EAAA,KAAA,IAAA,EAAA,KAAA,MAAA,EAAA,KAAA,IACA,EAAA,KAAA,IAAA,EAAA,KAAA,MAAA,EAAA,KAAA,GACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,KAAA,IAEA,iBAAA,SAAA,GACA,EAAA,KAAA,YAAA,EACA,IAAA,GAAA,KAAA,IAAA,EAAA,KAAA,SAAA,KAAA,MAAA,EAAA,KAAA,WACA,EAAA,KAAA,IAAA,EAAA,KAAA,WAAA,KAAA,MAAA,EAAA,KAAA,aACA,EAAA,KAAA,IAAA,EAAA,KAAA,UAAA,KAAA,MAAA,EAAA,KAAA,WACA,OAAA,IAAA,GAAA,EAAA,EAAA,EAAA,KAAA,aAEA,kBAAA,SAAA,GAGA,KAAA,UAAA,KAAA,IAEA,qBAAA,SAAA,GAEA,KAAA,UAAA,OAAA,EAAA,QAAA,KAAA,UAAA,GAAA,IAEA,SAAA,WACA,MAAA,MAAA,YAAA,KAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAAA,KAAA,EAAA,MAGA,EAAA,oBACA,KAAA,SACA,MAAA,SACA,KAAA,SACA,QAAA,SACA,KAAA,SACA,MAAA,SACA,KAAA,SACA,OAAA,SACA,KAAA,SACA,MAAA,SACA,OAAA,SACA,IAAA,SACA,OAAA,SACA,KAAA,SACA,MAAA,SACA,OAAA,UAEA,EAAA,eACA,UAAA,SACA,aAAA,SACA,KAAA,SACA,WAAA,SACA,MAAA,SACA,MAAA,SACA,OAAA,SACA,MAAA,SACA,eAAA,SACA,KAAA,SACA,WAAA,SACA,MAAA,SACA,UAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,MAAA,SACA,eAAA,SACA,SAAA,SACA,QAAA,SACA,KAAA,SACA,SAAA,SACA,SAAA,SACA,cAAA,SACA,SAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,eAAA,SACA,WAAA,SACA,WAAA,SACA,QAAA,SACA,WAAA,SACA,aAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,SAAA,SACA,YAAA,SACA,QAAA,SACA,WAAA,SACA,SAAA,SACA,UAAA,SACA,YAAA,SACA,YAAA,SACA,QAAA,SACA,UAAA,SACA,WAAA,SACA,KAAA,SACA,UAAA,SACA,KAAA,SACA,MAAA,SACA,YAAA,SACA,SAAA,SACA,QAAA,SACA,UAAA,SACA,OAAA,SACA,MAAA,SACA,MAAA,SACA,SAAA,SACA,cAAA,SACA,UAAA,SACA,aAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,qBAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,YAAA,SACA,cAAA,SACA,aAAA,SACA,eAAA,SACA,eAAA,SACA,eAAA,SACA,YAAA,SACA,KAAA,SACA,UAAA,SACA,MAAA,SACA,QAAA,SACA,OAAA,SACA,iBAAA,SACA,WAAA,SACA,aAAA,SACA,aAAA,SACA,eAAA,SACA,gBAAA,SACA,kBAAA,SACA,gBAAA,SACA,gBAAA,SACA,aAAA,SACA,UAAA,SACA,UAAA,SACA,SAAA,SACA,YAAA,SACA,KAAA,SACA,QAAA,SACA,MAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,cAAA,SACA,UAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,UAAA,SACA,KAAA,SACA,KAAA,SACA,KAAA,SACA,WAAA,SACA,OAAA,SACA,IAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,OAAA,SACA,WAAA,SACA,SAAA,SACA,SAAA,SACA,OAAA,SACA,OAAA,SACA,QAAA,SACA,UAAA,SACA,UAAA,SACA,KAAA,SACA,YAAA,SACA,UAAA,SACA,IAAA,SACA,KAAA,SACA,QAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,MAAA,SACA,MAAA,SACA,WAAA,SACA,OAAA,SACA,YAAA,UAEA,EAAA,MAA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","sourcesContent":["\nvar requirejs, require, define;\n(function (undef) {\n  var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice;\n  function hasProp(obj, prop) {\n    return hasOwn.call(obj, prop);\n  }\n  function normalize(name, baseName) {\n    var nameParts, nameSegment, mapValue, foundMap, foundI, foundStarMap, starI, i, j, part, baseParts = baseName && baseName.split('/'), map = config.map, starMap = map && map['*'] || {};\n    if (name && name.charAt(0) === '.') {\n      if (baseName) {\n        baseParts = baseParts.slice(0, baseParts.length - 1);\n        name = baseParts.concat(name.split('/'));\n        for (i = 0; i < name.length; i += 1) {\n          part = name[i];\n          if (part === '.') {\n            name.splice(i, 1);\n            i -= 1;\n          } else if (part === '..') {\n            if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n              break;\n            } else if (i > 0) {\n              name.splice(i - 1, 2);\n              i -= 2;\n            }\n          }\n        }\n        name = name.join('/');\n      } else if (name.indexOf('./') === 0) {\n        name = name.substring(2);\n      }\n    }\n    if ((baseParts || starMap) && map) {\n      nameParts = name.split('/');\n      for (i = nameParts.length; i > 0; i -= 1) {\n        nameSegment = nameParts.slice(0, i).join('/');\n        if (baseParts) {\n          for (j = baseParts.length; j > 0; j -= 1) {\n            mapValue = map[baseParts.slice(0, j).join('/')];\n            if (mapValue) {\n              mapValue = mapValue[nameSegment];\n              if (mapValue) {\n                foundMap = mapValue;\n                foundI = i;\n                break;\n              }\n            }\n          }\n        }\n        if (foundMap) {\n          break;\n        }\n        if (!foundStarMap && starMap && starMap[nameSegment]) {\n          foundStarMap = starMap[nameSegment];\n          starI = i;\n        }\n      }\n      if (!foundMap && foundStarMap) {\n        foundMap = foundStarMap;\n        foundI = starI;\n      }\n      if (foundMap) {\n        nameParts.splice(0, foundI, foundMap);\n        name = nameParts.join('/');\n      }\n    }\n    return name;\n  }\n  function makeRequire(relName, forceSync) {\n    return function () {\n      return req.apply(undef, aps.call(arguments, 0).concat([\n        relName,\n        forceSync\n      ]));\n    };\n  }\n  function makeNormalize(relName) {\n    return function (name) {\n      return normalize(name, relName);\n    };\n  }\n  function makeLoad(depName) {\n    return function (value) {\n      defined[depName] = value;\n    };\n  }\n  function callDep(name) {\n    if (hasProp(waiting, name)) {\n      var args = waiting[name];\n      delete waiting[name];\n      defining[name] = true;\n      main.apply(undef, args);\n    }\n    if (!hasProp(defined, name) && !hasProp(defining, name)) {\n      throw new Error('No ' + name);\n    }\n    return defined[name];\n  }\n  function splitPrefix(name) {\n    var prefix, index = name ? name.indexOf('!') : -1;\n    if (index > -1) {\n      prefix = name.substring(0, index);\n      name = name.substring(index + 1, name.length);\n    }\n    return [\n      prefix,\n      name\n    ];\n  }\n  makeMap = function (name, relName) {\n    var plugin, parts = splitPrefix(name), prefix = parts[0];\n    name = parts[1];\n    if (prefix) {\n      prefix = normalize(prefix, relName);\n      plugin = callDep(prefix);\n    }\n    if (prefix) {\n      if (plugin && plugin.normalize) {\n        name = plugin.normalize(name, makeNormalize(relName));\n      } else {\n        name = normalize(name, relName);\n      }\n    } else {\n      name = normalize(name, relName);\n      parts = splitPrefix(name);\n      prefix = parts[0];\n      name = parts[1];\n      if (prefix) {\n        plugin = callDep(prefix);\n      }\n    }\n    return {\n      f: prefix ? prefix + '!' + name : name,\n      n: name,\n      pr: prefix,\n      p: plugin\n    };\n  };\n  function makeConfig(name) {\n    return function () {\n      return config && config.config && config.config[name] || {};\n    };\n  }\n  handlers = {\n    require: function (name) {\n      return makeRequire(name);\n    },\n    exports: function (name) {\n      var e = defined[name];\n      if (typeof e !== 'undefined') {\n        return e;\n      } else {\n        return defined[name] = {};\n      }\n    },\n    module: function (name) {\n      return {\n        id: name,\n        uri: '',\n        exports: defined[name],\n        config: makeConfig(name)\n      };\n    }\n  };\n  main = function (name, deps, callback, relName) {\n    var cjsModule, depName, ret, map, i, args = [], usingExports;\n    relName = relName || name;\n    if (typeof callback === 'function') {\n      deps = !deps.length && callback.length ? [\n        'require',\n        'exports',\n        'module'\n      ] : deps;\n      for (i = 0; i < deps.length; i += 1) {\n        map = makeMap(deps[i], relName);\n        depName = map.f;\n        if (depName === 'require') {\n          args[i] = handlers.require(name);\n        } else if (depName === 'exports') {\n          args[i] = handlers.exports(name);\n          usingExports = true;\n        } else if (depName === 'module') {\n          cjsModule = args[i] = handlers.module(name);\n        } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {\n          args[i] = callDep(depName);\n        } else if (map.p) {\n          map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n          args[i] = defined[depName];\n        } else {\n          throw new Error(name + ' missing ' + depName);\n        }\n      }\n      ret = callback.apply(defined[name], args);\n      if (name) {\n        if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {\n          defined[name] = cjsModule.exports;\n        } else if (ret !== undef || !usingExports) {\n          defined[name] = ret;\n        }\n      }\n    } else if (name) {\n      defined[name] = callback;\n    }\n  };\n  requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n    if (typeof deps === 'string') {\n      if (handlers[deps]) {\n        return handlers[deps](callback);\n      }\n      return callDep(makeMap(deps, callback).f);\n    } else if (!deps.splice) {\n      config = deps;\n      if (callback.splice) {\n        deps = callback;\n        callback = relName;\n        relName = null;\n      } else {\n        deps = undef;\n      }\n    }\n    callback = callback || function () {\n    };\n    if (typeof relName === 'function') {\n      relName = forceSync;\n      forceSync = alt;\n    }\n    if (forceSync) {\n      main(undef, deps, callback, relName);\n    } else {\n      setTimeout(function () {\n        main(undef, deps, callback, relName);\n      }, 4);\n    }\n    return req;\n  };\n  req.config = function (cfg) {\n    config = cfg;\n    if (config.deps) {\n      req(config.deps, config.callback);\n    }\n    return req;\n  };\n  requirejs._defined = defined;\n  define = function (name, deps, callback) {\n    if (!deps.splice) {\n      callback = deps;\n      deps = [];\n    }\n    if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n      waiting[name] = [\n        name,\n        deps,\n        callback\n      ];\n    }\n  };\n  define.amd = { jQuery: true };\n}());\ndefine(\"almond\", function(){});\n","\ndefine('ASSERT/assert',['require'],function (require) {\n  'use strict';\n  return function assert(name, excludeByDefault) {\n    var hasName = 'assert.' + name;\n    var flagDefined = window.has && window.has(hasName) !== undefined;\n    var skipAssert = flagDefined ? !window.has(hasName) : excludeByDefault;\n    if (skipAssert) {\n      return null;\n    } else {\n      return function (predicate, message) {\n        var result = typeof predicate === 'function' ? predicate() : predicate;\n        if (!result) {\n          if (window.navigator && window.navigator.appName === 'Microsoft Internet Explorer') {\n            try {\n              throw new Error();\n            } catch (e) {\n              message = message + ', stack=\\n' + e.stack;\n            }\n          }\n          throw new Error('Assertion failed: ' + message);\n        }\n      };\n    }\n  };\n});","\ndefine('PHET_CORE/phetAllocation',['require'],function (require) {\n  'use strict';\n  return function phetAllocation(name) {\n    if (window.alloc) {\n      var stack;\n      try {\n        throw new Error();\n      } catch (e) {\n        stack = e.stack;\n      }\n      if (!window.alloc[name]) {\n        window.alloc[name] = {\n          count: 0,\n          stacks: {}\n        };\n      }\n      var log = window.alloc[name];\n      log.count++;\n      if (!log.stacks[stack]) {\n        log.stacks[stack] = 1;\n      } else {\n        log.stacks[stack] += 1;\n      }\n      log.report = function () {\n        var stacks = Object.keys(log.stacks);\n        stacks = _.sortBy(stacks, function (key) {\n          return log.stacks[key];\n        });\n        _.each(stacks, function (stack) {\n          console.log(log.stacks[stack] + ': ' + stack);\n        });\n      };\n    }\n  };\n});","\ndefine('SCENERY/scenery',['require','ASSERT/assert','PHET_CORE/phetAllocation'],function (require) {\n  'use strict';\n  window.sceneryAssert = null;\n  window.sceneryAssertExtra = require('ASSERT/assert')('scenery.extra');\n  window.sceneryLayerLog = null;\n  window.sceneryEventLog = null;\n  window.sceneryAccessibilityLog = null;\n  window.phetAllocation = require('PHET_CORE/phetAllocation');\n  var scratchCanvas = document.createElement('canvas');\n  var scratchContext = scratchCanvas.getContext('2d');\n  return {\n    assert: null,\n    scratchCanvas: scratchCanvas,\n    scratchContext: scratchContext,\n    enableLayerLogging: function () {\n      window.sceneryLayerLog = function (ob) {\n        console.log(ob);\n      };\n    },\n    disableLayerLogging: function () {\n      window.sceneryLayerLog = null;\n    },\n    enableEventLogging: function () {\n      window.sceneryEventLog = function (ob) {\n        console.log(ob);\n      };\n    },\n    disableEventLogging: function () {\n      window.sceneryEventLog = null;\n    },\n    enableAccessibilityLogging: function () {\n      window.sceneryAccessibilityLog = function (ob) {\n        console.log(ob);\n      };\n    },\n    disableAccessibilityLogging: function () {\n      window.sceneryAccessibilityLog = null;\n    }\n  };\n});","\ndefine('SCENERY/debug/DebugContext',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  function s(value) {\n    return JSON.stringify(value);\n  }\n  function log(message) {\n    console.log('context.' + message + ';');\n  }\n  function attributeGet(name) {\n    log(name);\n  }\n  function attributeSet(name, value) {\n    log(name + ' = ' + s(value));\n  }\n  function command(name, args) {\n    if (args === undefined || args.length === 0) {\n      log(name + '()');\n    } else {\n      log(name + '( ' + _.reduce(args, function (memo, arg) {\n        if (memo.length > 0) {\n          return memo + ', ' + s(arg);\n        } else {\n          return s(arg);\n        }\n      }, '') + ' )');\n    }\n  }\n  scenery.DebugContext = function DebugContext(context) {\n    this._context = context;\n    if (context && !context.ellipse) {\n      this.ellipse = context.ellipse;\n    }\n  };\n  var DebugContext = scenery.DebugContext;\n  DebugContext.prototype = {\n    constructor: DebugContext,\n    get canvas() {\n      attributeGet('canvas');\n      return this._context.canvas;\n    },\n    get width() {\n      attributeGet('width');\n      return this._context.width;\n    },\n    get height() {\n      attributeGet('height');\n      return this._context.height;\n    },\n    commit: function () {\n      command('commit');\n      this._context.commit();\n    },\n    save: function () {\n      command('save');\n      this._context.save();\n    },\n    restore: function () {\n      command('restore');\n      this._context.restore();\n    },\n    get currentTransform() {\n      attributeGet('currentTransform');\n      return this._context.currentTransform;\n    },\n    set currentTransform(transform) {\n      attributeSet('currentTransform', transform);\n      this._context.currentTransform = transform;\n    },\n    scale: function (x, y) {\n      command('scale', [\n        x,\n        y\n      ]);\n      this._context.scale(x, y);\n    },\n    rotate: function (angle) {\n      command('rotate', [angle]);\n      this._context.rotate(angle);\n    },\n    translate: function (x, y) {\n      command('translate', [\n        x,\n        y\n      ]);\n      this._context.translate(x, y);\n    },\n    transform: function (a, b, c, d, e, f) {\n      command('transform', [\n        a,\n        b,\n        c,\n        d,\n        e,\n        f\n      ]);\n      this._context.transform(a, b, c, d, e, f);\n    },\n    setTransform: function (a, b, c, d, e, f) {\n      command('setTransform', [\n        a,\n        b,\n        c,\n        d,\n        e,\n        f\n      ]);\n      this._context.setTransform(a, b, c, d, e, f);\n    },\n    resetTransform: function () {\n      command('resetTransform');\n      this._context.resetTransform();\n    },\n    get globalAlpha() {\n      attributeGet('globalAlpha');\n      return this._context.globalAlpha;\n    },\n    set globalAlpha(value) {\n      attributeSet('globalAlpha', value);\n      this._context.globalAlpha = value;\n    },\n    get globalCompositeOperation() {\n      attributeGet('globalCompositeOperation');\n      return this._context.globalCompositeOperation;\n    },\n    set globalCompositeOperation(value) {\n      attributeSet('globalCompositeOperation', value);\n      this._context.globalCompositeOperation = value;\n    },\n    get imageSmoothingEnabled() {\n      attributeGet('imageSmoothingEnabled');\n      return this._context.imageSmoothingEnabled;\n    },\n    set imageSmoothingEnabled(value) {\n      attributeSet('imageSmoothingEnabled', value);\n      this._context.imageSmoothingEnabled = value;\n    },\n    get strokeStyle() {\n      attributeGet('strokeStyle');\n      return this._context.strokeStyle;\n    },\n    set strokeStyle(value) {\n      attributeSet('strokeStyle', value);\n      this._context.strokeStyle = value;\n    },\n    get fillStyle() {\n      attributeGet('fillStyle');\n      return this._context.fillStyle;\n    },\n    set fillStyle(value) {\n      attributeSet('fillStyle', value);\n      this._context.fillStyle = value;\n    },\n    createLinearGradient: function (x0, y0, x1, y1) {\n      command('createLinearGradient', [\n        x0,\n        y0,\n        x1,\n        y1\n      ]);\n      return this._context.createLinearGradient(x0, y0, x1, y1);\n    },\n    createRadialGradient: function (x0, y0, r0, x1, y1, r1) {\n      command('createRadialGradient', [\n        x0,\n        y0,\n        r0,\n        x1,\n        y1,\n        r1\n      ]);\n      return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    },\n    createPattern: function (image, repetition) {\n      command('createPattern', [\n        image,\n        repetition\n      ]);\n      return this._context.createPattern(image, repetition);\n    },\n    get shadowOffsetX() {\n      attributeGet('shadowOffsetX');\n      return this._context.shadowOffsetX;\n    },\n    set shadowOffsetX(value) {\n      attributeSet('shadowOffsetX', value);\n      this._context.shadowOffsetX = value;\n    },\n    get shadowOffsetY() {\n      attributeGet('shadowOffsetY');\n      return this._context.shadowOffsetY;\n    },\n    set shadowOffsetY(value) {\n      attributeSet('shadowOffsetY', value);\n      this._context.shadowOffsetY = value;\n    },\n    get shadowBlur() {\n      attributeGet('shadowBlur');\n      return this._context.shadowBlur;\n    },\n    set shadowBlur(value) {\n      attributeSet('shadowBlur', value);\n      this._context.shadowBlur = value;\n    },\n    get shadowColor() {\n      attributeGet('shadowColor');\n      return this._context.shadowColor;\n    },\n    set shadowColor(value) {\n      attributeSet('shadowColor', value);\n      this._context.shadowColor = value;\n    },\n    clearRect: function (x, y, w, h) {\n      command('clearRect', [\n        x,\n        y,\n        w,\n        h\n      ]);\n      this._context.clearRect(x, y, w, h);\n    },\n    fillRect: function (x, y, w, h) {\n      command('fillRect', [\n        x,\n        y,\n        w,\n        h\n      ]);\n      this._context.fillRect(x, y, w, h);\n    },\n    strokeRect: function (x, y, w, h) {\n      command('strokeRect', [\n        x,\n        y,\n        w,\n        h\n      ]);\n      this._context.strokeRect(x, y, w, h);\n    },\n    get fillRule() {\n      attributeGet('fillRule');\n      return this._context.fillRule;\n    },\n    set fillRule(value) {\n      attributeSet('fillRule', value);\n      this._context.fillRule = value;\n    },\n    beginPath: function () {\n      command('beginPath');\n      this._context.beginPath();\n    },\n    fill: function (path) {\n      command('fill', path ? [path] : undefined);\n      this._context.fill(path);\n    },\n    stroke: function (path) {\n      command('stroke', path ? [path] : undefined);\n      this._context.stroke(path);\n    },\n    drawSystemFocusRing: function (a, b) {\n      command('drawSystemFocusRing', b ? [\n        a,\n        b\n      ] : [a]);\n      this._context.drawSystemFocusRing(a, b);\n    },\n    drawCustomFocusRing: function (a, b) {\n      command('drawCustomFocusRing', b ? [\n        a,\n        b\n      ] : [a]);\n      return this._context.drawCustomFocusRing(a, b);\n    },\n    scrollPathIntoView: function (path) {\n      command('scrollPathIntoView', path ? [path] : undefined);\n      this._context.scrollPathIntoView(path);\n    },\n    clip: function (path) {\n      command('clip', path ? [path] : undefined);\n      this._context.clip(path);\n    },\n    resetClip: function () {\n      command('resetClip');\n      this._context.resetClip();\n    },\n    isPointInPath: function (a, b, c) {\n      command('isPointInPath', c ? [\n        a,\n        b,\n        c\n      ] : [\n        a,\n        b\n      ]);\n      return this._context.isPointInPath(a, b, c);\n    },\n    fillText: function (text, x, y, maxWidth) {\n      command('fillText', maxWidth !== undefined ? [\n        text,\n        x,\n        y,\n        maxWidth\n      ] : [\n        text,\n        x,\n        y\n      ]);\n      this._context.fillText(text, x, y, maxWidth);\n    },\n    strokeText: function (text, x, y, maxWidth) {\n      command('strokeText', maxWidth !== undefined ? [\n        text,\n        x,\n        y,\n        maxWidth\n      ] : [\n        text,\n        x,\n        y\n      ]);\n      this._context.strokeText(text, x, y, maxWidth);\n    },\n    measureText: function (text) {\n      command('measureText', [text]);\n      return this._context.measureText(text);\n    },\n    drawImage: function (image, a, b, c, d, e, f, g, h) {\n      command('drawImage', c !== undefined ? e !== undefined ? [\n        image,\n        a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h\n      ] : [\n        image,\n        a,\n        b,\n        c,\n        d\n      ] : [\n        image,\n        a,\n        b\n      ]);\n      this._context.drawImage(image, a, b, c, d, e, f, g, h);\n    },\n    addHitRegion: function (options) {\n      command('addHitRegion', [options]);\n      this._context.addHitRegion(options);\n    },\n    removeHitRegion: function (options) {\n      command('removeHitRegion', [options]);\n      this._context.removeHitRegion(options);\n    },\n    createImageData: function (a, b) {\n      command('createImageData', b !== undefined ? [\n        a,\n        b\n      ] : [a]);\n      return this._context.createImageData(a, b);\n    },\n    createImageDataHD: function (a, b) {\n      command('createImageDataHD', [\n        a,\n        b\n      ]);\n      return this._context.createImageDataHD(a, b);\n    },\n    getImageData: function (sx, sy, sw, sh) {\n      command('getImageData', [\n        sx,\n        sy,\n        sw,\n        sh\n      ]);\n      return this._context.getImageData(sx, sy, sw, sh);\n    },\n    getImageDataHD: function (sx, sy, sw, sh) {\n      command('getImageDataHD', [\n        sx,\n        sy,\n        sw,\n        sh\n      ]);\n      return this._context.getImageDataHD(sx, sy, sw, sh);\n    },\n    putImageData: function (imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {\n      command('putImageData', dirtyX !== undefined ? [\n        imageData,\n        dx,\n        dy,\n        dirtyX,\n        dirtyY,\n        dirtyWidth,\n        dirtyHeight\n      ] : [\n        imageData,\n        dx,\n        dy\n      ]);\n      this._context.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n    },\n    putImageDataHD: function (imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {\n      command('putImageDataHD', dirtyX !== undefined ? [\n        imageData,\n        dx,\n        dy,\n        dirtyX,\n        dirtyY,\n        dirtyWidth,\n        dirtyHeight\n      ] : [\n        imageData,\n        dx,\n        dy\n      ]);\n      this._context.putImageDataHD(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n    },\n    get lineWidth() {\n      attributeGet('lineWidth');\n      return this._context.lineWidth;\n    },\n    set lineWidth(value) {\n      attributeSet('lineWidth', value);\n      this._context.lineWidth = value;\n    },\n    get lineCap() {\n      attributeGet('lineCap');\n      return this._context.lineCap;\n    },\n    set lineCap(value) {\n      attributeSet('lineCap', value);\n      this._context.lineCap = value;\n    },\n    get lineJoin() {\n      attributeGet('lineJoin');\n      return this._context.lineJoin;\n    },\n    set lineJoin(value) {\n      attributeSet('lineJoin', value);\n      this._context.lineJoin = value;\n    },\n    get miterLimit() {\n      attributeGet('miterLimit');\n      return this._context.miterLimit;\n    },\n    set miterLimit(value) {\n      attributeSet('miterLimit', value);\n      this._context.miterLimit = value;\n    },\n    setLineDash: function (segments) {\n      command('setLineDash', [segments]);\n      this._context.setLineDash(segments);\n    },\n    getLineDash: function () {\n      command('getLineDash');\n      return this._context.getLineDash();\n    },\n    get lineDashOffset() {\n      attributeGet('lineDashOffset');\n      return this._context.lineDashOffset;\n    },\n    set lineDashOffset(value) {\n      attributeSet('lineDashOffset', value);\n      this._context.lineDashOffset = value;\n    },\n    get font() {\n      attributeGet('font');\n      return this._context.font;\n    },\n    set font(value) {\n      attributeSet('font', value);\n      this._context.font = value;\n    },\n    get textAlign() {\n      attributeGet('textAlign');\n      return this._context.textAlign;\n    },\n    set textAlign(value) {\n      attributeSet('textAlign', value);\n      this._context.textAlign = value;\n    },\n    get textBaseline() {\n      attributeGet('textBaseline');\n      return this._context.textBaseline;\n    },\n    set textBaseline(value) {\n      attributeSet('textBaseline', value);\n      this._context.textBaseline = value;\n    },\n    get direction() {\n      attributeGet('direction');\n      return this._context.direction;\n    },\n    set direction(value) {\n      attributeSet('direction', value);\n      this._context.direction = value;\n    },\n    closePath: function () {\n      command('closePath');\n      this._context.closePath();\n    },\n    moveTo: function (x, y) {\n      command('moveTo', [\n        x,\n        y\n      ]);\n      this._context.moveTo(x, y);\n    },\n    lineTo: function (x, y) {\n      command('lineTo', [\n        x,\n        y\n      ]);\n      this._context.lineTo(x, y);\n    },\n    quadraticCurveTo: function (cpx, cpy, x, y) {\n      command('quadraticCurveTo', [\n        cpx,\n        cpy,\n        x,\n        y\n      ]);\n      this._context.quadraticCurveTo(cpx, cpy, x, y);\n    },\n    bezierCurveTo: function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      command('bezierCurveTo', [\n        cp1x,\n        cp1y,\n        cp2x,\n        cp2y,\n        x,\n        y\n      ]);\n      this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    },\n    arcTo: function (x1, y1, x2, y2, radiusX, radiusY, rotation) {\n      command('arcTo', radiusY !== undefined ? [\n        x1,\n        y1,\n        x2,\n        y2,\n        radiusX,\n        radiusY,\n        rotation\n      ] : [\n        x1,\n        y1,\n        x2,\n        y2,\n        radiusX\n      ]);\n      this._context.arcTo(x1, y1, x2, y2, radiusX, radiusY, rotation);\n    },\n    rect: function (x, y, w, h) {\n      command('rect', [\n        x,\n        y,\n        w,\n        h\n      ]);\n      this._context.rect(x, y, w, h);\n    },\n    arc: function (x, y, radius, startAngle, endAngle, anticlockwise) {\n      command('arc', [\n        x,\n        y,\n        radius,\n        startAngle,\n        endAngle,\n        anticlockwise\n      ]);\n      this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n    },\n    ellipse: function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n      command('ellipse', [\n        x,\n        y,\n        radiusX,\n        radiusY,\n        rotation,\n        startAngle,\n        endAngle,\n        anticlockwise\n      ]);\n      this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n    }\n  };\n  return DebugContext;\n});","\ndefine('DOT/dot',['require','PHET_CORE/phetAllocation'],function (require) {\n  'use strict';\n  window.phetAllocation = require('PHET_CORE/phetAllocation');\n  var dot = function dot() {\n    switch (arguments.length) {\n    case 2:\n      return new dot.Vector2(arguments[0], arguments[1]);\n    case 3:\n      return new dot.Vector3(arguments[0], arguments[1], arguments[2]);\n    case 4:\n      return new dot.Vector4(arguments[0], arguments[1], arguments[2], arguments[3]);\n    default:\n      throw new Error('dot takes 2-4 arguments');\n    }\n  };\n  dot.FastArray = window.Float64Array ? window.Float64Array : window.Array;\n  dot.assert = null;\n  return dot;\n});","\ndefine('PHET_CORE/extend',['require'],function (require) {\n  'use strict';\n  return function extend(obj) {\n    _.each(Array.prototype.slice.call(arguments, 1), function (source) {\n      if (source) {\n        for (var prop in source) {\n          Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));\n        }\n      }\n    });\n    return obj;\n  };\n});","\ndefine('PHET_CORE/inherit',['require','PHET_CORE/extend'],function (require) {\n  'use strict';\n  var extend = require('PHET_CORE/extend');\n  function inherit(supertype, subtype, prototypeProperties, staticProperties) {\n    function F() {\n    }\n    F.prototype = supertype.prototype;\n    subtype.prototype = extend(new F(), { constructor: subtype }, prototypeProperties);\n    extend(subtype, staticProperties);\n    return subtype;\n  }\n  return inherit;\n});","\ndefine('PHET_CORE/Poolable',['require','PHET_CORE/extend'],function (require) {\n  'use strict';\n  var extend = require('PHET_CORE/extend');\n  return function Poolable(type, options) {\n    var proto = type.prototype;\n    options = extend({\n      maxPoolSize: 50,\n      initialSize: 0\n    }, options);\n    var pool = type.pool = [];\n    if (options.defaultFactory) {\n      type.dirtyFromPool = function () {\n        if (pool.length) {\n          return pool.pop();\n        } else {\n          return options.defaultFactory();\n        }\n      };\n      type.fillPool = function (n) {\n        while (pool.length < n) {\n          pool.push(options.defaultFactory());\n        }\n      };\n      type.fillPool(options.initialSize);\n    }\n    if (options.constructorDuplicateFactory) {\n      type.createFromPool = options.constructorDuplicateFactory(pool);\n    }\n    proto.freeToPool = function () {\n      if (pool.length < options.maxPoolSize) {\n        pool.push(this);\n      }\n    };\n  };\n});","\ndefine('DOT/Util',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Util = {\n    testAssert: function () {\n      return 'assert.dot: ' + (null ? 'true' : 'false');\n    },\n    clamp: function (value, min, max) {\n      if (value < min) {\n        return min;\n      } else if (value > max) {\n        return max;\n      } else {\n        return value;\n      }\n    },\n    moduloBetweenDown: function (value, min, max) {\n      null;\n      var divisor = max - min;\n      var partial = (value - min) % divisor;\n      if (partial < 0) {\n        partial += divisor;\n      }\n      return partial + min;\n    },\n    moduloBetweenUp: function (value, min, max) {\n      return -Util.moduloBetweenDown(-value, -max, -min);\n    },\n    rangeInclusive: function (a, b) {\n      if (b < a) {\n        return [];\n      }\n      var result = new Array(b - a + 1);\n      for (var i = a; i <= b; i++) {\n        result[i - a] = i;\n      }\n      return result;\n    },\n    rangeExclusive: function (a, b) {\n      return Util.rangeInclusive(a + 1, b - 1);\n    },\n    toRadians: function (degrees) {\n      return Math.PI * degrees / 180;\n    },\n    toDegrees: function (radians) {\n      return 180 * radians / Math.PI;\n    },\n    lineLineIntersection: function (p1, p2, p3, p4) {\n      return new dot.Vector2(((p1.x * p2.y - p1.y * p2.x) * (p3.x - p4.x) - (p1.x - p2.x) * (p3.x * p4.y - p3.y * p4.x)) / ((p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x)), ((p1.x * p2.y - p1.y * p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x * p4.y - p3.y * p4.x)) / ((p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x)));\n    },\n    solveQuadraticRootsReal: function (a, b, c) {\n      var epsilon = 10000000;\n      if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon) {\n        return [-c / b];\n      }\n      var discriminant = b * b - 4 * a * c;\n      if (discriminant < 0) {\n        return [];\n      }\n      var sqrt = Math.sqrt(discriminant);\n      return [\n        (-b - sqrt) / (2 * a),\n        (-b + sqrt) / (2 * a)\n      ];\n    },\n    solveCubicRootsReal: function (a, b, c, d) {\n      var epsilon = 10000000;\n      if (a === 0 || Math.abs(b / a) > epsilon || Math.abs(c / a) > epsilon || Math.abs(d / a) > epsilon) {\n        return Util.solveQuadraticRootsReal(b, c, d);\n      }\n      if (d === 0 || Math.abs(a / d) > epsilon || Math.abs(b / d) > epsilon || Math.abs(c / d) > epsilon) {\n        return Util.solveQuadraticRootsReal(a, b, c);\n      }\n      b /= a;\n      c /= a;\n      d /= a;\n      var s, t;\n      var q = (3 * c - b * b) / 9;\n      var r = (-(27 * d) + b * (9 * c - 2 * (b * b))) / 54;\n      var discriminant = q * q * q + r * r;\n      var b3 = b / 3;\n      if (discriminant > 0) {\n        var dsqrt = Math.sqrt(discriminant);\n        return [Util.cubeRoot(r + dsqrt) + Util.cubeRoot(r - dsqrt) - b3];\n      }\n      if (discriminant === 0) {\n        var rsqrt = Util.cubeRoot(r);\n        var doubleRoot = b3 - rsqrt;\n        return [\n          -b3 + 2 * rsqrt,\n          doubleRoot,\n          doubleRoot\n        ];\n      } else {\n        var qX = -q * q * q;\n        qX = Math.acos(r / Math.sqrt(qX));\n        var rr = 2 * Math.sqrt(-q);\n        return [\n          -b3 + rr * Math.cos(qX / 3),\n          -b3 + rr * Math.cos((qX + 2 * Math.PI) / 3),\n          -b3 + rr * Math.cos((qX + 4 * Math.PI) / 3)\n        ];\n      }\n    },\n    cubeRoot: function (x) {\n      return x >= 0 ? Math.pow(x, 1 / 3) : -Math.pow(-x, 1 / 3);\n    },\n    linear: function (a1, a2, b1, b2, a3) {\n      return (b2 - b1) / (a2 - a1) * (a3 - a1) + b1;\n    },\n    toFixed: function (number, decimalPlaces) {\n      var multiplier = Math.pow(10, decimalPlaces);\n      return Math.round(number * multiplier) / multiplier;\n    },\n    isInteger: function (number) {\n      return Math.floor(number) === number;\n    }\n  };\n  var Util = dot.Util;\n  dot.testAssert = Util.testAssert;\n  dot.clamp = Util.clamp;\n  dot.moduloBetweenDown = Util.moduloBetweenDown;\n  dot.moduloBetweenUp = Util.moduloBetweenUp;\n  dot.rangeInclusive = Util.rangeInclusive;\n  dot.rangeExclusive = Util.rangeExclusive;\n  dot.toRadians = Util.toRadians;\n  dot.toDegrees = Util.toDegrees;\n  dot.lineLineIntersection = Util.lineLineIntersection;\n  dot.solveQuadraticRootsReal = Util.solveQuadraticRootsReal;\n  dot.solveCubicRootsReal = Util.solveCubicRootsReal;\n  dot.cubeRoot = Util.cubeRoot;\n  dot.linear = Util.linear;\n  return Util;\n});","\ndefine('DOT/Vector2',['require','DOT/dot','PHET_CORE/inherit','PHET_CORE/Poolable','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Poolable = require('PHET_CORE/Poolable');\n  require('DOT/Util');\n  dot.Vector2 = function Vector2(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n    null;\n    null;\n    phetAllocation && phetAllocation('Vector2');\n  };\n  var Vector2 = dot.Vector2;\n  Vector2.createPolar = function (magnitude, angle) {\n    return new Vector2(magnitude * Math.cos(angle), magnitude * Math.sin(angle));\n  };\n  Vector2.prototype = {\n    constructor: Vector2,\n    isVector2: true,\n    dimension: 2,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      return this.x * this.x + this.y * this.y;\n    },\n    distance: function (point) {\n      return Math.sqrt(this.distanceSquared(point));\n    },\n    distanceXY: function (x, y) {\n      var dx = this.x - x;\n      var dy = this.y - y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n    distanceSquared: function (point) {\n      var dx = this.x - point.x;\n      var dy = this.y - point.y;\n      return dx * dx + dy * dy;\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y;\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.max(Math.abs(this.x - other.x), Math.abs(this.y - other.y)) <= epsilon;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y);\n    },\n    copy: function () {\n      return new Vector2(this.x, this.y);\n    },\n    crossScalar: function (v) {\n      return this.x * v.y - this.y * v.x;\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector2(this.x / mag, this.y / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector2(this.x * scalar, this.y * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector2(this.x * v.x, this.y * v.y);\n    },\n    plus: function (v) {\n      return new Vector2(this.x + v.x, this.y + v.y);\n    },\n    plusScalar: function (scalar) {\n      return new Vector2(this.x + scalar, this.y + scalar);\n    },\n    minus: function (v) {\n      return new Vector2(this.x - v.x, this.y - v.y);\n    },\n    minusScalar: function (scalar) {\n      return new Vector2(this.x - scalar, this.y - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector2(this.x / scalar, this.y / scalar);\n    },\n    negated: function () {\n      return new Vector2(-this.x, -this.y);\n    },\n    angle: function () {\n      return Math.atan2(this.y, this.x);\n    },\n    perpendicular: function () {\n      return new Vector2(this.y, -this.x);\n    },\n    angleBetween: function (v) {\n      var thisMagnitude = this.magnitude();\n      var vMagnitude = v.magnitude();\n      return Math.acos(dot.clamp((this.x * v.x + this.y * v.y) / (thisMagnitude * vMagnitude), -1, 1));\n    },\n    rotated: function (angle) {\n      var newAngle = this.angle() + angle;\n      var mag = this.magnitude();\n      return new Vector2(mag * Math.cos(newAngle), mag * Math.sin(newAngle));\n    },\n    blend: function (vector, ratio) {\n      return new Vector2(this.x + (vector.x - this.x) * ratio, this.y + (vector.y - this.y) * ratio);\n    },\n    toString: function () {\n      return 'Vector2(' + this.x + ', ' + this.y + ')';\n    },\n    toVector3: function () {\n      return new dot.Vector3(this.x, this.y);\n    },\n    set: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n    add: function (v) {\n      this.x += v.x;\n      this.y += v.y;\n      return this;\n    },\n    addScalar: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n    subtract: function (v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      return this;\n    },\n    subtractScalar: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n    componentMultiply: function (v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      return this;\n    },\n    divideScalar: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n    negate: function () {\n      this.x = -this.x;\n      this.y = -this.y;\n      return this;\n    }\n  };\n  Poolable(Vector2, {\n    defaultFactory: function () {\n      return new Vector2();\n    },\n    constructorDuplicateFactory: function (pool) {\n      return function (x, y) {\n        if (pool.length) {\n          return pool.pop().set(x, y);\n        } else {\n          return new Vector2(x, y);\n        }\n      };\n    }\n  });\n  Vector2.Immutable = function ImmutableVector2(x, y) {\n    Vector2.call(this, x, y);\n  };\n  var Immutable = Vector2.Immutable;\n  inherit(Vector2, Immutable);\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector2');\n    };\n  };\n  Immutable.mutableOverrideHelper('set');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Immutable.mutableOverrideHelper('add');\n  Immutable.mutableOverrideHelper('addScalar');\n  Immutable.mutableOverrideHelper('subtract');\n  Immutable.mutableOverrideHelper('subtractScalar');\n  Immutable.mutableOverrideHelper('componentMultiply');\n  Immutable.mutableOverrideHelper('divideScalar');\n  Immutable.mutableOverrideHelper('negate');\n  Vector2.ZERO = new Immutable(0, 0);\n  Vector2.X_UNIT = new Immutable(1, 0);\n  Vector2.Y_UNIT = new Immutable(0, 1);\n  return Vector2;\n});","\ndefine('DOT/Vector4',['require','DOT/dot','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  dot.Vector4 = function Vector4(x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Vector4 = dot.Vector4;\n  Vector4.prototype = {\n    constructor: Vector4,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      this.dot(this);\n    },\n    distance: function (point) {\n      return this.minus(point).magnitude();\n    },\n    distanceSquared: function (point) {\n      return this.minus(point).magnitudeSquared();\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y) && isFinite(this.z) && isFinite(this.w);\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector4(this.x / mag, this.y / mag, this.z / mag, this.w / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector4(this.x * scalar, this.y * scalar, this.z * scalar, this.w * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n    },\n    plus: function (v) {\n      return new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n    },\n    plusScalar: function (scalar) {\n      return new Vector4(this.x + scalar, this.y + scalar, this.z + scalar, this.w + scalar);\n    },\n    minus: function (v) {\n      return new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n    },\n    minusScalar: function (scalar) {\n      return new Vector4(this.x - scalar, this.y - scalar, this.z - scalar, this.w - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector4(this.x / scalar, this.y / scalar, this.z / scalar, this.w / scalar);\n    },\n    negated: function () {\n      return new Vector4(-this.x, -this.y, -this.z, -this.w);\n    },\n    angleBetween: function (v) {\n      return Math.acos(dot.clamp(this.normalized().dot(v.normalized()), -1, 1));\n    },\n    blend: function (vector, ratio) {\n      return this.plus(vector.minus(this).times(ratio));\n    },\n    toString: function () {\n      return 'Vector4(' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ')';\n    },\n    toVector3: function () {\n      return new dot.Vector3(this.x, this.y, this.z);\n    },\n    set: function (x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n    },\n    setX: function (x) {\n      this.x = x;\n    },\n    setY: function (y) {\n      this.y = y;\n    },\n    setZ: function (z) {\n      this.z = z;\n    },\n    setW: function (w) {\n      this.w = w;\n    },\n    copy: function (v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      this.w = v.w;\n    },\n    add: function (v) {\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      this.w += v.w;\n    },\n    addScalar: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      this.z += scalar;\n      this.w += scalar;\n    },\n    subtract: function (v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      this.w -= v.w;\n    },\n    subtractScalar: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      this.z -= scalar;\n      this.w -= scalar;\n    },\n    componentMultiply: function (v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      this.z *= v.z;\n      this.w *= v.w;\n    },\n    divideScalar: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      this.z /= scalar;\n      this.w /= scalar;\n    },\n    negate: function () {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      this.w = -this.w;\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) + Math.abs(this.w - other.w) <= epsilon;\n    },\n    isVector4: true,\n    dimension: 4\n  };\n  Vector4.Immutable = function (x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  };\n  var Immutable = Vector4.Immutable;\n  Immutable.prototype = new Vector4();\n  Immutable.prototype.constructor = Immutable;\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector4');\n    };\n  };\n  Immutable.mutableOverrideHelper('set');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Immutable.mutableOverrideHelper('setZ');\n  Immutable.mutableOverrideHelper('setW');\n  Immutable.mutableOverrideHelper('copy');\n  Immutable.mutableOverrideHelper('add');\n  Immutable.mutableOverrideHelper('addScalar');\n  Immutable.mutableOverrideHelper('subtract');\n  Immutable.mutableOverrideHelper('subtractScalar');\n  Immutable.mutableOverrideHelper('componentMultiply');\n  Immutable.mutableOverrideHelper('divideScalar');\n  Immutable.mutableOverrideHelper('negate');\n  Vector4.ZERO = new Immutable(0, 0, 0, 0);\n  Vector4.X_UNIT = new Immutable(1, 0, 0, 0);\n  Vector4.Y_UNIT = new Immutable(0, 1, 0, 0);\n  Vector4.Z_UNIT = new Immutable(0, 0, 1, 0);\n  Vector4.W_UNIT = new Immutable(0, 0, 0, 1);\n  return Vector4;\n});","\ndefine('DOT/Vector3',['require','DOT/dot','DOT/Util','DOT/Vector2','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  require('DOT/Vector2');\n  require('DOT/Vector4');\n  dot.Vector3 = function Vector3(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  };\n  var Vector3 = dot.Vector3;\n  Vector3.prototype = {\n    constructor: Vector3,\n    magnitude: function () {\n      return Math.sqrt(this.magnitudeSquared());\n    },\n    magnitudeSquared: function () {\n      return this.dot(this);\n    },\n    distance: function (point) {\n      return this.minus(point).magnitude();\n    },\n    distanceSquared: function (point) {\n      return this.minus(point).magnitudeSquared();\n    },\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    isFinite: function () {\n      return isFinite(this.x) && isFinite(this.y) && isFinite(this.z);\n    },\n    cross: function (v) {\n      return new Vector3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    },\n    normalized: function () {\n      var mag = this.magnitude();\n      if (mag === 0) {\n        throw new Error('Cannot normalize a zero-magnitude vector');\n      } else {\n        return new Vector3(this.x / mag, this.y / mag, this.z / mag);\n      }\n    },\n    timesScalar: function (scalar) {\n      return new Vector3(this.x * scalar, this.y * scalar, this.z * scalar);\n    },\n    times: function (scalar) {\n      null;\n      return this.timesScalar(scalar);\n    },\n    componentTimes: function (v) {\n      return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\n    },\n    plus: function (v) {\n      return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n    },\n    plusScalar: function (scalar) {\n      return new Vector3(this.x + scalar, this.y + scalar, this.z + scalar);\n    },\n    minus: function (v) {\n      return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n    },\n    minusScalar: function (scalar) {\n      return new Vector3(this.x - scalar, this.y - scalar, this.z - scalar);\n    },\n    dividedScalar: function (scalar) {\n      return new Vector3(this.x / scalar, this.y / scalar, this.z / scalar);\n    },\n    negated: function () {\n      return new Vector3(-this.x, -this.y, -this.z);\n    },\n    angleBetween: function (v) {\n      return Math.acos(dot.clamp(this.normalized().dot(v.normalized()), -1, 1));\n    },\n    blend: function (vector, ratio) {\n      return this.plus(vector.minus(this).times(ratio));\n    },\n    toString: function () {\n      return 'Vector3(' + this.x + ', ' + this.y + ', ' + this.z + ')';\n    },\n    toVector2: function () {\n      return new dot.Vector2(this.x, this.y);\n    },\n    toVector4: function () {\n      return new dot.Vector4(this.x, this.y, this.z);\n    },\n    set: function (x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n    },\n    setX: function (x) {\n      this.x = x;\n    },\n    setY: function (y) {\n      this.y = y;\n    },\n    setZ: function (z) {\n      this.z = z;\n    },\n    copy: function (v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n    },\n    add: function (v) {\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n    },\n    addScalar: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      this.z += scalar;\n    },\n    subtract: function (v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n    },\n    subtractScalar: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      this.z -= scalar;\n    },\n    componentMultiply: function (v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      this.z *= v.z;\n    },\n    divideScalar: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      this.z /= scalar;\n    },\n    negate: function () {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n    },\n    equals: function (other) {\n      return this.x === other.x && this.y === other.y && this.z === other.z;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      if (!epsilon) {\n        epsilon = 0;\n      }\n      return Math.abs(this.x - other.x) + Math.abs(this.y - other.y) + Math.abs(this.z - other.z) <= epsilon;\n    },\n    isVector3: true,\n    dimension: 3\n  };\n  Vector3.Immutable = function (x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  };\n  var Immutable = Vector3.Immutable;\n  Immutable.prototype = new Vector3();\n  Immutable.prototype.constructor = Immutable;\n  Immutable.mutableOverrideHelper = function (mutableFunctionName) {\n    Immutable.prototype[mutableFunctionName] = function () {\n      throw new Error('Cannot call mutable method \\'' + mutableFunctionName + '\\' on immutable Vector3');\n    };\n  };\n  Immutable.mutableOverrideHelper('set');\n  Immutable.mutableOverrideHelper('setX');\n  Immutable.mutableOverrideHelper('setY');\n  Immutable.mutableOverrideHelper('setZ');\n  Immutable.mutableOverrideHelper('copy');\n  Immutable.mutableOverrideHelper('add');\n  Immutable.mutableOverrideHelper('addScalar');\n  Immutable.mutableOverrideHelper('subtract');\n  Immutable.mutableOverrideHelper('subtractScalar');\n  Immutable.mutableOverrideHelper('componentMultiply');\n  Immutable.mutableOverrideHelper('divideScalar');\n  Immutable.mutableOverrideHelper('negate');\n  Vector3.ZERO = new Immutable(0, 0, 0);\n  Vector3.X_UNIT = new Immutable(1, 0, 0);\n  Vector3.Y_UNIT = new Immutable(0, 1, 0);\n  Vector3.Z_UNIT = new Immutable(0, 0, 1);\n  return Vector3;\n});","\ndefine('DOT/Matrix4',['require','DOT/dot','DOT/Vector3','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Vector3');\n  require('DOT/Vector4');\n  var Float32Array = window.Float32Array || Array;\n  dot.Matrix4 = function Matrix4(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {\n    this.entries = new Float32Array(16);\n    this.rowMajor(v00 === undefined ? 1 : v00, v01 || 0, v02 || 0, v03 || 0, v10 || 0, v11 === undefined ? 1 : v11, v12 || 0, v13 || 0, v20 || 0, v21 || 0, v22 === undefined ? 1 : v22, v23 || 0, v30 || 0, v31 || 0, v32 || 0, v33 === undefined ? 1 : v33, type);\n  };\n  var Matrix4 = dot.Matrix4;\n  Matrix4.Types = {\n    OTHER: 0,\n    IDENTITY: 1,\n    TRANSLATION_3D: 2,\n    SCALING: 3\n  };\n  var Types = Matrix4.Types;\n  Matrix4.identity = function () {\n    return new Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.IDENTITY);\n  };\n  Matrix4.translation = function (x, y, z) {\n    return new Matrix4(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1, Types.TRANSLATION_3D);\n  };\n  Matrix4.translationFromVector = function (v) {\n    return Matrix4.translation(v.x, v.y, v.z);\n  };\n  Matrix4.scaling = function (x, y, z) {\n    y = y === undefined ? x : y;\n    z = z === undefined ? x : z;\n    return new Matrix4(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1, Types.SCALING);\n  };\n  Matrix4.rotationAxisAngle = function (axis, angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var C = 1 - c;\n    return new Matrix4(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, 0, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, 0, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, 0, 0, 0, 0, 1, Types.OTHER);\n  };\n  Matrix4.rotationX = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, Types.OTHER);\n  };\n  Matrix4.rotationY = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1, Types.OTHER);\n  };\n  Matrix4.rotationZ = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix4(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, Types.OTHER);\n  };\n  Matrix4.gluPerspective = function (fovYRadians, aspect, zNear, zFar) {\n    var cotangent = Math.cos(fovYRadians) / Math.sin(fovYRadians);\n    return new Matrix4(cotangent / aspect, 0, 0, 0, 0, cotangent, 0, 0, 0, 0, (zFar + zNear) / (zNear - zFar), 2 * zFar * zNear / (zNear - zFar), 0, 0, -1, 0);\n  };\n  Matrix4.prototype = {\n    constructor: Matrix4,\n    rowMajor: function (v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type) {\n      this.entries[0] = v00;\n      this.entries[1] = v10;\n      this.entries[2] = v20;\n      this.entries[3] = v30;\n      this.entries[4] = v01;\n      this.entries[5] = v11;\n      this.entries[6] = v21;\n      this.entries[7] = v31;\n      this.entries[8] = v02;\n      this.entries[9] = v12;\n      this.entries[10] = v22;\n      this.entries[11] = v32;\n      this.entries[12] = v03;\n      this.entries[13] = v13;\n      this.entries[14] = v23;\n      this.entries[15] = v33;\n      this.type = type === undefined ? Types.OTHER : type;\n    },\n    columnMajor: function (v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32, v03, v13, v23, v33, type) {\n      this.rowMajor(v00, v01, v02, v03, v10, v11, v12, v13, v20, v21, v22, v23, v30, v31, v32, v33, type);\n    },\n    m00: function () {\n      return this.entries[0];\n    },\n    m01: function () {\n      return this.entries[4];\n    },\n    m02: function () {\n      return this.entries[8];\n    },\n    m03: function () {\n      return this.entries[12];\n    },\n    m10: function () {\n      return this.entries[1];\n    },\n    m11: function () {\n      return this.entries[5];\n    },\n    m12: function () {\n      return this.entries[9];\n    },\n    m13: function () {\n      return this.entries[13];\n    },\n    m20: function () {\n      return this.entries[2];\n    },\n    m21: function () {\n      return this.entries[6];\n    },\n    m22: function () {\n      return this.entries[10];\n    },\n    m23: function () {\n      return this.entries[14];\n    },\n    m30: function () {\n      return this.entries[3];\n    },\n    m31: function () {\n      return this.entries[7];\n    },\n    m32: function () {\n      return this.entries[11];\n    },\n    m33: function () {\n      return this.entries[15];\n    },\n    plus: function (m) {\n      return new Matrix4(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m03() + m.m03(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m13() + m.m13(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22(), this.m23() + m.m23(), this.m30() + m.m30(), this.m31() + m.m31(), this.m32() + m.m32(), this.m33() + m.m33());\n    },\n    minus: function (m) {\n      return new Matrix4(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m03() - m.m03(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m13() - m.m13(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22(), this.m23() - m.m23(), this.m30() - m.m30(), this.m31() - m.m31(), this.m32() - m.m32(), this.m33() - m.m33());\n    },\n    transposed: function () {\n      return new Matrix4(this.m00(), this.m10(), this.m20(), this.m30(), this.m01(), this.m11(), this.m21(), this.m31(), this.m02(), this.m12(), this.m22(), this.m32(), this.m03(), this.m13(), this.m23(), this.m33());\n    },\n    negated: function () {\n      return new Matrix4(-this.m00(), -this.m01(), -this.m02(), -this.m03(), -this.m10(), -this.m11(), -this.m12(), -this.m13(), -this.m20(), -this.m21(), -this.m22(), -this.m23(), -this.m30(), -this.m31(), -this.m32(), -this.m33());\n    },\n    inverted: function () {\n      var det = this.determinant();\n      if (det !== 0) {\n        return new Matrix4((-this.m31() * this.m22() * this.m13() + this.m21() * this.m32() * this.m13() + this.m31() * this.m12() * this.m23() - this.m11() * this.m32() * this.m23() - this.m21() * this.m12() * this.m33() + this.m11() * this.m22() * this.m33()) / det, (this.m31() * this.m22() * this.m03() - this.m21() * this.m32() * this.m03() - this.m31() * this.m02() * this.m23() + this.m01() * this.m32() * this.m23() + this.m21() * this.m02() * this.m33() - this.m01() * this.m22() * this.m33()) / det, (-this.m31() * this.m12() * this.m03() + this.m11() * this.m32() * this.m03() + this.m31() * this.m02() * this.m13() - this.m01() * this.m32() * this.m13() - this.m11() * this.m02() * this.m33() + this.m01() * this.m12() * this.m33()) / det, (this.m21() * this.m12() * this.m03() - this.m11() * this.m22() * this.m03() - this.m21() * this.m02() * this.m13() + this.m01() * this.m22() * this.m13() + this.m11() * this.m02() * this.m23() - this.m01() * this.m12() * this.m23()) / det, (this.m30() * this.m22() * this.m13() - this.m20() * this.m32() * this.m13() - this.m30() * this.m12() * this.m23() + this.m10() * this.m32() * this.m23() + this.m20() * this.m12() * this.m33() - this.m10() * this.m22() * this.m33()) / det, (-this.m30() * this.m22() * this.m03() + this.m20() * this.m32() * this.m03() + this.m30() * this.m02() * this.m23() - this.m00() * this.m32() * this.m23() - this.m20() * this.m02() * this.m33() + this.m00() * this.m22() * this.m33()) / det, (this.m30() * this.m12() * this.m03() - this.m10() * this.m32() * this.m03() - this.m30() * this.m02() * this.m13() + this.m00() * this.m32() * this.m13() + this.m10() * this.m02() * this.m33() - this.m00() * this.m12() * this.m33()) / det, (-this.m20() * this.m12() * this.m03() + this.m10() * this.m22() * this.m03() + this.m20() * this.m02() * this.m13() - this.m00() * this.m22() * this.m13() - this.m10() * this.m02() * this.m23() + this.m00() * this.m12() * this.m23()) / det, (-this.m30() * this.m21() * this.m13() + this.m20() * this.m31() * this.m13() + this.m30() * this.m11() * this.m23() - this.m10() * this.m31() * this.m23() - this.m20() * this.m11() * this.m33() + this.m10() * this.m21() * this.m33()) / det, (this.m30() * this.m21() * this.m03() - this.m20() * this.m31() * this.m03() - this.m30() * this.m01() * this.m23() + this.m00() * this.m31() * this.m23() + this.m20() * this.m01() * this.m33() - this.m00() * this.m21() * this.m33()) / det, (-this.m30() * this.m11() * this.m03() + this.m10() * this.m31() * this.m03() + this.m30() * this.m01() * this.m13() - this.m00() * this.m31() * this.m13() - this.m10() * this.m01() * this.m33() + this.m00() * this.m11() * this.m33()) / det, (this.m20() * this.m11() * this.m03() - this.m10() * this.m21() * this.m03() - this.m20() * this.m01() * this.m13() + this.m00() * this.m21() * this.m13() + this.m10() * this.m01() * this.m23() - this.m00() * this.m11() * this.m23()) / det, (this.m30() * this.m21() * this.m12() - this.m20() * this.m31() * this.m12() - this.m30() * this.m11() * this.m22() + this.m10() * this.m31() * this.m22() + this.m20() * this.m11() * this.m32() - this.m10() * this.m21() * this.m32()) / det, (-this.m30() * this.m21() * this.m02() + this.m20() * this.m31() * this.m02() + this.m30() * this.m01() * this.m22() - this.m00() * this.m31() * this.m22() - this.m20() * this.m01() * this.m32() + this.m00() * this.m21() * this.m32()) / det, (this.m30() * this.m11() * this.m02() - this.m10() * this.m31() * this.m02() - this.m30() * this.m01() * this.m12() + this.m00() * this.m31() * this.m12() + this.m10() * this.m01() * this.m32() - this.m00() * this.m11() * this.m32()) / det, (-this.m20() * this.m11() * this.m02() + this.m10() * this.m21() * this.m02() + this.m20() * this.m01() * this.m12() - this.m00() * this.m21() * this.m12() - this.m10() * this.m01() * this.m22() + this.m00() * this.m11() * this.m22()) / det);\n      } else {\n        throw new Error('Matrix could not be inverted, determinant === 0');\n      }\n    },\n    timesMatrix: function (m) {\n      var newType = Types.OTHER;\n      if (this.type === Types.TRANSLATION_3D && m.type === Types.TRANSLATION_3D) {\n        newType = Types.TRANSLATION_3D;\n      }\n      if (this.type === Types.SCALING && m.type === Types.SCALING) {\n        newType = Types.SCALING;\n      }\n      if (this.type === Types.IDENTITY) {\n        newType = m.type;\n      }\n      if (m.type === Types.IDENTITY) {\n        newType = this.type;\n      }\n      return new Matrix4(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20() + this.m03() * m.m30(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21() + this.m03() * m.m31(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22() + this.m03() * m.m32(), this.m00() * m.m03() + this.m01() * m.m13() + this.m02() * m.m23() + this.m03() * m.m33(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20() + this.m13() * m.m30(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21() + this.m13() * m.m31(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22() + this.m13() * m.m32(), this.m10() * m.m03() + this.m11() * m.m13() + this.m12() * m.m23() + this.m13() * m.m33(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20() + this.m23() * m.m30(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21() + this.m23() * m.m31(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22() + this.m23() * m.m32(), this.m20() * m.m03() + this.m21() * m.m13() + this.m22() * m.m23() + this.m23() * m.m33(), this.m30() * m.m00() + this.m31() * m.m10() + this.m32() * m.m20() + this.m33() * m.m30(), this.m30() * m.m01() + this.m31() * m.m11() + this.m32() * m.m21() + this.m33() * m.m31(), this.m30() * m.m02() + this.m31() * m.m12() + this.m32() * m.m22() + this.m33() * m.m32(), this.m30() * m.m03() + this.m31() * m.m13() + this.m32() * m.m23() + this.m33() * m.m33(), newType);\n    },\n    timesVector4: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z + this.m03() * v.w;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z + this.m13() * v.w;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z + this.m23() * v.w;\n      var w = this.m30() * v.x + this.m31() * v.y + this.m32() * v.z + this.m33() * v.w;\n      return new dot.Vector4(x, y, z, w);\n    },\n    timesVector3: function (v) {\n      return this.timesVector4(v.toVector4()).toVector3();\n    },\n    timesTransposeVector4: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z + this.m30() * v.w;\n      var y = this.m01() * v.x + this.m11() * v.y + this.m21() * v.z + this.m31() * v.w;\n      var z = this.m02() * v.x + this.m12() * v.y + this.m22() * v.z + this.m32() * v.w;\n      var w = this.m03() * v.x + this.m13() * v.y + this.m23() * v.z + this.m33() * v.w;\n      return new dot.Vector4(x, y, z, w);\n    },\n    timesTransposeVector3: function (v) {\n      return this.timesTransposeVector4(v.toVector4()).toVector3();\n    },\n    timesRelativeVector3: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y + this.m20() * v.z;\n      var y = this.m01() * v.y + this.m11() * v.y + this.m21() * v.z;\n      var z = this.m02() * v.z + this.m12() * v.y + this.m22() * v.z;\n      return new dot.Vector3(x, y, z);\n    },\n    determinant: function () {\n      return this.m03() * this.m12() * this.m21() * this.m30() - this.m02() * this.m13() * this.m21() * this.m30() - this.m03() * this.m11() * this.m22() * this.m30() + this.m01() * this.m13() * this.m22() * this.m30() + this.m02() * this.m11() * this.m23() * this.m30() - this.m01() * this.m12() * this.m23() * this.m30() - this.m03() * this.m12() * this.m20() * this.m31() + this.m02() * this.m13() * this.m20() * this.m31() + this.m03() * this.m10() * this.m22() * this.m31() - this.m00() * this.m13() * this.m22() * this.m31() - this.m02() * this.m10() * this.m23() * this.m31() + this.m00() * this.m12() * this.m23() * this.m31() + this.m03() * this.m11() * this.m20() * this.m32() - this.m01() * this.m13() * this.m20() * this.m32() - this.m03() * this.m10() * this.m21() * this.m32() + this.m00() * this.m13() * this.m21() * this.m32() + this.m01() * this.m10() * this.m23() * this.m32() - this.m00() * this.m11() * this.m23() * this.m32() - this.m02() * this.m11() * this.m20() * this.m33() + this.m01() * this.m12() * this.m20() * this.m33() + this.m02() * this.m10() * this.m21() * this.m33() - this.m00() * this.m12() * this.m21() * this.m33() - this.m01() * this.m10() * this.m22() * this.m33() + this.m00() * this.m11() * this.m22() * this.m33();\n    },\n    toString: function () {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + ' ' + this.m03() + '\\n' + this.m10() + ' ' + this.m11() + ' ' + this.m12() + ' ' + this.m13() + '\\n' + this.m20() + ' ' + this.m21() + ' ' + this.m22() + ' ' + this.m23() + '\\n' + this.m30() + ' ' + this.m31() + ' ' + this.m32() + ' ' + this.m33();\n    },\n    translation: function () {\n      return new dot.Vector3(this.m03(), this.m13(), this.m23());\n    },\n    scaling: function () {\n      return new dot.Vector3(this.m00(), this.m11(), this.m22());\n    },\n    makeImmutable: function () {\n      this.rowMajor = function () {\n        throw new Error('Cannot modify immutable matrix');\n      };\n    }\n  };\n  Matrix4.IDENTITY = new Matrix4();\n  Matrix4.IDENTITY.makeImmutable();\n  return Matrix4;\n});","\ndefine('DOT/Matrix3',['require','DOT/dot','DOT/Vector2','DOT/Vector3','DOT/Matrix4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var FastArray = dot.FastArray;\n  require('DOT/Vector2');\n  require('DOT/Vector3');\n  require('DOT/Matrix4');\n  dot.Matrix3 = function Matrix3(v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n    this.entries = new FastArray(9);\n    this.rowMajor(v00 === undefined ? 1 : v00, v01 || 0, v02 || 0, v10 || 0, v11 === undefined ? 1 : v11, v12 || 0, v20 || 0, v21 || 0, v22 === undefined ? 1 : v22, type);\n    phetAllocation && phetAllocation('Matrix3');\n  };\n  var Matrix3 = dot.Matrix3;\n  Matrix3.Types = {\n    OTHER: 0,\n    IDENTITY: 1,\n    TRANSLATION_2D: 2,\n    SCALING: 3,\n    AFFINE: 4\n  };\n  var Types = Matrix3.Types;\n  Matrix3.identity = function () {\n    return new Matrix3(1, 0, 0, 0, 1, 0, 0, 0, 1, Types.IDENTITY);\n  };\n  Matrix3.translation = function (x, y) {\n    return new Matrix3(1, 0, x, 0, 1, y, 0, 0, 1, Types.TRANSLATION_2D);\n  };\n  Matrix3.translationFromVector = function (v) {\n    return Matrix3.translation(v.x, v.y);\n  };\n  Matrix3.scaling = function (x, y) {\n    y = y === undefined ? x : y;\n    return new Matrix3(x, 0, 0, 0, y, 0, 0, 0, 1, Types.SCALING);\n  };\n  Matrix3.scale = Matrix3.scaling;\n  Matrix3.affine = function (m00, m10, m01, m11, m02, m12) {\n    return new Matrix3(m00, m01, m02, m10, m11, m12, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix3.rotationAxisAngle = function (axis, angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var C = 1 - c;\n    return new Matrix3(axis.x * axis.x * C + c, axis.x * axis.y * C - axis.z * s, axis.x * axis.z * C + axis.y * s, axis.y * axis.x * C + axis.z * s, axis.y * axis.y * C + c, axis.y * axis.z * C - axis.x * s, axis.z * axis.x * C - axis.y * s, axis.z * axis.y * C + axis.x * s, axis.z * axis.z * C + c, Types.OTHER);\n  };\n  Matrix3.rotationX = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix3(1, 0, 0, 0, c, -s, 0, s, c, Types.OTHER);\n  };\n  Matrix3.rotationY = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix3(c, 0, s, 0, 1, 0, -s, 0, c, Types.OTHER);\n  };\n  Matrix3.rotationZ = function (angle) {\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    return new Matrix3(c, -s, 0, s, c, 0, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix3.rotation2 = Matrix3.rotationZ;\n  Matrix3.fromSVGMatrix = function (svgMatrix) {\n    return new Matrix3(svgMatrix.a, svgMatrix.c, svgMatrix.e, svgMatrix.b, svgMatrix.d, svgMatrix.f, 0, 0, 1, Types.AFFINE);\n  };\n  Matrix3.rotateAToB = function (a, b) {\n    var start = a;\n    var end = b;\n    var epsilon = 0.0001;\n    var e, h, f;\n    var v = start.cross(end);\n    e = start.dot(end);\n    f = e < 0 ? -e : e;\n    if (f > 1 - epsilon) {\n      var c1, c2, c3;\n      var i, j;\n      var x = new dot.Vector3(start.x > 0 ? start.x : -start.x, start.y > 0 ? start.y : -start.y, start.z > 0 ? start.z : -start.z);\n      if (x.x < x.y) {\n        if (x.x < x.z) {\n          x = dot.Vector3.X_UNIT;\n        } else {\n          x = dot.Vector3.Z_UNIT;\n        }\n      } else {\n        if (x.y < x.z) {\n          x = dot.Vector3.Y_UNIT;\n        } else {\n          x = dot.Vector3.Z_UNIT;\n        }\n      }\n      var u = x.minus(start);\n      v = x.minus(end);\n      c1 = 2 / u.dot(u);\n      c2 = 2 / v.dot(v);\n      c3 = c1 * c2 * u.dot(v);\n      return Matrix3.IDENTITY.plus(Matrix3.rowMajor(-c1 * u.x * u.x - c2 * v.x * v.x + c3 * v.x * u.x, -c1 * u.x * u.y - c2 * v.x * v.y + c3 * v.x * u.y, -c1 * u.x * u.z - c2 * v.x * v.z + c3 * v.x * u.z, -c1 * u.y * u.x - c2 * v.y * v.x + c3 * v.y * u.x, -c1 * u.y * u.y - c2 * v.y * v.y + c3 * v.y * u.y, -c1 * u.y * u.z - c2 * v.y * v.z + c3 * v.y * u.z, -c1 * u.z * u.x - c2 * v.z * v.x + c3 * v.z * u.x, -c1 * u.z * u.y - c2 * v.z * v.y + c3 * v.z * u.y, -c1 * u.z * u.z - c2 * v.z * v.z + c3 * v.z * u.z));\n    } else {\n      var hvx, hvz, hvxy, hvxz, hvyz;\n      h = 1 / (1 + e);\n      hvx = h * v.x;\n      hvz = h * v.z;\n      hvxy = hvx * v.y;\n      hvxz = hvx * v.z;\n      hvyz = hvz * v.y;\n      return Matrix3.rowMajor(e + hvx * v.x, hvxy - v.z, hvxz + v.y, hvxy + v.z, e + h * v.y * v.y, hvyz - v.x, hvxz - v.y, hvyz + v.x, e + hvz * v.z);\n    }\n  };\n  Matrix3.prototype = {\n    constructor: Matrix3,\n    m00: function () {\n      return this.entries[0];\n    },\n    m01: function () {\n      return this.entries[3];\n    },\n    m02: function () {\n      return this.entries[6];\n    },\n    m10: function () {\n      return this.entries[1];\n    },\n    m11: function () {\n      return this.entries[4];\n    },\n    m12: function () {\n      return this.entries[7];\n    },\n    m20: function () {\n      return this.entries[2];\n    },\n    m21: function () {\n      return this.entries[5];\n    },\n    m22: function () {\n      return this.entries[8];\n    },\n    isAffine: function () {\n      return this.type === Types.AFFINE || this.m20() === 0 && this.m21() === 0 && this.m22() === 1;\n    },\n    isFinite: function () {\n      return isFinite(this.m00()) && isFinite(this.m01()) && isFinite(this.m02()) && isFinite(this.m10()) && isFinite(this.m11()) && isFinite(this.m12()) && isFinite(this.m20()) && isFinite(this.m21()) && isFinite(this.m22());\n    },\n    getDeterminant: function () {\n      return this.m00() * this.m11() * this.m22() + this.m01() * this.m12() * this.m20() + this.m02() * this.m10() * this.m21() - this.m02() * this.m11() * this.m20() - this.m01() * this.m10() * this.m22() - this.m00() * this.m12() * this.m21();\n    },\n    get determinant() {\n      return this.getDeterminant();\n    },\n    getTranslation: function () {\n      return new dot.Vector2(this.m02(), this.m12());\n    },\n    get translation() {\n      return this.getTranslation();\n    },\n    getScaleVector: function () {\n      return new dot.Vector2(Math.sqrt(this.m00() * this.m00() + this.m10() * this.m10()), Math.sqrt(this.m01() * this.m01() + this.m11() * this.m11()));\n    },\n    get scaleVector() {\n      return this.getScaleVector();\n    },\n    getRotation: function () {\n      var transformedVector = this.timesVector2(dot.Vector2.X_UNIT).minus(this.timesVector2(dot.Vector2.ZERO));\n      return Math.atan2(transformedVector.y, transformedVector.x);\n    },\n    get rotation() {\n      return this.getRotation();\n    },\n    toMatrix4: function () {\n      return new dot.Matrix4(this.m00(), this.m01(), this.m02(), 0, this.m10(), this.m11(), this.m12(), 0, this.m20(), this.m21(), this.m22(), 0, 0, 0, 0, 1);\n    },\n    toString: function () {\n      return this.m00() + ' ' + this.m01() + ' ' + this.m02() + '\\n' + this.m10() + ' ' + this.m11() + ' ' + this.m12() + '\\n' + this.m20() + ' ' + this.m21() + ' ' + this.m22();\n    },\n    toSVGMatrix: function () {\n      var result = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();\n      result.a = this.m00();\n      result.b = this.m10();\n      result.c = this.m01();\n      result.d = this.m11();\n      result.e = this.m02();\n      result.f = this.m12();\n      return result;\n    },\n    getCSSTransform: function () {\n      return 'matrix(' + this.entries[0].toFixed(20) + ',' + this.entries[1].toFixed(20) + ',' + this.entries[3].toFixed(20) + ',' + this.entries[4].toFixed(20) + ',' + this.entries[6].toFixed(20) + ',' + this.entries[7].toFixed(20) + ')';\n    },\n    get cssTransform() {\n      return this.getCSSTransform();\n    },\n    getSVGTransform: function () {\n      function svgNumber(number) {\n        return number.toFixed(20);\n      }\n      switch (this.type) {\n      case Types.IDENTITY:\n        return '';\n      case Types.TRANSLATION_2D:\n        return 'translate(' + svgNumber(this.entries[6]) + ',' + this.entries[7] + ')';\n      case Types.SCALING:\n        return 'scale(' + svgNumber(this.entries[0]) + (this.entries[0] === this.entries[4] ? '' : ',' + svgNumber(this.entries[4])) + ')';\n      default:\n        return 'matrix(' + svgNumber(this.entries[0]) + ',' + svgNumber(this.entries[1]) + ',' + svgNumber(this.entries[3]) + ',' + svgNumber(this.entries[4]) + ',' + svgNumber(this.entries[6]) + ',' + svgNumber(this.entries[7]) + ')';\n      }\n    },\n    get svgTransform() {\n      return this.getSVGTransform();\n    },\n    getCSSTransformStyles: function () {\n      var transformCSS = this.getCSSTransform();\n      return {\n        '-webkit-perspective': 1000,\n        '-webkit-backface-visibility': 'hidden',\n        '-webkit-transform': transformCSS + ' translateZ(0)',\n        '-moz-transform': transformCSS + ' translateZ(0)',\n        '-ms-transform': transformCSS,\n        '-o-transform': transformCSS,\n        'transform': transformCSS,\n        'transform-origin': 'top left',\n        '-ms-transform-origin': 'top left'\n      };\n    },\n    get cssTransformStyles() {\n      return this.getCSSTransformStyles();\n    },\n    equals: function (m) {\n      return this.m00() === m.m00() && this.m01() === m.m01() && this.m02() === m.m02() && this.m10() === m.m10() && this.m11() === m.m11() && this.m12() === m.m12() && this.m20() === m.m20() && this.m21() === m.m21() && this.m22() === m.m22();\n    },\n    equalsEpsilon: function (m, epsilon) {\n      return Math.abs(this.m00() - m.m00()) < epsilon && Math.abs(this.m01() - m.m01()) < epsilon && Math.abs(this.m02() - m.m02()) < epsilon && Math.abs(this.m10() - m.m10()) < epsilon && Math.abs(this.m11() - m.m11()) < epsilon && Math.abs(this.m12() - m.m12()) < epsilon && Math.abs(this.m20() - m.m20()) < epsilon && Math.abs(this.m21() - m.m21()) < epsilon && Math.abs(this.m22() - m.m22()) < epsilon;\n    },\n    copy: function () {\n      return new Matrix3(this.m00(), this.m01(), this.m02(), this.m10(), this.m11(), this.m12(), this.m20(), this.m21(), this.m22(), this.type);\n    },\n    plus: function (m) {\n      return new Matrix3(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22());\n    },\n    minus: function (m) {\n      return new Matrix3(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22());\n    },\n    transposed: function () {\n      return new Matrix3(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Types.IDENTITY || this.type === Types.SCALING ? this.type : undefined);\n    },\n    negated: function () {\n      return new Matrix3(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());\n    },\n    inverted: function () {\n      var det;\n      switch (this.type) {\n      case Types.IDENTITY:\n        return this;\n      case Types.TRANSLATION_2D:\n        return new Matrix3(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n      case Types.SCALING:\n        return new Matrix3(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Types.SCALING);\n      case Types.AFFINE:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return new Matrix3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Types.AFFINE);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      case Types.OTHER:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return new Matrix3((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Types.OTHER);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      default:\n        throw new Error('Matrix3.inverted with unknown type: ' + this.type);\n      }\n    },\n    timesMatrix: function (m) {\n      if (this.type === Types.IDENTITY || m.type === Types.IDENTITY) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n      if (this.type === m.type) {\n        if (this.type === Types.TRANSLATION_2D) {\n          return new Matrix3(1, 0, this.m02() + m.m02(), 0, 1, this.m12() + m.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n        } else if (this.type === Types.SCALING) {\n          return new Matrix3(this.m00() * m.m00(), 0, 0, 0, this.m11() * m.m11(), 0, 0, 0, 1, Types.SCALING);\n        }\n      }\n      if (this.type !== Types.OTHER && m.type !== Types.OTHER) {\n        return new Matrix3(this.m00() * m.m00() + this.m01() * m.m10(), this.m00() * m.m01() + this.m01() * m.m11(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02(), this.m10() * m.m00() + this.m11() * m.m10(), this.m10() * m.m01() + this.m11() * m.m11(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12(), 0, 0, 1, Types.AFFINE);\n      }\n      return new Matrix3(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22());\n    },\n    timesVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02();\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12();\n      return new dot.Vector2(x, y);\n    },\n    timesVector3: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z;\n      return new dot.Vector3(x, y, z);\n    },\n    timesTransposeVector2: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y;\n      var y = this.m01() * v.x + this.m11() * v.y;\n      return new dot.Vector2(x, y);\n    },\n    timesRelativeVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y;\n      var y = this.m10() * v.y + this.m11() * v.y;\n      return new dot.Vector2(x, y);\n    },\n    makeImmutable: function () {\n      this.rowMajor = function () {\n        throw new Error('Cannot modify immutable matrix');\n      };\n      return this;\n    },\n    rowMajor: function (v00, v01, v02, v10, v11, v12, v20, v21, v22, type) {\n      this.entries[0] = v00;\n      this.entries[1] = v10;\n      this.entries[2] = v20;\n      this.entries[3] = v01;\n      this.entries[4] = v11;\n      this.entries[5] = v21;\n      this.entries[6] = v02;\n      this.entries[7] = v12;\n      this.entries[8] = v22;\n      this.type = type === undefined ? v20 === 0 && v21 === 0 && v22 === 1 ? Types.AFFINE : Types.OTHER : type;\n      return this;\n    },\n    columnMajor: function (v00, v10, v20, v01, v11, v21, v02, v12, v22, type) {\n      return this.rowMajor(v00, v01, v02, v10, v11, v12, v20, v21, v22, type);\n    },\n    add: function (m) {\n      return this.rowMajor(this.m00() + m.m00(), this.m01() + m.m01(), this.m02() + m.m02(), this.m10() + m.m10(), this.m11() + m.m11(), this.m12() + m.m12(), this.m20() + m.m20(), this.m21() + m.m21(), this.m22() + m.m22());\n    },\n    subtract: function (m) {\n      return this.rowMajor(this.m00() - m.m00(), this.m01() - m.m01(), this.m02() - m.m02(), this.m10() - m.m10(), this.m11() - m.m11(), this.m12() - m.m12(), this.m20() - m.m20(), this.m21() - m.m21(), this.m22() - m.m22());\n    },\n    transpose: function () {\n      return this.rowMajor(this.m00(), this.m10(), this.m20(), this.m01(), this.m11(), this.m21(), this.m02(), this.m12(), this.m22(), this.type === Types.IDENTITY || this.type === Types.SCALING ? this.type : undefined);\n    },\n    negate: function () {\n      return this.rowMajor(-this.m00(), -this.m01(), -this.m02(), -this.m10(), -this.m11(), -this.m12(), -this.m20(), -this.m21(), -this.m22());\n    },\n    invert: function () {\n      var det;\n      switch (this.type) {\n      case Types.IDENTITY:\n        return this;\n      case Types.TRANSLATION_2D:\n        return this.rowMajor(1, 0, -this.m02(), 0, 1, -this.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n      case Types.SCALING:\n        return this.rowMajor(1 / this.m00(), 0, 0, 0, 1 / this.m11(), 0, 0, 0, 1 / this.m22(), Types.SCALING);\n      case Types.AFFINE:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, 0, 0, 1, Types.AFFINE);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      case Types.OTHER:\n        det = this.getDeterminant();\n        if (det !== 0) {\n          return this.rowMajor((-this.m12() * this.m21() + this.m11() * this.m22()) / det, (this.m02() * this.m21() - this.m01() * this.m22()) / det, (-this.m02() * this.m11() + this.m01() * this.m12()) / det, (this.m12() * this.m20() - this.m10() * this.m22()) / det, (-this.m02() * this.m20() + this.m00() * this.m22()) / det, (this.m02() * this.m10() - this.m00() * this.m12()) / det, (-this.m11() * this.m20() + this.m10() * this.m21()) / det, (this.m01() * this.m20() - this.m00() * this.m21()) / det, (-this.m01() * this.m10() + this.m00() * this.m11()) / det, Types.OTHER);\n        } else {\n          throw new Error('Matrix could not be inverted, determinant === 0');\n        }\n        break;\n      default:\n        throw new Error('Matrix3.inverted with unknown type: ' + this.type);\n      }\n    },\n    multiplyMatrix: function (m) {\n      if (this.type === Types.IDENTITY || m.type === Types.IDENTITY) {\n        return this.type === Types.IDENTITY ? m : this;\n      }\n      if (this.type === m.type) {\n        if (this.type === Types.TRANSLATION_2D) {\n          return this.rowMajor(1, 0, this.m02() + m.m02(), 0, 1, this.m12() + m.m12(), 0, 0, 1, Types.TRANSLATION_2D);\n        } else if (this.type === Types.SCALING) {\n          return this.rowMajor(this.m00() * m.m00(), 0, 0, 0, this.m11() * m.m11(), 0, 0, 0, 1, Types.SCALING);\n        }\n      }\n      if (this.type !== Types.OTHER && m.type !== Types.OTHER) {\n        return this.rowMajor(this.m00() * m.m00() + this.m01() * m.m10(), this.m00() * m.m01() + this.m01() * m.m11(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02(), this.m10() * m.m00() + this.m11() * m.m10(), this.m10() * m.m01() + this.m11() * m.m11(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12(), 0, 0, 1, Types.AFFINE);\n      }\n      return this.rowMajor(this.m00() * m.m00() + this.m01() * m.m10() + this.m02() * m.m20(), this.m00() * m.m01() + this.m01() * m.m11() + this.m02() * m.m21(), this.m00() * m.m02() + this.m01() * m.m12() + this.m02() * m.m22(), this.m10() * m.m00() + this.m11() * m.m10() + this.m12() * m.m20(), this.m10() * m.m01() + this.m11() * m.m11() + this.m12() * m.m21(), this.m10() * m.m02() + this.m11() * m.m12() + this.m12() * m.m22(), this.m20() * m.m00() + this.m21() * m.m10() + this.m22() * m.m20(), this.m20() * m.m01() + this.m21() * m.m11() + this.m22() * m.m21(), this.m20() * m.m02() + this.m21() * m.m12() + this.m22() * m.m22());\n    },\n    multiplyVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02();\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12();\n      v.setX(x);\n      v.setY(y);\n      return v;\n    },\n    multiplyVector3: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y + this.m02() * v.z;\n      var y = this.m10() * v.x + this.m11() * v.y + this.m12() * v.z;\n      var z = this.m20() * v.x + this.m21() * v.y + this.m22() * v.z;\n      v.setX(x);\n      v.setY(y);\n      v.setZ(z);\n      return v;\n    },\n    multiplyTransposeVector2: function (v) {\n      var x = this.m00() * v.x + this.m10() * v.y;\n      var y = this.m01() * v.x + this.m11() * v.y;\n      v.setX(x);\n      v.setY(y);\n      return v;\n    },\n    multiplyRelativeVector2: function (v) {\n      var x = this.m00() * v.x + this.m01() * v.y;\n      var y = this.m10() * v.y + this.m11() * v.y;\n      v.setX(x);\n      v.setY(y);\n      return v;\n    },\n    canvasSetTransform: function (context) {\n      context.setTransform(this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);\n    },\n    canvasAppendTransform: function (context) {\n      if (this.type !== Types.IDENTITY) {\n        context.transform(this.entries[0], this.entries[1], this.entries[3], this.entries[4], this.entries[6], this.entries[7]);\n      }\n    }\n  };\n  Matrix3.IDENTITY = new Matrix3(1, 0, 0, 0, 1, 0, 0, 0, 1, Types.IDENTITY);\n  Matrix3.IDENTITY.makeImmutable();\n  Matrix3.X_REFLECTION = new Matrix3(-1, 0, 0, 0, 1, 0, 0, 0, 1, Types.AFFINE);\n  Matrix3.X_REFLECTION.makeImmutable();\n  Matrix3.Y_REFLECTION = new Matrix3(1, 0, 0, 0, -1, 0, 0, 0, 1, Types.AFFINE);\n  Matrix3.Y_REFLECTION.makeImmutable();\n  Matrix3.translationTimesMatrix = function (x, y, m) {\n    var type;\n    if (m.type === Types.IDENTITY || m.type === Types.TRANSLATION_2D) {\n      return new Matrix3(1, 0, m.m02() + x, 0, 1, m.m12() + y, 0, 0, 1, Types.TRANSLATION_2D);\n    } else if (m.type === Types.OTHER) {\n      type = Types.OTHER;\n    } else {\n      type = Types.AFFINE;\n    }\n    return new Matrix3(m.m00(), m.m01(), m.m02() + x, m.m10(), m.m11(), m.m12() + y, m.m20(), m.m21(), m.m22(), type);\n  };\n  Matrix3.printer = {\n    print: function (matrix) {\n      console.log(matrix.toString());\n    }\n  };\n  return Matrix3;\n});","\ndefine('DOT/Ray2',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Ray2 = function Ray2(pos, dir) {\n    this.pos = pos;\n    this.dir = dir;\n    null;\n    phetAllocation && phetAllocation('Ray2');\n  };\n  var Ray2 = dot.Ray2;\n  Ray2.prototype = {\n    constructor: Ray2,\n    shifted: function (distance) {\n      return new Ray2(this.pointAtDistance(distance), this.dir);\n    },\n    pointAtDistance: function (distance) {\n      return this.pos.plus(this.dir.timesScalar(distance));\n    },\n    toString: function () {\n      return this.pos.toString() + ' => ' + this.dir.toString();\n    }\n  };\n  return Ray2;\n});","\ndefine('DOT/Transform3',['require','DOT/dot','DOT/Matrix3','DOT/Vector2','DOT/Ray2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Matrix3');\n  require('DOT/Vector2');\n  require('DOT/Ray2');\n  dot.Transform3 = function Transform3(matrix) {\n    this.listeners = [];\n    this.set(matrix === undefined ? dot.Matrix3.IDENTITY : matrix);\n    phetAllocation && phetAllocation('Transform3');\n  };\n  var Transform3 = dot.Transform3;\n  Transform3.prototype = {\n    constructor: Transform3,\n    set: function (matrix) {\n      null;\n      var oldMatrix = this.matrix;\n      var length = this.listeners.length;\n      var i;\n      for (i = 0; i < length; i++) {\n        this.listeners[i].before(matrix, oldMatrix);\n      }\n      this.matrix = matrix;\n      this.inverse = null;\n      this.matrixTransposed = null;\n      this.inverseTransposed = null;\n      for (i = 0; i < length; i++) {\n        this.listeners[i].after(matrix, oldMatrix);\n      }\n    },\n    prepend: function (matrix) {\n      this.set(matrix.timesMatrix(this.matrix));\n    },\n    prependTranslation: function (x, y) {\n      this.set(dot.Matrix3.translationTimesMatrix(x, y, this.matrix));\n    },\n    append: function (matrix) {\n      this.set(this.matrix.timesMatrix(matrix));\n    },\n    prependTransform: function (transform) {\n      this.prepend(transform.matrix);\n    },\n    appendTransform: function (transform) {\n      this.append(transform.matrix);\n    },\n    applyToCanvasContext: function (context) {\n      context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m02(), this.matrix.m12());\n    },\n    copy: function () {\n      var transform = new Transform3(this.matrix);\n      transform.inverse = this.inverse;\n      transform.matrixTransposed = this.matrixTransposed;\n      transform.inverseTransposed = this.inverseTransposed;\n    },\n    deepCopy: function () {\n      var transform = new Transform3(this.matrix.copy());\n      transform.inverse = this.inverse ? this.inverse.copy() : null;\n      transform.matrixTransposed = this.matrixTransposed ? this.matrixTransposed.copy() : null;\n      transform.inverseTransposed = this.inverseTransposed ? this.inverseTransposed.copy() : null;\n    },\n    getMatrix: function () {\n      return this.matrix;\n    },\n    getInverse: function () {\n      if (this.inverse === null) {\n        this.inverse = this.matrix.inverted();\n      }\n      return this.inverse;\n    },\n    getMatrixTransposed: function () {\n      if (this.matrixTransposed === null) {\n        this.matrixTransposed = this.matrix.transposed();\n      }\n      return this.matrixTransposed;\n    },\n    getInverseTransposed: function () {\n      if (this.inverseTransposed === null) {\n        this.inverseTransposed = this.getInverse().transposed();\n      }\n      return this.inverseTransposed;\n    },\n    isIdentity: function () {\n      return this.matrix.type === dot.Matrix3.Types.IDENTITY;\n    },\n    isFinite: function () {\n      return this.matrix.isFinite();\n    },\n    transformPosition2: function (vec2) {\n      return this.matrix.timesVector2(vec2);\n    },\n    transformDelta2: function (vec2) {\n      var m = this.getMatrix();\n      return new dot.Vector2(m.m00() * vec2.x + m.m01() * vec2.y, m.m10() * vec2.x + m.m11() * vec2.y);\n    },\n    transformNormal2: function (vec2) {\n      return this.getInverse().timesTransposeVector2(vec2);\n    },\n    transformX: function (x) {\n      var m = this.getMatrix();\n      null;\n      return m.m00() * x + m.m02();\n    },\n    transformY: function (y) {\n      var m = this.getMatrix();\n      null;\n      return m.m11() * y + m.m12();\n    },\n    transformDeltaX: function (x) {\n      var m = this.getMatrix();\n      null;\n      return m.m00() * x;\n    },\n    transformDeltaY: function (y) {\n      var m = this.getMatrix();\n      null;\n      return m.m11() * y;\n    },\n    transformBounds2: function (bounds2) {\n      return bounds2.transformed(this.matrix);\n    },\n    transformShape: function (shape) {\n      return shape.transformed(this.matrix);\n    },\n    transformRay2: function (ray) {\n      return new dot.Ray2(this.transformPosition2(ray.pos), this.transformDelta2(ray.dir).normalized());\n    },\n    inversePosition2: function (vec2) {\n      return this.getInverse().timesVector2(vec2);\n    },\n    inverseDelta2: function (vec2) {\n      var m = this.getInverse();\n      return new dot.Vector2(m.m00() * vec2.x + m.m01() * vec2.y, m.m10() * vec2.x + m.m11() * vec2.y);\n    },\n    inverseNormal2: function (vec2) {\n      return this.matrix.timesTransposeVector2(vec2);\n    },\n    inverseX: function (x) {\n      var m = this.getInverse();\n      null;\n      return m.m00() * x + m.m02();\n    },\n    inverseY: function (y) {\n      var m = this.getInverse();\n      null;\n      return m.m11() * y + m.m12();\n    },\n    inverseDeltaX: function (x) {\n      var m = this.getInverse();\n      null;\n      return m.m00() * x;\n    },\n    inverseDeltaY: function (y) {\n      var m = this.getInverse();\n      null;\n      return m.m11() * y;\n    },\n    inverseBounds2: function (bounds2) {\n      return bounds2.transformed(this.getInverse());\n    },\n    inverseShape: function (shape) {\n      return shape.transformed(this.getInverse());\n    },\n    inverseRay2: function (ray) {\n      return new dot.Ray2(this.inversePosition2(ray.pos), this.inverseDelta2(ray.dir).normalized());\n    },\n    addTransformListener: function (listener) {\n      null;\n      this.listeners.push(listener);\n    },\n    prependTransformListener: function (listener) {\n      null;\n      this.listeners.unshift(listener);\n    },\n    removeTransformListener: function (listener) {\n      null;\n      this.listeners.splice(_.indexOf(this.listeners, listener), 1);\n    }\n  };\n  return Transform3;\n});","\ndefine('DOT/Bounds2',['require','DOT/dot','DOT/Vector2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Vector2');\n  dot.Bounds2 = function Bounds2(minX, minY, maxX, maxY) {\n    null;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    phetAllocation && phetAllocation('Bounds2');\n  };\n  var Bounds2 = dot.Bounds2;\n  Bounds2.prototype = {\n    constructor: Bounds2,\n    getWidth: function () {\n      return this.maxX - this.minX;\n    },\n    get width() {\n      return this.getWidth();\n    },\n    getHeight: function () {\n      return this.maxY - this.minY;\n    },\n    get height() {\n      return this.getHeight();\n    },\n    getX: function () {\n      return this.minX;\n    },\n    get x() {\n      return this.getX();\n    },\n    getY: function () {\n      return this.minY;\n    },\n    get y() {\n      return this.getY();\n    },\n    getCenter: function () {\n      return new dot.Vector2(this.getCenterX(), this.getCenterY());\n    },\n    get center() {\n      return this.getCenter();\n    },\n    getCenterX: function () {\n      return (this.maxX + this.minX) / 2;\n    },\n    get centerX() {\n      return this.getCenterX();\n    },\n    getCenterY: function () {\n      return (this.maxY + this.minY) / 2;\n    },\n    get centerY() {\n      return this.getCenterY();\n    },\n    getMinX: function () {\n      return this.minX;\n    },\n    getMinY: function () {\n      return this.minY;\n    },\n    getMaxX: function () {\n      return this.maxX;\n    },\n    getMaxY: function () {\n      return this.maxY;\n    },\n    isEmpty: function () {\n      return this.getWidth() < 0 || this.getHeight() < 0;\n    },\n    isFinite: function () {\n      return isFinite(this.minX) && isFinite(this.minY) && isFinite(this.maxX) && isFinite(this.maxY);\n    },\n    isValid: function () {\n      return !this.isEmpty() && this.isFinite();\n    },\n    containsCoordinates: function (x, y) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    },\n    containsPoint: function (point) {\n      return this.containsCoordinates(point.x, point.y);\n    },\n    containsBounds: function (bounds) {\n      return this.minX <= bounds.minX && this.maxX >= bounds.maxX && this.minY <= bounds.minY && this.maxY >= bounds.maxY;\n    },\n    intersectsBounds: function (bounds) {\n      return !this.intersection(bounds).isEmpty();\n    },\n    toString: function () {\n      return '[x:(' + this.minX + ',' + this.maxX + '),y:(' + this.minY + ',' + this.maxY + ')]';\n    },\n    equals: function (other) {\n      return this.minX === other.minX && this.minY === other.minY && this.maxX === other.maxX && this.maxY === other.maxY;\n    },\n    equalsEpsilon: function (other, epsilon) {\n      epsilon = epsilon || 0;\n      var thisFinite = this.isFinite();\n      var otherFinite = other.isFinite();\n      if (thisFinite && otherFinite) {\n        return Math.abs(this.minX - other.minX) < epsilon && Math.abs(this.minY - other.minY) < epsilon && Math.abs(this.maxX - other.maxX) < epsilon && Math.abs(this.maxY - other.maxY) < epsilon;\n      } else if (thisFinite !== otherFinite) {\n        return false;\n      } else if (this === other) {\n        return true;\n      } else {\n        return (isFinite(this.minX + other.minX) ? Math.abs(this.minX - other.minX) < epsilon : this.minX === other.minX) && (isFinite(this.minY + other.minY) ? Math.abs(this.minY - other.minY) < epsilon : this.minY === other.minY) && (isFinite(this.maxX + other.maxX) ? Math.abs(this.maxX - other.maxX) < epsilon : this.maxX === other.maxX) && (isFinite(this.maxY + other.maxY) ? Math.abs(this.maxY - other.maxY) < epsilon : this.maxY === other.maxY);\n      }\n    },\n    copy: function () {\n      return new Bounds2(this.minX, this.minY, this.maxX, this.maxY);\n    },\n    union: function (bounds) {\n      return new Bounds2(Math.min(this.minX, bounds.minX), Math.min(this.minY, bounds.minY), Math.max(this.maxX, bounds.maxX), Math.max(this.maxY, bounds.maxY));\n    },\n    intersection: function (bounds) {\n      return new Bounds2(Math.max(this.minX, bounds.minX), Math.max(this.minY, bounds.minY), Math.min(this.maxX, bounds.maxX), Math.min(this.maxY, bounds.maxY));\n    },\n    withCoordinates: function (x, y) {\n      return new Bounds2(Math.min(this.minX, x), Math.min(this.minY, y), Math.max(this.maxX, x), Math.max(this.maxY, y));\n    },\n    withPoint: function (point) {\n      return this.withCoordinates(point.x, point.y);\n    },\n    withMinX: function (minX) {\n      return new Bounds2(minX, this.minY, this.maxX, this.maxY);\n    },\n    withMinY: function (minY) {\n      return new Bounds2(this.minX, minY, this.maxX, this.maxY);\n    },\n    withMaxX: function (maxX) {\n      return new Bounds2(this.minX, this.minY, maxX, this.maxY);\n    },\n    withMaxY: function (maxY) {\n      return new Bounds2(this.minX, this.minY, this.maxX, maxY);\n    },\n    roundedOut: function () {\n      return new Bounds2(Math.floor(this.minX), Math.floor(this.minY), Math.ceil(this.maxX), Math.ceil(this.maxY));\n    },\n    roundedIn: function () {\n      return new Bounds2(Math.ceil(this.minX), Math.ceil(this.minY), Math.floor(this.maxX), Math.floor(this.maxY));\n    },\n    transformed: function (matrix) {\n      return this.copy().transform(matrix);\n    },\n    dilated: function (d) {\n      return new Bounds2(this.minX - d, this.minY - d, this.maxX + d, this.maxY + d);\n    },\n    eroded: function (d) {\n      return this.dilated(-d);\n    },\n    shiftedX: function (x) {\n      return new Bounds2(this.minX + x, this.minY, this.maxX + x, this.maxY);\n    },\n    shiftedY: function (y) {\n      return new Bounds2(this.minX, this.minY + y, this.maxX, this.maxY + y);\n    },\n    shifted: function (x, y) {\n      return new Bounds2(this.minX + x, this.minY + y, this.maxX + x, this.maxY + y);\n    },\n    set: function (minX, minY, maxX, maxY) {\n      this.minX = minX;\n      this.minY = minY;\n      this.maxX = maxX;\n      this.maxY = maxY;\n      return this;\n    },\n    setBounds: function (bounds) {\n      return this.set(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    },\n    includeBounds: function (bounds) {\n      this.minX = Math.min(this.minX, bounds.minX);\n      this.minY = Math.min(this.minY, bounds.minY);\n      this.maxX = Math.max(this.maxX, bounds.maxX);\n      this.maxY = Math.max(this.maxY, bounds.maxY);\n      return this;\n    },\n    constrainBounds: function (bounds) {\n      this.minX = Math.max(this.minX, bounds.minX);\n      this.minY = Math.max(this.minY, bounds.minY);\n      this.maxX = Math.min(this.maxX, bounds.maxX);\n      this.maxY = Math.min(this.maxY, bounds.maxY);\n      return this;\n    },\n    addCoordinates: function (x, y) {\n      this.minX = Math.min(this.minX, x);\n      this.minY = Math.min(this.minY, y);\n      this.maxX = Math.max(this.maxX, x);\n      this.maxY = Math.max(this.maxY, y);\n      return this;\n    },\n    addPoint: function (point) {\n      return this.addCoordinates(point.x, point.y);\n    },\n    setMinX: function (minX) {\n      this.minX = minX;\n      return this;\n    },\n    setMinY: function (minY) {\n      this.minY = minY;\n      return this;\n    },\n    setMaxX: function (maxX) {\n      this.maxX = maxX;\n      return this;\n    },\n    setMaxY: function (maxY) {\n      this.maxY = maxY;\n      return this;\n    },\n    roundOut: function () {\n      this.minX = Math.floor(this.minX);\n      this.minY = Math.floor(this.minY);\n      this.maxX = Math.ceil(this.maxX);\n      this.maxY = Math.ceil(this.maxY);\n      return this;\n    },\n    roundIn: function () {\n      this.minX = Math.ceil(this.minX);\n      this.minY = Math.ceil(this.minY);\n      this.maxX = Math.floor(this.maxX);\n      this.maxY = Math.floor(this.maxY);\n      return this;\n    },\n    transform: function (matrix) {\n      if (this.isEmpty()) {\n        return this;\n      }\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      var vector = new dot.Vector2();\n      this.setBounds(Bounds2.NOTHING);\n      this.addPoint(matrix.multiplyVector2(vector.set(minX, minY)));\n      this.addPoint(matrix.multiplyVector2(vector.set(minX, maxY)));\n      this.addPoint(matrix.multiplyVector2(vector.set(maxX, minY)));\n      this.addPoint(matrix.multiplyVector2(vector.set(maxX, maxY)));\n      return this;\n    },\n    dilate: function (d) {\n      return this.set(this.minX - d, this.minY - d, this.maxX + d, this.maxY + d);\n    },\n    erode: function (d) {\n      return this.dilate(-d);\n    },\n    shiftX: function (x) {\n      return this.setMinX(this.minX + x).setMaxX(this.maxX + x);\n    },\n    shiftY: function (y) {\n      return this.setMinY(this.minY + y).setMaxY(this.maxY + y);\n    },\n    shift: function (x, y) {\n      return this.shiftX(x).shiftY(y);\n    }\n  };\n  Bounds2.rect = function (x, y, width, height) {\n    return new Bounds2(x, y, x + width, y + height);\n  };\n  Bounds2.EVERYTHING = new Bounds2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n  Bounds2.NOTHING = new Bounds2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  return Bounds2;\n});","\ndefine('KITE/kite',['require','PHET_CORE/phetAllocation'],function (require) {\n  'use strict';\n  window.phetAllocation = require('PHET_CORE/phetAllocation');\n  var kite = {};\n  kite.assert = null;\n  return kite;\n});","\ndefine('KITE/segments/Segment',['require','KITE/kite','DOT/Util'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var DotUtil = require('DOT/Util');\n  kite.Segment = function Segment() {\n  };\n  var Segment = kite.Segment;\n  Segment.prototype = {\n    constructor: Segment,\n    subdivisions: function (tList, skipComputation) {\n      var right = this;\n      var result = [];\n      for (var i = 0; i < tList.length; i++) {\n        var t = tList[i];\n        var arr = right.subdivided(t, skipComputation);\n        null;\n        result.push(arr[0]);\n        right = arr[1];\n        for (var j = i + 1; j < tList.length; j++) {\n          tList[j] = DotUtil.linear(t, 1, 0, 1, tList[j]);\n        }\n      }\n      result.push(right);\n      return result;\n    },\n    subdividedIntoMonotone: function () {\n      return this.subdivisions(this.getInteriorExtremaTs());\n    }\n  };\n  return Segment;\n});","\ndefine('KITE/segments/Line',['require','KITE/kite','PHET_CORE/inherit','DOT/Bounds2','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var lineLineIntersection = require('DOT/Util').lineLineIntersection;\n  var Segment = require('KITE/segments/Segment');\n  Segment.Line = function Line(start, end) {\n    this.start = start;\n    this.end = end;\n    if (start.equals(end, 0)) {\n      this.invalid = true;\n      return;\n    }\n    this.startTangent = end.minus(start).normalized();\n    this.endTangent = this.startTangent;\n    this.bounds = Bounds2.NOTHING.withPoint(start).withPoint(end);\n  };\n  inherit(Segment, Segment.Line, {\n    positionAt: function (t) {\n      return this.start.plus(this.end.minus(this.start).times(t));\n    },\n    tangentAt: function (t) {\n      return this.startTangent;\n    },\n    curvatureAt: function (t) {\n      return 0;\n    },\n    getSVGPathFragment: function () {\n      return 'L ' + this.end.x + ' ' + this.end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      var offset = this.endTangent.perpendicular().negated().times(lineWidth / 2);\n      return [new Segment.Line(this.start.plus(offset), this.end.plus(offset))];\n    },\n    strokeRight: function (lineWidth) {\n      var offset = this.startTangent.perpendicular().times(lineWidth / 2);\n      return [new Segment.Line(this.end.plus(offset), this.start.plus(offset))];\n    },\n    getInteriorExtremaTs: function () {\n      return [];\n    },\n    subdivided: function (t) {\n      var pt = this.positionAt(t);\n      return [\n        new Segment.Line(this.start, pt),\n        new Segment.Line(pt, this.end)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Line.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var result = [];\n      var start = this.start;\n      var end = this.end;\n      var intersection = lineLineIntersection(start, end, ray.pos, ray.pos.plus(ray.dir));\n      if (!isFinite(intersection.x) || !isFinite(intersection.y)) {\n        return result;\n      }\n      if (start.x !== end.x && (start.x > end.x ? intersection.x >= start.x || intersection.x < end.x : intersection.x <= start.x || intersection.x > end.x)) {\n        return result;\n      }\n      if (start.y !== end.y && (start.y > end.y ? intersection.y >= start.y || intersection.y < end.y : intersection.y <= start.y || intersection.y > end.y)) {\n        return result;\n      }\n      var t = intersection.minus(ray.pos).dot(ray.dir);\n      if (t < 0) {\n        return result;\n      }\n      var diff = end.minus(start);\n      var perp = diff.perpendicular();\n      result.push({\n        distance: t,\n        point: ray.pointAtDistance(t),\n        normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n        wind: ray.dir.perpendicular().dot(diff) < 0 ? 1 : -1\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var hits = this.intersection(ray);\n      if (hits.length) {\n        return hits[0].wind;\n      } else {\n        return 0;\n      }\n    },\n    writeToContext: function (context) {\n      context.lineTo(this.end.x, this.end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Line(matrix.timesVector2(this.start), matrix.timesVector2(this.end));\n    }\n  });\n  return Segment.Line;\n});","\ndefine('KITE/segments/Arc',['require','KITE/kite','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var DotUtil = require('DOT/Util');\n  var Segment = require('KITE/segments/Segment');\n  Segment.Arc = function Arc(center, radius, startAngle, endAngle, anticlockwise) {\n    if (radius < 0) {\n      radius = -radius;\n      startAngle += Math.PI;\n      endAngle += Math.PI;\n    }\n    this.center = center;\n    this.radius = radius;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.anticlockwise = anticlockwise;\n    this.start = this.positionAtAngle(startAngle);\n    this.end = this.positionAtAngle(endAngle);\n    this.startTangent = this.tangentAtAngle(startAngle);\n    this.endTangent = this.tangentAtAngle(endAngle);\n    if (radius <= 0 || startAngle === endAngle) {\n      this.invalid = true;\n      return;\n    }\n    if (this.anticlockwise) {\n      if (this.startAngle > this.endAngle) {\n        this.actualEndAngle = this.endAngle;\n      } else if (this.startAngle < this.endAngle) {\n        this.actualEndAngle = this.endAngle - 2 * Math.PI;\n      } else {\n        this.actualEndAngle = this.startAngle;\n      }\n    } else {\n      if (this.startAngle < this.endAngle) {\n        this.actualEndAngle = this.endAngle;\n      } else if (this.startAngle > this.endAngle) {\n        this.actualEndAngle = this.endAngle + Math.PI * 2;\n      } else {\n        this.actualEndAngle = this.startAngle;\n      }\n    }\n    null;\n    null;\n    var isFullPerimeter = !anticlockwise && endAngle - startAngle >= Math.PI * 2 || anticlockwise && startAngle - endAngle >= Math.PI * 2;\n    this.angleDifference = this.anticlockwise ? this.startAngle - this.endAngle : this.endAngle - this.startAngle;\n    if (this.angleDifference < 0) {\n      this.angleDifference += Math.PI * 2;\n    }\n    null;\n    this.bounds = Bounds2.NOTHING;\n    this.bounds = this.bounds.withPoint(this.start);\n    this.bounds = this.bounds.withPoint(this.end);\n    var that = this;\n    function boundsAtAngle(angle) {\n      if (that.containsAngle(angle)) {\n        that.bounds = that.bounds.withPoint(center.plus(Vector2.createPolar(radius, angle)));\n      }\n    }\n    if (startAngle !== endAngle) {\n      boundsAtAngle(0);\n      boundsAtAngle(Math.PI / 2);\n      boundsAtAngle(Math.PI);\n      boundsAtAngle(3 * Math.PI / 2);\n    }\n  };\n  inherit(Segment, Segment.Arc, {\n    mapAngle: function (angle) {\n      return this.startAngle > this.actualEndAngle ? DotUtil.moduloBetweenUp(angle, this.startAngle - 2 * Math.PI, this.startAngle) : DotUtil.moduloBetweenDown(angle, this.startAngle, this.startAngle + 2 * Math.PI);\n    },\n    tAtAngle: function (angle) {\n      return (this.mapAngle(angle) - this.startAngle) / (this.actualEndAngle - this.startAngle);\n    },\n    angleAt: function (t) {\n      return this.startAngle + (this.actualEndAngle - this.startAngle) * t;\n    },\n    positionAt: function (t) {\n      return this.positionAtAngle(this.angleAt(t));\n    },\n    tangentAt: function (t) {\n      return this.tangentAtAngle(this.angleAt(t));\n    },\n    curvatureAt: function (t) {\n      return (this.anticlockwise ? -1 : 1) / this.radius;\n    },\n    positionAtAngle: function (angle) {\n      return this.center.plus(Vector2.createPolar(this.radius, angle));\n    },\n    tangentAtAngle: function (angle) {\n      var normal = Vector2.createPolar(1, angle);\n      return this.anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n    containsAngle: function (angle) {\n      var normalizedAngle = this.anticlockwise ? angle - this.endAngle : angle - this.startAngle;\n      var positiveMinAngle = DotUtil.moduloBetweenDown(normalizedAngle, 0, Math.PI * 2);\n      return positiveMinAngle <= this.angleDifference;\n    },\n    getSVGPathFragment: function () {\n      var epsilon = 0.01;\n      var sweepFlag = this.anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      if (this.angleDifference < Math.PI * 2 - epsilon) {\n        largeArcFlag = this.angleDifference < Math.PI ? '0' : '1';\n        return 'A ' + this.radius + ' ' + this.radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n      } else {\n        var splitOppositeAngle = (this.startAngle + this.endAngle) / 2;\n        var splitPoint = this.center.plus(Vector2.createPolar(this.radius, splitOppositeAngle));\n        largeArcFlag = '0';\n        var firstArc = 'A ' + this.radius + ' ' + this.radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + splitPoint.x + ' ' + splitPoint.y;\n        var secondArc = 'A ' + this.radius + ' ' + this.radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n        return firstArc + ' ' + secondArc;\n      }\n    },\n    strokeLeft: function (lineWidth) {\n      return [new Segment.Arc(this.center, this.radius + (this.anticlockwise ? 1 : -1) * lineWidth / 2, this.startAngle, this.endAngle, this.anticlockwise)];\n    },\n    strokeRight: function (lineWidth) {\n      return [new Segment.Arc(this.center, this.radius + (this.anticlockwise ? -1 : 1) * lineWidth / 2, this.endAngle, this.startAngle, !this.anticlockwise)];\n    },\n    getInteriorExtremaTs: function () {\n      var that = this;\n      var result = [];\n      _.each([\n        0,\n        Math.PI / 2,\n        Math.PI,\n        3 * Math.PI / 2\n      ], function (angle) {\n        if (that.containsAngle(angle)) {\n          var t = that.tAtAngle(angle);\n          var epsilon = 1e-10;\n          if (t > epsilon && t < 1 - epsilon) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    subdivided: function (t) {\n      var angle0 = this.angleAt(0);\n      var angleT = this.angleAt(t);\n      var angle1 = this.angleAt(1);\n      return [\n        new Segment.Arc(this.center, this.radius, angle0, angleT, this.anticlockwise),\n        new Segment.Arc(this.center, this.radius, angleT, angle1, this.anticlockwise)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.intersectsBounds unimplemented!');\n    },\n    intersection: function (ray) {\n      var result = [];\n      var epsilon = 0;\n      var centerToRay = ray.pos.minus(this.center);\n      var tmp = ray.dir.dot(centerToRay);\n      var centerToRayDistSq = centerToRay.magnitudeSquared();\n      var discriminant = 4 * tmp * tmp - 4 * (centerToRayDistSq - this.radius * this.radius);\n      if (discriminant < epsilon) {\n        return result;\n      }\n      var base = ray.dir.dot(this.center) - ray.dir.dot(ray.pos);\n      var sqt = Math.sqrt(discriminant) / 2;\n      var ta = base - sqt;\n      var tb = base + sqt;\n      if (tb < epsilon) {\n        return result;\n      }\n      var pointB = ray.pointAtDistance(tb);\n      var normalB = pointB.minus(this.center).normalized();\n      if (ta < epsilon) {\n        if (this.containsAngle(normalB.angle())) {\n          result.push({\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(),\n            wind: this.anticlockwise ? -1 : 1\n          });\n        }\n      } else {\n        var pointA = ray.pointAtDistance(ta);\n        var normalA = pointA.minus(this.center).normalized();\n        if (this.containsAngle(normalA.angle())) {\n          result.push({\n            distance: ta,\n            point: pointA,\n            normal: normalA,\n            wind: this.anticlockwise ? 1 : -1\n          });\n        }\n        if (this.containsAngle(normalB.angle())) {\n          result.push({\n            distance: tb,\n            point: pointB,\n            normal: normalB.negated(),\n            wind: this.anticlockwise ? -1 : 1\n          });\n        }\n      }\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.arc(this.center.x, this.center.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise);\n    },\n    transformed: function (matrix) {\n      var startAngle = matrix.timesVector2(Vector2.createPolar(1, this.startAngle)).minus(matrix.timesVector2(Vector2.ZERO)).angle();\n      var endAngle = matrix.timesVector2(Vector2.createPolar(1, this.endAngle)).minus(matrix.timesVector2(Vector2.ZERO)).angle();\n      var anticlockwise = matrix.getDeterminant() >= 0 ? this.anticlockwise : !this.anticlockwise;\n      var scaleVector = matrix.getScaleVector();\n      if (scaleVector.x !== scaleVector.y) {\n        var radiusX = scaleVector.x * this.radius;\n        var radiusY = scaleVector.y * this.radius;\n        return new Segment.EllipticalArc(matrix.timesVector2(this.center), radiusX, radiusY, 0, startAngle, endAngle, anticlockwise);\n      } else {\n        var radius = scaleVector.x * this.radius;\n        return new Segment.Arc(matrix.timesVector2(this.center), radius, startAngle, endAngle, anticlockwise);\n      }\n    }\n  });\n  return Segment.Arc;\n});","\ndefine('KITE/util/Subpath',['require','DOT/Vector2','DOT/Bounds2','DOT/Util','KITE/kite','KITE/segments/Line','KITE/segments/Arc'],function (require) {\n  'use strict';\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var lineLineIntersection = require('DOT/Util').lineLineIntersection;\n  var kite = require('KITE/kite');\n  require('KITE/segments/Line');\n  require('KITE/segments/Arc');\n  kite.Subpath = function Subpath(segments, points, closed) {\n    this.segments = segments || [];\n    this.points = points || (segments && segments.length ? _.map(segments, function (segment) {\n      return segment.start;\n    }).concat(segments[segments.length - 1].end) : []);\n    this.closed = !!closed;\n    this._strokedSubpaths = null;\n    this._strokedSubpathsComputed = false;\n    this._strokedStyles = null;\n  };\n  var Subpath = kite.Subpath;\n  Subpath.prototype = {\n    copy: function () {\n      return new Subpath(this.segments.slice(0), this.points.slice(0), this.closed);\n    },\n    invalidate: function () {\n      this._strokedSubpathsComputed = false;\n    },\n    addPoint: function (point) {\n      this.points.push(point);\n      return this;\n    },\n    addSegment: function (segment) {\n      if (!segment.invalid) {\n        null;\n        null;\n        null;\n        null;\n        null;\n        this.segments.push(segment);\n        this.invalidate();\n      }\n      return this;\n    },\n    close: function () {\n      this.closed = true;\n    },\n    getLength: function () {\n      return this.points.length;\n    },\n    getFirstPoint: function () {\n      return _.first(this.points);\n    },\n    getLastPoint: function () {\n      return _.last(this.points);\n    },\n    getFirstSegment: function () {\n      return _.first(this.segments);\n    },\n    getLastSegment: function () {\n      return _.last(this.segments);\n    },\n    isDrawable: function () {\n      return this.segments.length > 0;\n    },\n    isClosed: function () {\n      return this.closed;\n    },\n    hasClosingSegment: function () {\n      return !this.getFirstPoint().equalsEpsilon(this.getLastPoint(), 1e-9);\n    },\n    getClosingSegment: function () {\n      null;\n      return new kite.Segment.Line(this.getLastPoint(), this.getFirstPoint());\n    },\n    writeToContext: function (context) {\n      if (this.isDrawable()) {\n        var startPoint = this.getFirstSegment().start;\n        context.moveTo(startPoint.x, startPoint.y);\n        var len = this.segments.length;\n        for (var i = 0; i < len; i++) {\n          this.segments[i].writeToContext(context);\n        }\n        if (this.closed) {\n          context.closePath();\n        }\n      }\n    },\n    transformed: function (matrix) {\n      return new Subpath(_.map(this.segments, function (segment) {\n        return segment.transformed(matrix);\n      }), _.map(this.points, function (point) {\n        return matrix.timesVector2(point);\n      }), this.closed);\n    },\n    computeBounds: function () {\n      var bounds = Bounds2.NOTHING.copy();\n      var len = this.segments.length;\n      for (var i = 0; i < len; i++) {\n        bounds.includeBounds(this.segments[i].bounds);\n      }\n      return bounds;\n    },\n    stroked: function (lineStyles) {\n      if (!this.isDrawable()) {\n        return [];\n      }\n      if (lineStyles === undefined) {\n        lineStyles = new kite.LineStyles();\n      }\n      if (this._strokedSubpathsComputed && this._strokedStyles.equals(lineStyles)) {\n        return this._strokedSubpaths;\n      }\n      var lineWidth = lineStyles.lineWidth;\n      function join(center, fromTangent, toTangent) {\n        var fromPoint = center.plus(fromTangent.perpendicular().negated().times(lineWidth / 2));\n        var toPoint = center.plus(toTangent.perpendicular().negated().times(lineWidth / 2));\n        var bevel = fromPoint.equals(toPoint) ? [] : [new kite.Segment.Line(fromPoint, toPoint)];\n        if (fromTangent.perpendicular().dot(toTangent) > 0) {\n          switch (lineStyles.lineJoin) {\n          case 'round':\n            var fromAngle = fromTangent.angle() + Math.PI / 2;\n            var toAngle = toTangent.angle() + Math.PI / 2;\n            return [new kite.Segment.Arc(center, lineWidth / 2, fromAngle, toAngle, true)];\n          case 'miter':\n            var theta = fromTangent.angleBetween(toTangent.negated());\n            var notStraight = theta < Math.PI - 0.00001;\n            if (1 / Math.sin(theta / 2) <= lineStyles.miterLimit && theta < Math.PI - 0.00001) {\n              var miterPoint = lineLineIntersection(fromPoint, fromPoint.plus(fromTangent), toPoint, toPoint.plus(toTangent));\n              return [\n                new kite.Segment.Line(fromPoint, miterPoint),\n                new kite.Segment.Line(miterPoint, toPoint)\n              ];\n            } else {\n              return bevel;\n            }\n            break;\n          case 'bevel':\n            return bevel;\n          }\n        } else {\n          return bevel;\n        }\n      }\n      function cap(center, tangent) {\n        var fromPoint = center.plus(tangent.perpendicular().times(-lineWidth / 2));\n        var toPoint = center.plus(tangent.perpendicular().times(lineWidth / 2));\n        switch (lineStyles.lineCap) {\n        case 'butt':\n          return [new kite.Segment.Line(fromPoint, toPoint)];\n        case 'round':\n          var tangentAngle = tangent.angle();\n          return [new kite.Segment.Arc(center, lineWidth / 2, tangentAngle + Math.PI / 2, tangentAngle - Math.PI / 2, true)];\n        case 'square':\n          var toLeft = tangent.perpendicular().negated().times(lineWidth / 2);\n          var toRight = tangent.perpendicular().times(lineWidth / 2);\n          var toFront = tangent.times(lineWidth / 2);\n          var left = center.plus(toLeft).plus(toFront);\n          var right = center.plus(toRight).plus(toFront);\n          return [\n            new kite.Segment.Line(fromPoint, left),\n            new kite.Segment.Line(left, right),\n            new kite.Segment.Line(right, toPoint)\n          ];\n        }\n      }\n      var i;\n      var leftSegments = [];\n      var rightSegments = [];\n      var firstSegment = this.getFirstSegment();\n      var lastSegment = this.getLastSegment();\n      function addLeftSegments(segments) {\n        leftSegments = leftSegments.concat(segments);\n      }\n      function addRightSegments(segments) {\n        rightSegments = rightSegments.concat(segments);\n      }\n      var alreadyClosed = lastSegment.end.equals(firstSegment.start);\n      var closingSegment = alreadyClosed ? null : new kite.Segment.Line(this.segments[this.segments.length - 1].end, this.segments[0].start);\n      for (i = 0; i < this.segments.length; i++) {\n        if (i > 0) {\n          addLeftSegments(join(this.segments[i].start, this.segments[i - 1].endTangent, this.segments[i].startTangent, true));\n        }\n        addLeftSegments(this.segments[i].strokeLeft(lineWidth));\n      }\n      for (i = this.segments.length - 1; i >= 0; i--) {\n        if (i < this.segments.length - 1) {\n          addRightSegments(join(this.segments[i].end, this.segments[i + 1].startTangent.negated(), this.segments[i].endTangent.negated(), false));\n        }\n        addRightSegments(this.segments[i].strokeRight(lineWidth));\n      }\n      var subpaths;\n      if (this.closed) {\n        if (alreadyClosed) {\n          addLeftSegments(join(lastSegment.end, lastSegment.endTangent, firstSegment.startTangent));\n          addRightSegments(join(lastSegment.end, firstSegment.startTangent.negated(), lastSegment.endTangent.negated()));\n        } else {\n          addLeftSegments(join(closingSegment.start, lastSegment.endTangent, closingSegment.startTangent));\n          addLeftSegments(closingSegment.strokeLeft(lineWidth));\n          addLeftSegments(join(closingSegment.end, closingSegment.endTangent, firstSegment.startTangent));\n          addRightSegments(join(closingSegment.end, firstSegment.startTangent.negated(), closingSegment.endTangent.negated()));\n          addRightSegments(closingSegment.strokeRight(lineWidth));\n          addRightSegments(join(closingSegment.start, closingSegment.startTangent.negated(), lastSegment.endTangent.negated()));\n        }\n        subpaths = [\n          new Subpath(leftSegments, null, true),\n          new Subpath(rightSegments, null, true)\n        ];\n      } else {\n        subpaths = [new Subpath(leftSegments.concat(cap(lastSegment.end, lastSegment.endTangent)).concat(rightSegments).concat(cap(firstSegment.start, firstSegment.startTangent.negated())), null, true)];\n      }\n      this._strokedSubpaths = subpaths;\n      this._strokedSubpathsComputed = true;\n      this._strokedStyles = new kite.LineStyles(lineStyles);\n      return subpaths;\n    }\n  };\n  function segmentStartLeft(segment, lineWidth) {\n    null;\n    return segment.start.plus(segment.startTangent.perpendicular().negated().times(lineWidth / 2));\n  }\n  function segmentEndLeft(segment, lineWidth) {\n    null;\n    return segment.end.plus(segment.endTangent.perpendicular().negated().times(lineWidth / 2));\n  }\n  function segmentStartRight(segment, lineWidth) {\n    null;\n    return segment.start.plus(segment.startTangent.perpendicular().times(lineWidth / 2));\n  }\n  function segmentEndRight(segment, lineWidth) {\n    null;\n    return segment.end.plus(segment.endTangent.perpendicular().times(lineWidth / 2));\n  }\n  return kite.Subpath;\n});","\ndefine('KITE/../parser/svgPath',['require','KITE/kite'],function (require) {\n  var kite = require('KITE/kite');\n  function quote(s) {\n    return '\"' + s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape) + '\"';\n  }\n  kite.svgPath = {\n    parse: function (input, startRule) {\n      var parseFunctions = {\n          'svgPath': parse_svgPath,\n          'movetoDrawtoCommandGroups': parse_movetoDrawtoCommandGroups,\n          'movetoDrawtoCommandGroup': parse_movetoDrawtoCommandGroup,\n          'drawtoCommands': parse_drawtoCommands,\n          'drawtoCommand': parse_drawtoCommand,\n          'moveto': parse_moveto,\n          'movetoArgumentSequence': parse_movetoArgumentSequence,\n          'closepath': parse_closepath,\n          'lineto': parse_lineto,\n          'linetoArgumentSequence': parse_linetoArgumentSequence,\n          'horizontalLineto': parse_horizontalLineto,\n          'horizontalLinetoArgumentSequence': parse_horizontalLinetoArgumentSequence,\n          'verticalLineto': parse_verticalLineto,\n          'verticalLinetoArgumentSequence': parse_verticalLinetoArgumentSequence,\n          'curveto': parse_curveto,\n          'curvetoArgumentSequence': parse_curvetoArgumentSequence,\n          'curvetoArgument': parse_curvetoArgument,\n          'smoothCurveto': parse_smoothCurveto,\n          'smoothCurvetoArgumentSequence': parse_smoothCurvetoArgumentSequence,\n          'smoothCurvetoArgument': parse_smoothCurvetoArgument,\n          'quadraticBezierCurveto': parse_quadraticBezierCurveto,\n          'quadraticBezierCurvetoArgumentSequence': parse_quadraticBezierCurvetoArgumentSequence,\n          'quadraticBezierCurvetoArgument': parse_quadraticBezierCurvetoArgument,\n          'smoothQuadraticBezierCurveto': parse_smoothQuadraticBezierCurveto,\n          'smoothQuadraticBezierCurvetoArgumentSequence': parse_smoothQuadraticBezierCurvetoArgumentSequence,\n          'ellipticalArc': parse_ellipticalArc,\n          'ellipticalArcArgumentSequence': parse_ellipticalArcArgumentSequence,\n          'ellipticalArcArgument': parse_ellipticalArcArgument,\n          'coordinatePair': parse_coordinatePair,\n          'nonnegativeNumber': parse_nonnegativeNumber,\n          'number': parse_number,\n          'flag': parse_flag,\n          'commaWsp': parse_commaWsp,\n          'comma': parse_comma,\n          'floatingPointConstant': parse_floatingPointConstant,\n          'fractionalConstant': parse_fractionalConstant,\n          'exponent': parse_exponent,\n          'sign': parse_sign,\n          'digitSequence': parse_digitSequence,\n          'digit': parse_digit,\n          'wsp': parse_wsp\n        };\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error('Invalid rule name: ' + quote(startRule) + '.');\n        }\n      } else {\n        startRule = 'svgPath';\n      }\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      function padLeft(input, padding, length) {\n        var result = input;\n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        return result;\n      }\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        if (charCode <= 255) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        rightmostFailuresExpected.push(failure);\n      }\n      function parse_svgPath() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = [];\n        result1 = parse_wsp();\n        while (result1 !== null) {\n          result0.push(result1);\n          result1 = parse_wsp();\n        }\n        if (result0 !== null) {\n          result1 = parse_movetoDrawtoCommandGroups();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_wsp();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_wsp();\n            }\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, path) {\n            return path ? path : [];\n          }(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_movetoDrawtoCommandGroups() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_movetoDrawtoCommandGroup();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_movetoDrawtoCommandGroups();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a.concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_movetoDrawtoCommandGroup();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return a;\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_movetoDrawtoCommandGroup() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_moveto();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_drawtoCommands();\n            result2 = result2 !== null ? result2 : '';\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, m, c) {\n            return c.length ? m.concat(c) : m;\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_drawtoCommands() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_drawtoCommand();\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_drawtoCommands();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, cmd, cmds) {\n            return cmd.concat(cmds);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_drawtoCommand();\n          if (result0 !== null) {\n            result0 = function (offset, cmd) {\n              return cmd;\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_drawtoCommand() {\n        var result0;\n        result0 = parse_closepath();\n        if (result0 === null) {\n          result0 = parse_lineto();\n          if (result0 === null) {\n            result0 = parse_horizontalLineto();\n            if (result0 === null) {\n              result0 = parse_verticalLineto();\n              if (result0 === null) {\n                result0 = parse_curveto();\n                if (result0 === null) {\n                  result0 = parse_smoothCurveto();\n                  if (result0 === null) {\n                    result0 = parse_quadraticBezierCurveto();\n                    if (result0 === null) {\n                      result0 = parse_smoothQuadraticBezierCurveto();\n                      if (result0 === null) {\n                        result0 = parse_ellipticalArc();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_moveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 77) {\n          result0 = 'M';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"M\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_movetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return createMoveTo(args, false);\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 109) {\n            result0 = 'm';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"m\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_movetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return createMoveTo(args, true);\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_movetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, pair, list) {\n            return [pair].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, pair) {\n              return [pair];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_closepath() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 90) {\n          result0 = 'Z';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"Z\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 122) {\n            result0 = 'z';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"z\"');\n            }\n          }\n        }\n        if (result0 !== null) {\n          result0 = function (offset, command) {\n            return { cmd: 'close' };\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_lineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 76) {\n          result0 = 'L';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"L\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'lineTo',\n                args: [\n                  arg.x,\n                  arg.y\n                ]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 108) {\n            result0 = 'l';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"l\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_linetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'lineToRelative',\n                  args: [\n                    arg.x,\n                    arg.y\n                  ]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_linetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_linetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_horizontalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 72) {\n          result0 = 'H';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"H\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'horizontalLineTo',\n                args: [arg]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 104) {\n            result0 = 'h';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"h\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_horizontalLinetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'horizontalLineToRelative',\n                  args: [arg]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_horizontalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_horizontalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_number();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_verticalLineto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 86) {\n          result0 = 'V';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"V\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'verticalLineTo',\n                args: [arg]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 118) {\n            result0 = 'v';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"v\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_verticalLinetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'verticalLineToRelative',\n                  args: [arg]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_verticalLinetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_verticalLinetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [a].concat(b);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_number();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 67) {\n          result0 = 'C';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"C\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_curvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'cubicCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 99) {\n            result0 = 'c';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"c\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_curvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'cubicCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_curvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_curvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_curvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_curvetoArgument() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : '';\n              if (result3 !== null) {\n                result4 = parse_coordinatePair();\n                if (result4 !== null) {\n                  result0 = [\n                    result0,\n                    result1,\n                    result2,\n                    result3,\n                    result4\n                  ];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b, c) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y,\n              c.x,\n              c.y\n            ];\n          }(pos0, result0[0], result0[2], result0[4]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_smoothCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 83) {\n          result0 = 'S';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"S\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'smoothCubicCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 115) {\n            result0 = 's';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"s\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_smoothCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'smoothCubicCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_smoothCurvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_smoothCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_smoothCurvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y\n            ];\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 81) {\n          result0 = 'Q';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"Q\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'quadraticCurveTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 113) {\n            result0 = 'q';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"q\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_quadraticBezierCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'quadraticCurveToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_quadraticBezierCurvetoArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_quadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_quadraticBezierCurvetoArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_quadraticBezierCurvetoArgument() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_coordinatePair();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return [\n              a.x,\n              a.y,\n              b.x,\n              b.y\n            ];\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_smoothQuadraticBezierCurveto() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 84) {\n          result0 = 'T';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"T\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'smoothQuadraticCurveTo',\n                args: [\n                  arg.x,\n                  arg.y\n                ]\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 116) {\n            result0 = 't';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"t\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'smoothQuadraticCurveToRelative',\n                  args: [\n                    arg.x,\n                    arg.y\n                  ]\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_smoothQuadraticBezierCurvetoArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_coordinatePair();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_smoothQuadraticBezierCurvetoArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_coordinatePair();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArc() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 65) {\n          result0 = 'A';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"A\"');\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          result2 = parse_wsp();\n          while (result2 !== null) {\n            result1.push(result2);\n            result2 = parse_wsp();\n          }\n          if (result1 !== null) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, args) {\n            return args.map(function (arg) {\n              return {\n                cmd: 'ellipticalArcTo',\n                args: arg\n              };\n            });\n          }(pos0, result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 97) {\n            result0 = 'a';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"a\"');\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result2 = parse_ellipticalArcArgumentSequence();\n              if (result2 !== null) {\n                result0 = [\n                  result0,\n                  result1,\n                  result2\n                ];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, args) {\n              return args.map(function (arg) {\n                return {\n                  cmd: 'ellipticalArcToRelative',\n                  args: arg\n                };\n              });\n            }(pos0, result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArcArgumentSequence() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ellipticalArcArgument();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_ellipticalArcArgumentSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, list) {\n            return [a].concat(list);\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_ellipticalArcArgument();\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return [a];\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_ellipticalArcArgument() {\n        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_nonnegativeNumber();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_nonnegativeNumber();\n            if (result2 !== null) {\n              result3 = parse_commaWsp();\n              result3 = result3 !== null ? result3 : '';\n              if (result3 !== null) {\n                result4 = parse_number();\n                if (result4 !== null) {\n                  result5 = parse_commaWsp();\n                  if (result5 !== null) {\n                    result6 = parse_flag();\n                    if (result6 !== null) {\n                      result7 = parse_commaWsp();\n                      result7 = result7 !== null ? result7 : '';\n                      if (result7 !== null) {\n                        result8 = parse_flag();\n                        if (result8 !== null) {\n                          result9 = parse_commaWsp();\n                          result9 = result9 !== null ? result9 : '';\n                          if (result9 !== null) {\n                            result10 = parse_coordinatePair();\n                            if (result10 !== null) {\n                              result0 = [\n                                result0,\n                                result1,\n                                result2,\n                                result3,\n                                result4,\n                                result5,\n                                result6,\n                                result7,\n                                result8,\n                                result9,\n                                result10\n                              ];\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                        } else {\n                          result0 = null;\n                          pos = pos1;\n                        }\n                      } else {\n                        result0 = null;\n                        pos = pos1;\n                      }\n                    } else {\n                      result0 = null;\n                      pos = pos1;\n                    }\n                  } else {\n                    result0 = null;\n                    pos = pos1;\n                  }\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, rx, ry, rot, largeArc, sweep, to) {\n            return [\n              rx,\n              ry,\n              rot,\n              largeArc,\n              sweep,\n              to.x,\n              to.y\n            ];\n          }(pos0, result0[0], result0[2], result0[4], result0[6], result0[8], result0[10]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_coordinatePair() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_number();\n        if (result0 !== null) {\n          result1 = parse_commaWsp();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_number();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return {\n              x: a,\n              y: b\n            };\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_nonnegativeNumber() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        result0 = parse_floatingPointConstant();\n        if (result0 !== null) {\n          result0 = function (offset, number) {\n            return parseFloat(number, 10);\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            result0 = function (offset, number) {\n              return parseInt(number, 10);\n            }(pos0, result0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_number() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_sign();\n        result0 = result0 !== null ? result0 : '';\n        if (result0 !== null) {\n          result1 = parse_floatingPointConstant();\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, sign, number) {\n            return parseFloat(sign + number, 10);\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_sign();\n          result0 = result0 !== null ? result0 : '';\n          if (result0 !== null) {\n            result1 = parse_digitSequence();\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, sign, number) {\n              return parseInt(sign + number, 10);\n            }(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_flag() {\n        var result0;\n        var pos0;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = '0';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"0\"');\n          }\n        }\n        if (result0 !== null) {\n          result0 = function (offset) {\n            return false;\n          }(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.charCodeAt(pos) === 49) {\n            result0 = '1';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"1\"');\n            }\n          }\n          if (result0 !== null) {\n            result0 = function (offset) {\n              return true;\n            }(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_commaWsp() {\n        var result0, result1, result2, result3;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_wsp();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_wsp();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result1 = parse_comma();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_wsp();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_wsp();\n            }\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        } else {\n          result0 = null;\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          result0 = parse_comma();\n          if (result0 !== null) {\n            result1 = [];\n            result2 = parse_wsp();\n            while (result2 !== null) {\n              result1.push(result2);\n              result2 = parse_wsp();\n            }\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos0;\n            }\n          } else {\n            result0 = null;\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_comma() {\n        var result0;\n        if (input.charCodeAt(pos) === 44) {\n          result0 = ',';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\",\"');\n          }\n        }\n        return result0;\n      }\n      function parse_floatingPointConstant() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_fractionalConstant();\n        if (result0 !== null) {\n          result1 = parse_exponent();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + b;\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            result1 = parse_exponent();\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, a, b) {\n              return a + b;\n            }(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_fractionalConstant() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digitSequence();\n        result0 = result0 !== null ? result0 : '';\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 46) {\n            result1 = '.';\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed('\".\"');\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_digitSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + '.' + b;\n          }(pos0, result0[0], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_digitSequence();\n          if (result0 !== null) {\n            if (input.charCodeAt(pos) === 46) {\n              result1 = '.';\n              pos++;\n            } else {\n              result1 = null;\n              if (reportFailures === 0) {\n                matchFailed('\".\"');\n              }\n            }\n            if (result1 !== null) {\n              result0 = [\n                result0,\n                result1\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, a) {\n              return a;\n            }(pos0, result0[0]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_exponent() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 101) {\n          result0 = 'e';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"e\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 69) {\n            result0 = 'E';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"E\"');\n            }\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_sign();\n          result1 = result1 !== null ? result1 : '';\n          if (result1 !== null) {\n            result2 = parse_digitSequence();\n            if (result2 !== null) {\n              result0 = [\n                result0,\n                result1,\n                result2\n              ];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b, c) {\n            return a + b + c;\n          }(pos0, result0[0], result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_sign() {\n        var result0;\n        if (input.charCodeAt(pos) === 43) {\n          result0 = '+';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\"+\"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 45) {\n            result0 = '-';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"-\"');\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_digitSequence() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_digit();\n        if (result0 !== null) {\n          result1 = parse_digitSequence();\n          if (result1 !== null) {\n            result0 = [\n              result0,\n              result1\n            ];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, a, b) {\n            return a + b;\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          result0 = parse_digit();\n        }\n        return result0;\n      }\n      function parse_digit() {\n        var result0;\n        if (/^[0-9]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('[0-9]');\n          }\n        }\n        return result0;\n      }\n      function parse_wsp() {\n        var result0;\n        if (input.charCodeAt(pos) === 32) {\n          result0 = ' ';\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed('\" \"');\n          }\n        }\n        if (result0 === null) {\n          if (input.charCodeAt(pos) === 9) {\n            result0 = '\\t';\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed('\"\\\\t\"');\n            }\n          }\n          if (result0 === null) {\n            if (input.charCodeAt(pos) === 13) {\n              result0 = '\\r';\n              pos++;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed('\"\\\\r\"');\n              }\n            }\n            if (result0 === null) {\n              if (input.charCodeAt(pos) === 10) {\n                result0 = '\\n';\n                pos++;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed('\"\\\\n\"');\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function cleanupExpected(expected) {\n        expected.sort();\n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      function computeErrorPosition() {\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === '\\n') {\n            if (!seenCR) {\n              line++;\n            }\n            column = 1;\n            seenCR = false;\n          } else if (ch === '\\r' || ch === '\\u2028' || ch === '\\u2029') {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        return {\n          line: line,\n          column: column\n        };\n      }\n      function createMoveTo(args, isRelative) {\n        var result = [{\n              cmd: isRelative ? 'moveToRelative' : 'moveTo',\n              args: [\n                args[0].x,\n                args[0].y\n              ]\n            }];\n        if (args.length > 1) {\n          for (var i = 1; i < args.length; i++) {\n            result.push({\n              cmd: isRelative ? 'lineToRelative' : 'lineTo',\n              args: [\n                args[i].x,\n                args[i].y\n              ]\n            });\n          }\n        }\n        return result;\n      }\n      var result = parseFunctions[startRule]();\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);\n      }\n      return result;\n    },\n    toSource: function () {\n      return this._source;\n    }\n  };\n  var result = kite.svgPath;\n  result.SyntaxError = function (expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      switch (expected.length) {\n      case 0:\n        expectedHumanized = 'end of input';\n        break;\n      case 1:\n        expectedHumanized = expected[0];\n        break;\n      default:\n        expectedHumanized = expected.slice(0, expected.length - 1).join(', ') + ' or ' + expected[expected.length - 1];\n      }\n      foundHumanized = found ? quote(found) : 'end of input';\n      return 'Expected ' + expectedHumanized + ' but ' + foundHumanized + ' found.';\n    }\n    this.name = 'SyntaxError';\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  result.SyntaxError.prototype = Error.prototype;\n  return result;\n});","\ndefine('KITE/util/LineStyles',['require','KITE/kite'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  kite.LineStyles = function (args) {\n    if (args === undefined) {\n      args = {};\n    }\n    this.lineWidth = args.lineWidth !== undefined ? args.lineWidth : 1;\n    this.lineCap = args.lineCap !== undefined ? args.lineCap : 'butt';\n    this.lineJoin = args.lineJoin !== undefined ? args.lineJoin : 'miter';\n    this.lineDash = args.lineDash !== undefined ? args.lineDash : null;\n    this.lineDashOffset = args.lineDashOffset !== undefined ? args.lineDashOffset : 0;\n    this.miterLimit = args.miterLimit !== undefined ? args.miterLimit : 10;\n  };\n  var LineStyles = kite.LineStyles;\n  LineStyles.prototype = {\n    constructor: LineStyles,\n    equals: function (other) {\n      var typical = this.lineWidth === other.lineWidth && this.lineCap === other.lineCap && this.lineJoin === other.lineJoin && this.miterLimit === other.miterLimit && this.lineDashOffset === other.lineDashOffset;\n      if (!typical) {\n        return false;\n      }\n      if (!this.lineDash !== !other.lineDash) {\n        return false;\n      }\n      if (this.lineDash) {\n        if (this.lineDash.length !== other.lineDash.length) {\n          return false;\n        }\n        for (var i = 0; i < this.lineDash.length; i++) {\n          if (this.lineDash[i] !== other.lineDash[i]) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n  };\n  return kite.LineStyles;\n});","\ndefine('KITE/segments/Quadratic',['require','KITE/kite','PHET_CORE/inherit','DOT/Bounds2','DOT/Matrix3','DOT/Util','KITE/segments/Segment'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Matrix3 = require('DOT/Matrix3');\n  var solveQuadraticRootsReal = require('DOT/Util').solveQuadraticRootsReal;\n  var Segment = require('KITE/segments/Segment');\n  Segment.Quadratic = function Quadratic(start, control, end, skipComputations) {\n    this.start = start;\n    this.control = control;\n    this.end = end;\n    if (start.equals(end) && start.equals(control)) {\n      this.invalid = true;\n      return;\n    }\n    var t;\n    if (skipComputations) {\n      return;\n    }\n    var controlIsStart = start.equals(control);\n    var controlIsEnd = end.equals(control);\n    null;\n    this.startTangent = controlIsStart ? end.minus(start).normalized() : control.minus(start).normalized();\n    this.endTangent = controlIsEnd ? end.minus(start).normalized() : end.minus(control).normalized();\n    this.bounds = new Bounds2(Math.min(start.x, end.x), Math.min(start.y, end.y), Math.max(start.x, end.x), Math.max(start.y, end.y));\n    var divisorX = 2 * (end.x - 2 * control.x + start.x);\n    if (divisorX !== 0) {\n      this.tCriticalX = -2 * (control.x - start.x) / divisorX;\n      if (t > 0 && t < 1) {\n        this.bounds = this.bounds.withPoint(this.positionAt(this.tCriticalX));\n      }\n    }\n    var divisorY = 2 * (end.y - 2 * control.y + start.y);\n    if (divisorY !== 0) {\n      this.tCriticalY = -2 * (control.y - start.y) / divisorY;\n      if (t > 0 && t < 1) {\n        this.bounds = this.bounds.withPoint(this.positionAt(this.tCriticalY));\n      }\n    }\n  };\n  inherit(Segment, Segment.Quadratic, {\n    degree: 2,\n    positionAt: function (t) {\n      var mt = 1 - t;\n      return this.start.times(mt * mt).plus(this.control.times(2 * mt * t)).plus(this.end.times(t * t));\n    },\n    tangentAt: function (t) {\n      return this.control.minus(this.start).times(2 * (1 - t)).plus(this.end.minus(this.control).times(2 * t));\n    },\n    curvatureAt: function (t) {\n      var epsilon = 1e-7;\n      if (Math.abs(t - 0.5) > 0.5 - epsilon) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this.start : this.end;\n        var p1 = this.control;\n        var p2 = isZero ? this.end : this.start;\n        var d10 = p1.minus(p0);\n        var a = d10.magnitude();\n        var h = (isZero ? -1 : 1) * d10.perpendicular().normalized().dot(p2.minus(p1));\n        return h * (this.degree - 1) / (this.degree * a * a);\n      } else {\n        return this.subdivided(t, true)[0].curvatureAt(1);\n      }\n    },\n    offsetTo: function (r, reverse) {\n      var curves = [this];\n      var depth = 5;\n      for (var i = 0; i < depth; i++) {\n        curves = _.flatten(_.map(curves, function (curve) {\n          return curve.subdivided(0.5, true);\n        }));\n      }\n      var offsetCurves = _.map(curves, function (curve) {\n          return curve.approximateOffset(r);\n        });\n      if (reverse) {\n        offsetCurves.reverse();\n        offsetCurves = _.map(offsetCurves, function (curve) {\n          return curve.reversed(true);\n        });\n      }\n      return offsetCurves;\n    },\n    subdivided: function (t, skipComputations) {\n      var leftMid = this.start.blend(this.control, t);\n      var rightMid = this.control.blend(this.end, t);\n      var mid = leftMid.blend(rightMid, t);\n      return [\n        new Segment.Quadratic(this.start, leftMid, mid, skipComputations),\n        new Segment.Quadratic(mid, rightMid, this.end, skipComputations)\n      ];\n    },\n    reversed: function (skipComputations) {\n      return new Segment.Quadratic(this.end, this.control, this.start);\n    },\n    approximateOffset: function (r) {\n      return new Segment.Quadratic(this.start.plus((this.start.equals(this.control) ? this.end.minus(this.start) : this.control.minus(this.start)).perpendicular().normalized().times(r)), this.control.plus(this.end.minus(this.start).perpendicular().normalized().times(r)), this.end.plus((this.end.equals(this.control) ? this.end.minus(this.start) : this.end.minus(this.control)).perpendicular().normalized().times(r)));\n    },\n    getSVGPathFragment: function () {\n      return 'Q ' + this.control.x + ' ' + this.control.y + ' ' + this.end.x + ' ' + this.end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var result = [];\n      var epsilon = 1e-10;\n      if (this.tCriticalX !== undefined && this.tCriticalX > epsilon && this.tCriticalX < 1 - epsilon) {\n        result.push(this.tCriticalX);\n      }\n      if (this.tCriticalY !== undefined && this.tCriticalY > epsilon && this.tCriticalY < 1 - epsilon) {\n        result.push(this.tCriticalY);\n      }\n      return result.sort();\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Quadratic.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var self = this;\n      var result = [];\n      var inverseMatrix = Matrix3.rotation2(-ray.dir.angle()).timesMatrix(Matrix3.translation(-ray.pos.x, -ray.pos.y));\n      var p0 = inverseMatrix.timesVector2(this.start);\n      var p1 = inverseMatrix.timesVector2(this.control);\n      var p2 = inverseMatrix.timesVector2(this.end);\n      var a = p0.y - 2 * p1.y + p2.y;\n      var b = -2 * p0.y + 2 * p1.y;\n      var c = p0.y;\n      var ts = solveQuadraticRootsReal(a, b, c);\n      _.each(ts, function (t) {\n        if (t >= 0 && t <= 1) {\n          var hitPoint = self.positionAt(t);\n          var unitTangent = self.tangentAt(t).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus(ray.pos);\n          if (toHit.dot(ray.dir) > 0) {\n            result.push({\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n              wind: ray.dir.perpendicular().dot(unitTangent) < 0 ? 1 : -1\n            });\n          }\n        }\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.quadraticCurveTo(this.control.x, this.control.y, this.end.x, this.end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Quadratic(matrix.timesVector2(this.start), matrix.timesVector2(this.control), matrix.timesVector2(this.end));\n    }\n  });\n  return Segment.Quadratic;\n});","\ndefine('KITE/segments/Cubic',['require','KITE/kite','PHET_CORE/inherit','DOT/Bounds2','DOT/Vector2','DOT/Matrix3','DOT/Util','DOT/Util','KITE/segments/Segment','KITE/segments/Quadratic'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Vector2 = require('DOT/Vector2');\n  var Matrix3 = require('DOT/Matrix3');\n  var solveQuadraticRootsReal = require('DOT/Util').solveQuadraticRootsReal;\n  var solveCubicRootsReal = require('DOT/Util').solveCubicRootsReal;\n  var Segment = require('KITE/segments/Segment');\n  require('KITE/segments/Quadratic');\n  Segment.Cubic = function Cubic(start, control1, control2, end, skipComputations) {\n    this.start = start;\n    this.control1 = control1;\n    this.control2 = control2;\n    this.end = end;\n    if (skipComputations) {\n      return;\n    }\n    if (start.equals(end, 0) && start.equals(control1, 0) && start.equals(control2, 0)) {\n      this.invalid = true;\n      return;\n    }\n    this.startTangent = this.tangentAt(0).normalized();\n    this.endTangent = this.tangentAt(1).normalized();\n    this.r = control1.minus(start).normalized();\n    this.s = this.r.perpendicular();\n    var a = start.times(-1).plus(control1.times(3)).plus(control2.times(-3)).plus(end);\n    var b = start.times(3).plus(control1.times(-6)).plus(control2.times(3));\n    var c = start.times(-3).plus(control1.times(3));\n    var d = start;\n    var aPerp = a.perpendicular();\n    var bPerp = b.perpendicular();\n    var aPerpDotB = aPerp.dot(b);\n    this.tCusp = -0.5 * (aPerp.dot(c) / aPerpDotB);\n    this.tDeterminant = this.tCusp * this.tCusp - 1 / 3 * (bPerp.dot(c) / aPerpDotB);\n    if (this.tDeterminant >= 0) {\n      var sqrtDet = Math.sqrt(this.tDeterminant);\n      this.tInflection1 = this.tCusp - sqrtDet;\n      this.tInflection2 = this.tCusp + sqrtDet;\n    }\n    if (this.hasCusp()) {\n      var subdividedAtCusp = this.subdivided(this.tCusp, true);\n      this.startQuadratic = new Segment.Quadratic(subdividedAtCusp[0].start, subdividedAtCusp[0].control1, subdividedAtCusp[0].end, false);\n      this.endQuadratic = new Segment.Quadratic(subdividedAtCusp[1].start, subdividedAtCusp[1].control2, subdividedAtCusp[1].end, false);\n    }\n    this.bounds = Bounds2.NOTHING;\n    this.bounds = this.bounds.withPoint(this.start);\n    this.bounds = this.bounds.withPoint(this.end);\n    function extremaT(v0, v1, v2, v3) {\n      var a = -3 * v0 + 9 * v1 - 9 * v2 + 3 * v3;\n      var b = 6 * v0 - 12 * v1 + 6 * v2;\n      var c = -3 * v0 + 3 * v1;\n      return solveQuadraticRootsReal(a, b, c);\n    }\n    var cubic = this;\n    this.xExtremaT = extremaT(this.start.x, this.control1.x, this.control2.x, this.end.x);\n    _.each(this.xExtremaT, function (t) {\n      if (t >= 0 && t <= 1) {\n        cubic.bounds = cubic.bounds.withPoint(cubic.positionAt(t));\n      }\n    });\n    this.yExtremaT = extremaT(this.start.y, this.control1.y, this.control2.y, this.end.y);\n    _.each(this.yExtremaT, function (t) {\n      if (t >= 0 && t <= 1) {\n        cubic.bounds = cubic.bounds.withPoint(cubic.positionAt(t));\n      }\n    });\n    if (this.hasCusp()) {\n      this.bounds = this.bounds.withPoint(this.positionAt(this.tCusp));\n    }\n  };\n  inherit(Segment, Segment.Cubic, {\n    degree: 3,\n    hasCusp: function () {\n      var epsilon = 0.000001;\n      return this.tangentAt(this.tCusp).magnitude() < epsilon && this.tCusp >= 0 && this.tCusp <= 1;\n    },\n    positionAt: function (t) {\n      var mt = 1 - t;\n      return this.start.times(mt * mt * mt).plus(this.control1.times(3 * mt * mt * t)).plus(this.control2.times(3 * mt * t * t)).plus(this.end.times(t * t * t));\n    },\n    tangentAt: function (t) {\n      var mt = 1 - t;\n      return this.start.times(-3 * mt * mt).plus(this.control1.times(3 * mt * mt - 6 * mt * t)).plus(this.control2.times(6 * mt * t - 3 * t * t)).plus(this.end.times(3 * t * t));\n    },\n    curvatureAt: function (t) {\n      var epsilon = 1e-7;\n      if (Math.abs(t - 0.5) > 0.5 - epsilon) {\n        var isZero = t < 0.5;\n        var p0 = isZero ? this.start : this.end;\n        var p1 = isZero ? this.control1 : this.control2;\n        var p2 = isZero ? this.control2 : this.control1;\n        var d10 = p1.minus(p0);\n        var a = d10.magnitude();\n        var h = (isZero ? -1 : 1) * d10.perpendicular().normalized().dot(p2.minus(p1));\n        return h * (this.degree - 1) / (this.degree * a * a);\n      } else {\n        return this.subdivided(t, true)[0].curvatureAt(1);\n      }\n    },\n    toRS: function (point) {\n      var firstVector = point.minus(this.start);\n      return new Vector2(firstVector.dot(this.r), firstVector.dot(this.s));\n    },\n    subdivided: function (t, skipComputations) {\n      var left = this.start.blend(this.control1, t);\n      var right = this.control2.blend(this.end, t);\n      var middle = this.control1.blend(this.control2, t);\n      var leftMid = left.blend(middle, t);\n      var rightMid = middle.blend(right, t);\n      var mid = leftMid.blend(rightMid, t);\n      return [\n        new Segment.Cubic(this.start, left, leftMid, mid, skipComputations),\n        new Segment.Cubic(mid, rightMid, right, this.end, skipComputations)\n      ];\n    },\n    offsetTo: function (r, reverse) {\n      var quantity = 32;\n      var points = [];\n      var result = [];\n      for (var i = 0; i < quantity; i++) {\n        var t = i / (quantity - 1);\n        if (reverse) {\n          t = 1 - t;\n        }\n        points.push(this.positionAt(t).plus(this.tangentAt(t).perpendicular().normalized().times(r)));\n        if (i > 0) {\n          result.push(new Segment.Line(points[i - 1], points[i]));\n        }\n      }\n      return result;\n    },\n    getSVGPathFragment: function () {\n      return 'C ' + this.control1.x + ' ' + this.control1.y + ' ' + this.control2.x + ' ' + this.control2.y + ' ' + this.end.x + ' ' + this.end.y;\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var ts = this.xExtremaT.concat(this.yExtremaT);\n      var result = [];\n      _.each(ts, function (t) {\n        var epsilon = 1e-10;\n        if (t > epsilon && t < 1 - epsilon) {\n          if (_.every(result, function (otherT) {\n              return Math.abs(t - otherT) > epsilon;\n            })) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.Cubic.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var self = this;\n      var result = [];\n      var inverseMatrix = Matrix3.rotation2(-ray.dir.angle()).timesMatrix(Matrix3.translation(-ray.pos.x, -ray.pos.y));\n      var p0 = inverseMatrix.timesVector2(this.start);\n      var p1 = inverseMatrix.timesVector2(this.control1);\n      var p2 = inverseMatrix.timesVector2(this.control2);\n      var p3 = inverseMatrix.timesVector2(this.end);\n      var a = -p0.y + 3 * p1.y - 3 * p2.y + p3.y;\n      var b = 3 * p0.y - 6 * p1.y + 3 * p2.y;\n      var c = -3 * p0.y + 3 * p1.y;\n      var d = p0.y;\n      var ts = solveCubicRootsReal(a, b, c, d);\n      _.each(ts, function (t) {\n        if (t >= 0 && t <= 1) {\n          var hitPoint = self.positionAt(t);\n          var unitTangent = self.tangentAt(t).normalized();\n          var perp = unitTangent.perpendicular();\n          var toHit = hitPoint.minus(ray.pos);\n          if (toHit.dot(ray.dir) > 0) {\n            result.push({\n              distance: toHit.magnitude(),\n              point: hitPoint,\n              normal: perp.dot(ray.dir) > 0 ? perp.negated() : perp,\n              wind: ray.dir.perpendicular().dot(unitTangent) < 0 ? 1 : -1\n            });\n          }\n        }\n      });\n      return result;\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var hits = this.intersection(ray);\n      _.each(hits, function (hit) {\n        wind += hit.wind;\n      });\n      return wind;\n    },\n    writeToContext: function (context) {\n      context.bezierCurveTo(this.control1.x, this.control1.y, this.control2.x, this.control2.y, this.end.x, this.end.y);\n    },\n    transformed: function (matrix) {\n      return new Segment.Cubic(matrix.timesVector2(this.start), matrix.timesVector2(this.control1), matrix.timesVector2(this.control2), matrix.timesVector2(this.end));\n    }\n  });\n  return Segment.Cubic;\n});","\ndefine('KITE/segments/EllipticalArc',['require','KITE/kite','PHET_CORE/inherit','DOT/Vector2','DOT/Bounds2','DOT/Matrix3','DOT/Transform3','DOT/Util','DOT/Util','KITE/segments/Segment','KITE/util/Subpath'],function (require) {\n  'use strict';\n  var kite = require('KITE/kite');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var Matrix3 = require('DOT/Matrix3');\n  var Transform3 = require('DOT/Transform3');\n  var toDegrees = require('DOT/Util').toDegrees;\n  var DotUtil = require('DOT/Util');\n  var Segment = require('KITE/segments/Segment');\n  require('KITE/util/Subpath');\n  Segment.EllipticalArc = function EllipticalArc(center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n    if (radiusX < 0) {\n      radiusX = -radiusX;\n      startAngle = Math.PI - startAngle;\n      endAngle = Math.PI - endAngle;\n      anticlockwise = !anticlockwise;\n    }\n    if (radiusY < 0) {\n      radiusY = -radiusY;\n      startAngle = -startAngle;\n      endAngle = -endAngle;\n      anticlockwise = !anticlockwise;\n    }\n    if (radiusX < radiusY) {\n      rotation += Math.PI / 2;\n      startAngle -= Math.PI / 2;\n      endAngle -= Math.PI / 2;\n      var tmpR = radiusX;\n      radiusX = radiusY;\n      radiusY = tmpR;\n    }\n    this.center = center;\n    this.radiusX = radiusX;\n    this.radiusY = radiusY;\n    this.rotation = rotation;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.anticlockwise = anticlockwise;\n    this.unitTransform = Segment.EllipticalArc.computeUnitTransform(center, radiusX, radiusY, rotation);\n    this.start = this.positionAtAngle(startAngle);\n    this.end = this.positionAtAngle(endAngle);\n    this.startTangent = this.tangentAtAngle(startAngle).normalized();\n    this.endTangent = this.tangentAtAngle(endAngle).normalized();\n    if (radiusX === 0 || radiusY === 0 || startAngle === endAngle) {\n      this.invalid = true;\n      return;\n    }\n    if (radiusX < radiusY) {\n      throw new Error('Not verified to work if radiusX < radiusY');\n    }\n    if (this.anticlockwise) {\n      if (this.startAngle > this.endAngle) {\n        this.actualEndAngle = this.endAngle;\n      } else if (this.startAngle < this.endAngle) {\n        this.actualEndAngle = this.endAngle - 2 * Math.PI;\n      } else {\n        this.actualEndAngle = this.startAngle;\n      }\n    } else {\n      if (this.startAngle < this.endAngle) {\n        this.actualEndAngle = this.endAngle;\n      } else if (this.startAngle > this.endAngle) {\n        this.actualEndAngle = this.endAngle + Math.PI * 2;\n      } else {\n        this.actualEndAngle = this.startAngle;\n      }\n    }\n    null;\n    null;\n    var isFullPerimeter = !anticlockwise && endAngle - startAngle >= Math.PI * 2 || anticlockwise && startAngle - endAngle >= Math.PI * 2;\n    this.angleDifference = this.anticlockwise ? this.startAngle - this.endAngle : this.endAngle - this.startAngle;\n    if (this.angleDifference < 0) {\n      this.angleDifference += Math.PI * 2;\n    }\n    null;\n    this.unitArcSegment = new Segment.Arc(Vector2.ZERO, 1, startAngle, endAngle, anticlockwise);\n    this.bounds = Bounds2.NOTHING;\n    this.bounds = this.bounds.withPoint(this.start);\n    this.bounds = this.bounds.withPoint(this.end);\n    var that = this;\n    function boundsAtAngle(angle) {\n      if (that.containsAngle(angle)) {\n        that.bounds = that.bounds.withPoint(that.positionAtAngle(angle));\n      }\n    }\n    if (startAngle !== endAngle) {\n      var xAngle = Math.atan(-(radiusY / radiusX) * Math.tan(rotation));\n      var yAngle = Math.atan(radiusY / radiusX / Math.tan(rotation));\n      this.possibleExtremaAngles = [\n        xAngle,\n        xAngle + Math.PI,\n        yAngle,\n        yAngle + Math.PI\n      ];\n      _.each(this.possibleExtremaAngles, boundsAtAngle);\n    }\n  };\n  inherit(Segment, Segment.EllipticalArc, {\n    mapAngle: function (angle) {\n      return this.startAngle > this.actualEndAngle ? DotUtil.moduloBetweenUp(angle, this.startAngle - 2 * Math.PI, this.startAngle) : DotUtil.moduloBetweenDown(angle, this.startAngle, this.startAngle + 2 * Math.PI);\n    },\n    tAtAngle: function (angle) {\n      return (this.mapAngle(angle) - this.startAngle) / (this.actualEndAngle - this.startAngle);\n    },\n    angleAt: function (t) {\n      return this.startAngle + (this.actualEndAngle - this.startAngle) * t;\n    },\n    positionAt: function (t) {\n      return this.positionAtAngle(this.angleAt(t));\n    },\n    tangentAt: function (t) {\n      return this.tangentAtAngle(this.angleAt(t));\n    },\n    curvatureAt: function (t) {\n      var angle = this.angleAt(t);\n      var aq = this.radiusX * Math.sin(angle);\n      var bq = this.radiusY * Math.cos(angle);\n      var denominator = Math.pow(bq * bq + aq * aq, 3 / 2);\n      return (this.anticlockwise ? -1 : 1) * this.radiusX * this.radiusY / denominator;\n    },\n    positionAtAngle: function (angle) {\n      return this.unitTransform.transformPosition2(Vector2.createPolar(1, angle));\n    },\n    tangentAtAngle: function (angle) {\n      var normal = this.unitTransform.transformNormal2(Vector2.createPolar(1, angle));\n      return this.anticlockwise ? normal.perpendicular() : normal.perpendicular().negated();\n    },\n    containsAngle: function (angle) {\n      var normalizedAngle = this.anticlockwise ? angle - this.endAngle : angle - this.startAngle;\n      var positiveMinAngle = normalizedAngle % (Math.PI * 2);\n      if (positiveMinAngle < 0) {\n        positiveMinAngle += Math.PI * 2;\n      }\n      return positiveMinAngle <= this.angleDifference;\n    },\n    offsetTo: function (r, reverse) {\n      var quantity = 32;\n      var points = [];\n      var result = [];\n      for (var i = 0; i < quantity; i++) {\n        var ratio = i / (quantity - 1);\n        if (reverse) {\n          ratio = 1 - ratio;\n        }\n        var angle = this.angleAt(ratio);\n        points.push(this.positionAtAngle(angle).plus(this.tangentAtAngle(angle).perpendicular().normalized().times(r)));\n        if (i > 0) {\n          result.push(new Segment.Line(points[i - 1], points[i]));\n        }\n      }\n      return result;\n    },\n    getSVGPathFragment: function () {\n      var epsilon = 0.01;\n      var sweepFlag = this.anticlockwise ? '0' : '1';\n      var largeArcFlag;\n      var degreesRotation = toDegrees(this.rotation);\n      if (this.angleDifference < Math.PI * 2 - epsilon) {\n        largeArcFlag = this.angleDifference < Math.PI ? '0' : '1';\n        return 'A ' + this.radiusX + ' ' + this.radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n      } else {\n        var splitOppositeAngle = (this.startAngle + this.endAngle) / 2;\n        var splitPoint = this.positionAtAngle(splitOppositeAngle);\n        largeArcFlag = '0';\n        var firstArc = 'A ' + this.radiusX + ' ' + this.radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + splitPoint.x + ' ' + splitPoint.y;\n        var secondArc = 'A ' + this.radiusX + ' ' + this.radiusY + ' ' + degreesRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + this.end.x + ' ' + this.end.y;\n        return firstArc + ' ' + secondArc;\n      }\n    },\n    strokeLeft: function (lineWidth) {\n      return this.offsetTo(-lineWidth / 2, false);\n    },\n    strokeRight: function (lineWidth) {\n      return this.offsetTo(lineWidth / 2, true);\n    },\n    getInteriorExtremaTs: function () {\n      var that = this;\n      var result = [];\n      _.each(this.possibleExtremaAngles, function (angle) {\n        if (that.containsAngle(angle)) {\n          var t = that.tAtAngle(angle);\n          var epsilon = 1e-10;\n          if (t > epsilon && t < 1 - epsilon) {\n            result.push(t);\n          }\n        }\n      });\n      return result.sort();\n    },\n    subdivided: function (t) {\n      var angle0 = this.angleAt(0);\n      var angleT = this.angleAt(t);\n      var angle1 = this.angleAt(1);\n      return [\n        new Segment.EllipticalArc(this.center, this.radiusX, this.radiusY, this.rotation, angle0, angleT, this.anticlockwise),\n        new Segment.EllipticalArc(this.center, this.radiusX, this.radiusY, this.rotation, angleT, angle1, this.anticlockwise)\n      ];\n    },\n    intersectsBounds: function (bounds) {\n      throw new Error('Segment.EllipticalArc.intersectsBounds unimplemented');\n    },\n    intersection: function (ray) {\n      var unitTransform = this.unitTransform;\n      var rayInUnitCircleSpace = unitTransform.inverseRay2(ray);\n      var hits = this.unitArcSegment.intersection(rayInUnitCircleSpace);\n      return _.map(hits, function (hit) {\n        var transformedPoint = unitTransform.transformPosition2(hit.point);\n        return {\n          distance: ray.pos.distance(transformedPoint),\n          point: transformedPoint,\n          normal: unitTransform.inverseNormal2(hit.normal),\n          wind: hit.wind\n        };\n      });\n    },\n    windingIntersection: function (ray) {\n      var rayInUnitCircleSpace = this.unitTransform.inverseRay2(ray);\n      return this.unitArcSegment.windingIntersection(rayInUnitCircleSpace);\n    },\n    writeToContext: function (context) {\n      if (context.ellipse) {\n        context.ellipse(this.center.x, this.center.y, this.radiusX, this.radiusY, this.rotation, this.startAngle, this.endAngle, this.anticlockwise);\n      } else {\n        this.unitTransform.getMatrix().canvasAppendTransform(context);\n        context.arc(0, 0, 1, this.startAngle, this.endAngle, this.anticlockwise);\n        this.unitTransform.getInverse().canvasAppendTransform(context);\n      }\n    },\n    transformed: function (matrix) {\n      var transformedSemiMajorAxis = matrix.timesVector2(Vector2.createPolar(this.radiusX, this.rotation)).minus(matrix.timesVector2(Vector2.ZERO));\n      var transformedSemiMinorAxis = matrix.timesVector2(Vector2.createPolar(this.radiusY, this.rotation + Math.PI / 2)).minus(matrix.timesVector2(Vector2.ZERO));\n      var rotation = transformedSemiMajorAxis.angle();\n      var radiusX = transformedSemiMajorAxis.magnitude();\n      var radiusY = transformedSemiMinorAxis.magnitude();\n      var reflected = matrix.getDeterminant() < 0;\n      var anticlockwise = reflected ? !this.anticlockwise : this.anticlockwise;\n      var startAngle = reflected ? -this.startAngle : this.startAngle;\n      var endAngle = reflected ? -this.endAngle : this.endAngle;\n      return new Segment.EllipticalArc(matrix.timesVector2(this.center), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n    }\n  });\n  Segment.EllipticalArc.computeUnitTransform = function (center, radiusX, radiusY, rotation) {\n    return new Transform3(Matrix3.translation(center.x, center.y).timesMatrix(Matrix3.rotation2(rotation)).timesMatrix(Matrix3.scaling(radiusX, radiusY)));\n  };\n  return Segment.EllipticalArc;\n});","\ndefine('KITE/Shape',['require','ASSERT/assert','KITE/kite','DOT/Vector2','DOT/Bounds2','DOT/Ray2','DOT/Matrix3','DOT/Transform3','DOT/Util','DOT/Util','KITE/util/Subpath','KITE/../parser/svgPath','KITE/util/LineStyles','KITE/segments/Arc','KITE/segments/Cubic','KITE/segments/EllipticalArc','KITE/segments/Line','KITE/segments/Quadratic'],function (require) {\n  'use strict';\n  var assertExtra = require('ASSERT/assert')('kite.extra', true);\n  var kite = require('KITE/kite');\n  var Vector2 = require('DOT/Vector2');\n  var Bounds2 = require('DOT/Bounds2');\n  var Ray2 = require('DOT/Ray2');\n  var Matrix3 = require('DOT/Matrix3');\n  var Transform3 = require('DOT/Transform3');\n  var toDegrees = require('DOT/Util').toDegrees;\n  var lineLineIntersection = require('DOT/Util').lineLineIntersection;\n  var Subpath = require('KITE/util/Subpath');\n  var svgPath = require('KITE/../parser/svgPath');\n  require('KITE/util/LineStyles');\n  require('KITE/segments/Arc');\n  require('KITE/segments/Cubic');\n  require('KITE/segments/EllipticalArc');\n  require('KITE/segments/Line');\n  require('KITE/segments/Quadratic');\n  function p(x, y) {\n    return new Vector2(x, y);\n  }\n  function v(x, y) {\n    return new Vector2(x, y);\n  }\n  kite.Shape = function Shape(subpaths, bounds) {\n    this.subpaths = typeof subpaths === 'object' ? subpaths : [];\n    null;\n    this.bounds = bounds || Bounds2.NOTHING;\n    var that = this;\n    if (subpaths && typeof subpaths !== 'object') {\n      null;\n      _.each(svgPath.parse(subpaths), function (item) {\n        null;\n        that[item.cmd].apply(that, item.args);\n      });\n    }\n    phetAllocation && phetAllocation('Shape');\n  };\n  var Shape = kite.Shape;\n  Shape.prototype = {\n    constructor: Shape,\n    moveTo: function (x, y) {\n      return this.moveToPoint(v(x, y));\n    },\n    moveToRelative: function (x, y) {\n      return this.moveToPointRelative(v(x, y));\n    },\n    moveToPointRelative: function (point) {\n      return this.moveToPoint(this.getRelativePoint().plus(point));\n    },\n    moveToPoint: function (point) {\n      return this.addSubpath(new kite.Subpath().addPoint(point));\n    },\n    lineTo: function (x, y) {\n      return this.lineToPoint(v(x, y));\n    },\n    lineToRelative: function (x, y) {\n      return this.lineToPointRelative(v(x, y));\n    },\n    lineToPointRelative: function (point) {\n      return this.lineToPoint(this.getRelativePoint().plus(point));\n    },\n    lineToPoint: function (point) {\n      if (this.hasSubpaths()) {\n        var start = this.getLastSubpath().getLastPoint();\n        var end = point;\n        var line = new kite.Segment.Line(start, end);\n        this.getLastSubpath().addPoint(end);\n        if (!line.invalid) {\n          this.getLastSubpath().addSegment(line);\n          this.bounds = this.bounds.withPoint(start).withPoint(end);\n          null;\n        }\n      } else {\n        this.ensure(point);\n      }\n      return this;\n    },\n    horizontalLineTo: function (x) {\n      return this.lineTo(x, this.getRelativePoint().y);\n    },\n    horizontalLineToRelative: function (x) {\n      return this.lineToRelative(x, 0);\n    },\n    verticalLineTo: function (y) {\n      return this.lineTo(this.getRelativePoint().x, y);\n    },\n    verticalLineToRelative: function (y) {\n      return this.lineToRelative(0, y);\n    },\n    quadraticCurveTo: function (cpx, cpy, x, y) {\n      return this.quadraticCurveToPoint(v(cpx, cpy), v(x, y));\n    },\n    quadraticCurveToRelative: function (cpx, cpy, x, y) {\n      return this.quadraticCurveToPointRelative(v(cpx, cpy), v(x, y));\n    },\n    quadraticCurveToPointRelative: function (controlPoint, point) {\n      var relativePoint = this.getRelativePoint();\n      return this.quadraticCurveToPoint(relativePoint.plus(controlPoint), relativePoint.plus(point));\n    },\n    smoothQuadraticCurveTo: function (x, y) {\n      return this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(), v(x, y));\n    },\n    smoothQuadraticCurveToRelative: function (x, y) {\n      return this.quadraticCurveToPoint(this.getSmoothQuadraticControlPoint(), v(x, y).plus(this.getRelativePoint()));\n    },\n    quadraticCurveToPoint: function (controlPoint, point) {\n      this.ensure(controlPoint);\n      var start = this.getLastSubpath().getLastPoint();\n      var quadratic = new kite.Segment.Quadratic(start, controlPoint, point);\n      this.getLastSubpath().addPoint(point);\n      if (!quadratic.invalid) {\n        this.getLastSubpath().addSegment(quadratic);\n        this.bounds = this.bounds.union(quadratic.bounds);\n      }\n      return this;\n    },\n    cubicCurveTo: function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(v(cp1x, cp1y), v(cp2x, cp2y), v(x, y));\n    },\n    cubicCurveToRelative: function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      return this.cubicCurveToPointRelative(v(cp1x, cp1y), v(cp2x, cp2y), v(x, y));\n    },\n    cubicCurveToPointRelative: function (control1, control2, point) {\n      var relativePoint = this.getRelativePoint();\n      return this.cubicCurveToPoint(relativePoint.plus(control1), relativePoint.plus(control2), relativePoint.plus(point));\n    },\n    smoothCubicCurveTo: function (cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(this.getSmoothCubicControlPoint(), v(cp2x, cp2y), v(x, y));\n    },\n    smoothCubicCurveToRelative: function (cp2x, cp2y, x, y) {\n      return this.cubicCurveToPoint(this.getSmoothCubicControlPoint(), v(cp2x, cp2y).plus(this.getRelativePoint()), v(x, y).plus(this.getRelativePoint()));\n    },\n    cubicCurveToPoint: function (control1, control2, point) {\n      this.ensure(control1);\n      var start = this.getLastSubpath().getLastPoint();\n      var cubic = new kite.Segment.Cubic(start, control1, control2, point);\n      if (!cubic.invalid) {\n        if (cubic.hasCusp()) {\n          this.getLastSubpath().addSegment(cubic.startQuadratic);\n          this.getLastSubpath().addSegment(cubic.endQuadratic);\n        } else {\n          this.getLastSubpath().addSegment(cubic);\n        }\n        this.bounds = this.bounds.union(cubic.bounds);\n      }\n      this.getLastSubpath().addPoint(point);\n      return this;\n    },\n    arc: function (centerX, centerY, radius, startAngle, endAngle, anticlockwise) {\n      return this.arcPoint(v(centerX, centerY), radius, startAngle, endAngle, anticlockwise);\n    },\n    arcPoint: function (center, radius, startAngle, endAngle, anticlockwise) {\n      var arc = new kite.Segment.Arc(center, radius, startAngle, endAngle, anticlockwise);\n      var startPoint = arc.start;\n      var endPoint = arc.end;\n      if (this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals(this.getLastSubpath().getLastPoint(), 0)) {\n        this.getLastSubpath().addSegment(new kite.Segment.Line(this.getLastSubpath().getLastPoint(), startPoint));\n      }\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new kite.Subpath());\n      }\n      this.getLastSubpath().addPoint(startPoint);\n      this.getLastSubpath().addPoint(endPoint);\n      if (!arc.invalid) {\n        this.getLastSubpath().addSegment(arc);\n        this.bounds = this.bounds.union(arc.bounds);\n      }\n      return this;\n    },\n    ellipticalArc: function (centerX, centerY, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n      return this.ellipticalArcPoint(v(centerX, centerY), radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n    },\n    ellipticalArcPoint: function (center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n      var ellipticalArc = new kite.Segment.EllipticalArc(center, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n      var startPoint = ellipticalArc.start;\n      var endPoint = ellipticalArc.end;\n      if (this.hasSubpaths() && this.getLastSubpath().getLength() > 0 && !startPoint.equals(this.getLastSubpath().getLastPoint(), 0)) {\n        this.getLastSubpath().addSegment(new kite.Segment.Line(this.getLastSubpath().getLastPoint(), startPoint));\n      }\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new kite.Subpath());\n      }\n      this.getLastSubpath().addPoint(startPoint);\n      this.getLastSubpath().addPoint(endPoint);\n      if (!ellipticalArc.invalid) {\n        this.getLastSubpath().addSegment(ellipticalArc);\n        this.bounds = this.bounds.union(ellipticalArc.bounds);\n      }\n      return this;\n    },\n    close: function () {\n      if (this.hasSubpaths()) {\n        var previousPath = this.getLastSubpath();\n        var nextPath = new kite.Subpath();\n        previousPath.close();\n        this.addSubpath(nextPath);\n        nextPath.addPoint(previousPath.getFirstPoint());\n      }\n      return this;\n    },\n    ellipticalArcToRelative: function (radiusX, radiusY, rotation, largeArc, sweep, x, y) {\n      var relativePoint = this.getRelativePoint();\n      return this.ellipticalArcTo(radiusX, radiusY, rotation, largeArc, sweep, x + relativePoint.x, y + relativePoint.y);\n    },\n    ellipticalArcTo: function (radiusX, radiusY, rotation, largeArc, sweep, x, y) {\n      throw new Error('ellipticalArcTo unimplemented');\n    },\n    circle: function (centerX, centerY, radius) {\n      if (typeof centerX === 'object') {\n        var center = centerX;\n        radius = centerY;\n        return this.arcPoint(center, radius, 0, Math.PI * 2, false);\n      } else {\n        return this.arcPoint(p(centerX, centerY), radius, 0, Math.PI * 2, false);\n      }\n    },\n    ellipse: function (centerX, centerY, radiusX, radiusY, rotation) {\n      if (typeof centerX === 'object') {\n        var center = centerX;\n        rotation = radiusY;\n        radiusY = radiusX;\n        radiusX = centerY;\n        return this.ellipticalArcPoint(center, radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false);\n      } else {\n        return this.ellipticalArcPoint(v(centerX, centerY), radiusX, radiusY, rotation || 0, 0, Math.PI * 2, false);\n      }\n    },\n    rect: function (x, y, width, height) {\n      var subpath = new kite.Subpath();\n      this.addSubpath(subpath);\n      subpath.addPoint(v(x, y));\n      subpath.addPoint(v(x + width, y));\n      subpath.addPoint(v(x + width, y + height));\n      subpath.addPoint(v(x, y + height));\n      subpath.addSegment(new kite.Segment.Line(subpath.points[0], subpath.points[1]));\n      subpath.addSegment(new kite.Segment.Line(subpath.points[1], subpath.points[2]));\n      subpath.addSegment(new kite.Segment.Line(subpath.points[2], subpath.points[3]));\n      subpath.close();\n      this.addSubpath(new kite.Subpath());\n      this.getLastSubpath().addPoint(v(x, y));\n      this.bounds = this.bounds.withCoordinates(x, y).withCoordinates(x + width, y + height);\n      null;\n      return this;\n    },\n    roundRect: function (x, y, width, height, arcw, arch) {\n      var lowX = x + arcw;\n      var highX = x + width - arcw;\n      var lowY = y + arch;\n      var highY = y + height - arch;\n      if (arcw === arch) {\n        this.arc(highX, lowY, arcw, -Math.PI / 2, 0, false).arc(highX, highY, arcw, 0, Math.PI / 2, false).arc(lowX, highY, arcw, Math.PI / 2, Math.PI, false).arc(lowX, lowY, arcw, Math.PI, Math.PI * 3 / 2, false).close();\n      } else {\n        this.ellipticalArc(highX, lowY, arcw, arch, 0, -Math.PI / 2, 0, false).ellipticalArc(highX, highY, arcw, arch, 0, 0, Math.PI / 2, false).ellipticalArc(lowX, highY, arcw, arch, 0, Math.PI / 2, Math.PI, false).ellipticalArc(lowX, lowY, arcw, arch, 0, Math.PI, Math.PI * 3 / 2, false).close();\n      }\n      return this;\n    },\n    copy: function () {\n      return new Shape(_.map(this.subpaths, function (subpath) {\n        return subpath.copy();\n      }), this.bounds);\n    },\n    writeToContext: function (context) {\n      var len = this.subpaths.length;\n      for (var i = 0; i < len; i++) {\n        this.subpaths[i].writeToContext(context);\n      }\n    },\n    getSVGPath: function () {\n      var subpathStrings = [];\n      var len = this.subpaths.length;\n      for (var i = 0; i < len; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var startPoint = subpath.getFirstSegment().start;\n          null;\n          var string = 'M ' + startPoint.x + ' ' + startPoint.y + ' ';\n          string += _.map(subpath.segments, function (segment) {\n            return segment.getSVGPathFragment();\n          }).join(' ');\n          if (subpath.isClosed()) {\n            string += ' Z';\n          }\n          subpathStrings.push(string);\n        }\n      }\n      return subpathStrings.join(' ');\n    },\n    transformed: function (matrix) {\n      var subpaths = _.map(this.subpaths, function (subpath) {\n          return subpath.transformed(matrix);\n        });\n      var bounds = _.reduce(subpaths, function (bounds, subpath) {\n          return bounds.union(subpath.computeBounds());\n        }, Bounds2.NOTHING);\n      return new Shape(subpaths, bounds);\n    },\n    computeBounds: function (lineStyles) {\n      if (lineStyles) {\n        return this.bounds.union(this.getStrokedShape(lineStyles).bounds);\n      } else {\n        return this.bounds;\n      }\n    },\n    containsPoint: function (point) {\n      var ray = new Ray2(point, Vector2.X_UNIT);\n      return this.windingIntersection(ray) !== 0;\n    },\n    intersection: function (ray) {\n      var hits = [];\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            var segment = subpath.segments[k];\n            hits = hits.concat(segment.intersection(ray));\n          }\n          if (subpath.hasClosingSegment()) {\n            hits = hits.concat(subpath.getClosingSegment().intersection(ray));\n          }\n        }\n      }\n      return _.sortBy(hits, function (hit) {\n        return hit.distance;\n      });\n    },\n    windingIntersection: function (ray) {\n      var wind = 0;\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            wind += subpath.segments[k].windingIntersection(ray);\n          }\n          if (subpath.hasClosingSegment()) {\n            wind += subpath.getClosingSegment().windingIntersection(ray);\n          }\n        }\n      }\n      return wind;\n    },\n    intersectsBounds: function (bounds) {\n      var numSubpaths = this.subpaths.length;\n      for (var i = 0; i < numSubpaths; i++) {\n        var subpath = this.subpaths[i];\n        if (subpath.isDrawable()) {\n          var numSegments = subpath.segments.length;\n          for (var k = 0; k < numSegments; k++) {\n            if (subpath.segments[k].intersectsBounds(bounds)) {\n              return true;\n            }\n          }\n          if (subpath.hasClosingSegment()) {\n            if (subpath.getClosingSegment().intersectsBounds(bounds)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    getStrokedShape: function (lineStyles) {\n      var subpaths = [];\n      var bounds = Bounds2.NOTHING.copy();\n      var subLen = this.subpaths.length;\n      for (var i = 0; i < subLen; i++) {\n        var subpath = this.subpaths[i];\n        var strokedSubpath = subpath.stroked(lineStyles);\n        subpaths = subpaths.concat(strokedSubpath);\n      }\n      subLen = subpaths.length;\n      for (i = 0; i < subLen; i++) {\n        bounds.includeBounds(subpaths[i].computeBounds());\n      }\n      return new Shape(subpaths, bounds);\n    },\n    toString: function () {\n      return 'new kite.Shape( \\'' + this.getSVGPath() + '\\' )';\n    },\n    ensure: function (point) {\n      if (!this.hasSubpaths()) {\n        this.addSubpath(new Subpath());\n        this.getLastSubpath().addPoint(point);\n      }\n    },\n    addSubpath: function (subpath) {\n      this.subpaths.push(subpath);\n      return this;\n    },\n    hasSubpaths: function () {\n      return this.subpaths.length > 0;\n    },\n    getLastSubpath: function () {\n      return _.last(this.subpaths);\n    },\n    getLastPoint: function () {\n      return this.hasSubpaths() ? this.getLastSubpath().getLastPoint() : null;\n    },\n    getLastSegment: function () {\n      if (!this.hasSubpaths()) {\n        return null;\n      }\n      var subpath = this.getLastSubpath();\n      if (!subpath.isDrawable()) {\n        return null;\n      }\n      return subpath.getLastSegment();\n    },\n    getSmoothQuadraticControlPoint: function () {\n      var lastPoint = this.getLastPoint();\n      var segment = this.getLastSegment();\n      if (!segment || !(segment instanceof kite.Segment.Quadratic)) {\n        return lastPoint;\n      }\n      return lastPoint.plus(lastPoint.minus(segment.control));\n    },\n    getSmoothCubicControlPoint: function () {\n      var lastPoint = this.getLastPoint();\n      var segment = this.getLastSegment();\n      if (!segment || !(segment instanceof kite.Segment.Cubic)) {\n        return lastPoint;\n      }\n      return lastPoint.plus(lastPoint.minus(segment.control2));\n    },\n    getRelativePoint: function () {\n      var lastPoint = this.getLastPoint();\n      return lastPoint ? lastPoint : Vector2.ZERO;\n    }\n  };\n  Shape.rectangle = function (x, y, width, height) {\n    return new Shape().rect(x, y, width, height);\n  };\n  Shape.rect = Shape.rectangle;\n  Shape.roundRect = function (x, y, width, height, arcw, arch) {\n    return new Shape().roundRect(x, y, width, height, arcw, arch);\n  };\n  Shape.roundRectangle = Shape.roundRect;\n  Shape.bounds = function (bounds) {\n    return new Shape().rect(bounds.minX, bounds.minY, bounds.maxX - bounds.minX, bounds.maxY - bounds.minY);\n  };\n  Shape.lineSegment = function (a, b, c, d) {\n    if (typeof a === 'number') {\n      return new Shape().moveTo(a, b).lineTo(c, d);\n    } else {\n      return new Shape().moveToPoint(a).lineToPoint(b);\n    }\n  };\n  Shape.regularPolygon = function (sides, radius) {\n    var shape = new Shape();\n    _.each(_.range(sides), function (k) {\n      var point = Vector2.createPolar(radius, 2 * Math.PI * k / sides);\n      k === 0 ? shape.moveToPoint(point) : shape.lineToPoint(point);\n    });\n    return shape.close();\n  };\n  Shape.circle = function (centerX, centerY, radius) {\n    if (centerY === undefined) {\n      return new Shape().circle(0, 0, centerX);\n    }\n    return new Shape().circle(centerX, centerY, radius).close();\n  };\n  Shape.ellipse = function (centerX, centerY, radiusX, radiusY) {\n    if (radiusX === undefined) {\n      return new Shape().ellipse(0, 0, centerX, centerY);\n    }\n    return new Shape().ellipse(centerX, centerY, radiusX, radiusY).close();\n  };\n  Shape.arc = function (centerX, centerY, radius, startAngle, endAngle, anticlockwise) {\n    return new Shape().arc(centerX, centerY, radius, startAngle, endAngle, anticlockwise);\n  };\n  return Shape;\n});","\ndefine('SCENERY/util/FixedNodeEvents',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var eventNames = [\n      'selfBounds',\n      'childBounds',\n      'bounds',\n      'resize',\n      'boundsAccuracy'\n    ];\n  scenery.FixedNodeEvents = function FixedNodeEvents(type) {\n    var proto = type.prototype;\n    proto.initializeNodeEvents = function () {\n      this._events = {};\n      var node = this;\n      var len = eventNames.length;\n      for (var i = 0; i < len; i++) {\n        node._events[eventNames[i]] = [];\n      }\n    };\n    proto.addEventListener = function (type, listener) {\n      sceneryAssert && sceneryAssert(type !== undefined && listener !== undefined, 'Both a type and listener are required for addEventListener');\n      sceneryAssert && sceneryAssert(_.indexOf(this._events[type], listener), 'Event listener was already there for addEventListener with type ' + type);\n      this._events[type].push(listener);\n      return this;\n    };\n    proto.removeEventListener = function (type, listener) {\n      sceneryAssert && sceneryAssert(type !== undefined && listener !== undefined, 'Both a type and listener are required for removeEventListener');\n      sceneryAssert && sceneryAssert(_.indexOf(this._events[type], listener) !== -1, 'Listener did not exist for type ' + type);\n      this._events[type].splice(_.indexOf(this._events[type], listener), 1);\n      return this;\n    };\n    proto.fireEvent = function (type, args) {\n      sceneryAssert && sceneryAssert(_.contains(eventNames, type), 'unknown event type: ' + type);\n      var events = this._events[type];\n      var len = events.length;\n      if (len) {\n        var copy = events.slice(0);\n        for (var i = 0; i < len; i++) {\n          copy[i](args);\n        }\n      }\n    };\n  };\n  var FixedNodeEvents = scenery.FixedNodeEvents;\n  return FixedNodeEvents;\n});","\ndefine('SCENERY/layers/LayerStrategy',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.LayerStrategy = {\n    hasPreferredLayerType: function (pointer, layerBuilder) {\n      return pointer.trail.lastNode().hasRenderer();\n    },\n    getPreferredLayerType: function (pointer, layerBuilder) {\n      sceneryAssert && sceneryAssert(this.hasPreferredLayerType(pointer, layerBuilder));\n      var node = pointer.trail.lastNode();\n      var preferredLayerType;\n      if (node.hasRendererLayerType()) {\n        preferredLayerType = node.getRendererLayerType();\n      } else {\n        preferredLayerType = layerBuilder.bestPreferredLayerTypeFor([node.getRenderer()]);\n        if (!preferredLayerType) {\n          preferredLayerType = node.getRenderer().defaultLayerType;\n        }\n      }\n      return preferredLayerType;\n    },\n    enter: function (pointer, layerBuilder) {\n      var trail = pointer.trail;\n      var node = trail.lastNode();\n      var preferredLayerType;\n      if (node.hasRenderer()) {\n        preferredLayerType = this.getPreferredLayerType(pointer, layerBuilder);\n        layerBuilder.pushPreferredLayerType(preferredLayerType);\n        if (layerBuilder.getCurrentLayerType() !== preferredLayerType) {\n          layerBuilder.switchToType(pointer, preferredLayerType);\n        }\n      } else if (node.isPainted()) {\n        var supportedRenderers = node._supportedRenderers;\n        var currentType = layerBuilder.getCurrentLayerType();\n        preferredLayerType = layerBuilder.bestPreferredLayerTypeFor(supportedRenderers);\n        if (preferredLayerType) {\n          if (currentType !== preferredLayerType) {\n            layerBuilder.switchToType(pointer, preferredLayerType);\n          }\n        } else {\n          if (!currentType || !currentType.supportsNode(node)) {\n            layerBuilder.switchToType(pointer, supportedRenderers[0].defaultLayerType);\n          }\n        }\n      }\n      if (node.isLayerSplitBefore() || this.hasSplitFlags(node)) {\n        layerBuilder.switchToType(pointer, layerBuilder.getCurrentLayerType());\n      }\n      if (node.isPainted()) {\n        layerBuilder.markPainted(pointer);\n      }\n    },\n    exit: function (pointer, layerBuilder) {\n      var trail = pointer.trail;\n      var node = trail.lastNode();\n      if (node.hasRenderer()) {\n        layerBuilder.popPreferredLayerType();\n      }\n      if (node.isLayerSplitAfter() || this.hasSplitFlags(node)) {\n        layerBuilder.switchToType(pointer, layerBuilder.getCurrentLayerType());\n      }\n    },\n    hasSplitFlags: function (node) {\n      var rendererOptions = node.getRendererOptions();\n      return node.hasRenderer() && rendererOptions && (rendererOptions.cssTranslation || rendererOptions.cssRotation || rendererOptions.cssScale || rendererOptions.cssTransform);\n    }\n  };\n  var LayerStrategy = scenery.LayerStrategy;\n  return LayerStrategy;\n});","\ndefine('SCENERY/nodes/Node',['require','DOT/Bounds2','DOT/Transform3','DOT/Matrix3','DOT/Vector2','DOT/Util','KITE/Shape','SCENERY/scenery','SCENERY/util/FixedNodeEvents','SCENERY/layers/LayerStrategy'],function (require) {\n  'use strict';\n  var Bounds2 = require('DOT/Bounds2');\n  var Transform3 = require('DOT/Transform3');\n  var Matrix3 = require('DOT/Matrix3');\n  var Vector2 = require('DOT/Vector2');\n  var clamp = require('DOT/Util').clamp;\n  var Shape = require('KITE/Shape');\n  var scenery = require('SCENERY/scenery');\n  var NodeEvents = require('SCENERY/util/FixedNodeEvents');\n  var LayerStrategy = require('SCENERY/layers/LayerStrategy');\n  var globalIdCounter = 1;\n  scenery.Node = function Node(options) {\n    var self = this;\n    this._id = globalIdCounter++;\n    this._instances = [];\n    this._visible = true;\n    this._opacity = 1;\n    this._pickable = true;\n    this._clipShape = null;\n    this._mouseArea = null;\n    this._touchArea = null;\n    this._cursor = null;\n    this._children = [];\n    this._parents = [];\n    this._peers = [];\n    this._liveRegions = [];\n    this._transform = new Transform3();\n    this._transformListener = {\n      before: function () {\n        self.beforeTransformChange();\n      },\n      after: function () {\n        self.afterTransformChange();\n      }\n    };\n    this._transform.addTransformListener(this._transformListener);\n    this._inputListeners = [];\n    this.initializeNodeEvents();\n    this._includeStrokeInHitRegion = false;\n    this._bounds = Bounds2.NOTHING;\n    this._selfBounds = Bounds2.NOTHING;\n    this._childBounds = Bounds2.NOTHING;\n    this._boundsDirty = true;\n    this._selfBoundsDirty = this.isPainted();\n    this._childBoundsDirty = true;\n    this._mouseBounds = null;\n    this._mouseBoundsDirty = true;\n    this._touchBounds = null;\n    this._touchBoundsDirty = true;\n    this._paintDirty = false;\n    this._subtreePaintDirty = false;\n    this._childPaintDirty = false;\n    this._renderer = null;\n    this._rendererOptions = null;\n    this._rendererLayerType = null;\n    this._layerSplitBefore = false;\n    this._layerSplitAfter = false;\n    if (options) {\n      this.mutate(options);\n    }\n    phetAllocation && phetAllocation('Node');\n  };\n  var Node = scenery.Node;\n  Node.prototype = {\n    constructor: Node,\n    insertChild: function (index, node) {\n      sceneryAssert && sceneryAssert(node !== null && node !== undefined, 'insertChild cannot insert a null/undefined child');\n      sceneryAssert && sceneryAssert(!_.contains(this._children, node), 'Parent already contains child');\n      sceneryAssert && sceneryAssert(node !== this, 'Cannot add self as a child');\n      node._parents.push(this);\n      this._children.splice(index, 0, node);\n      node.invalidateBounds();\n      this._boundsDirty = true;\n      this.markForInsertion(node, index);\n      this.notifyStitch(false);\n      node.invalidateSubtreePaint();\n    },\n    addChild: function (node) {\n      this.insertChild(this._children.length, node);\n    },\n    removeChild: function (node) {\n      sceneryAssert && sceneryAssert(node);\n      sceneryAssert && sceneryAssert(this.isChild(node));\n      var indexOfChild = _.indexOf(this._children, node);\n      this.removeChildWithIndex(node, indexOfChild);\n    },\n    removeChildAt: function (index) {\n      sceneryAssert && sceneryAssert(index >= 0);\n      sceneryAssert && sceneryAssert(index < this._children.length);\n      var node = this._children[index];\n      this.removeChildWithIndex(node, index);\n    },\n    removeChildWithIndex: function (node, indexOfChild) {\n      sceneryAssert && sceneryAssert(node);\n      sceneryAssert && sceneryAssert(this.isChild(node));\n      sceneryAssert && sceneryAssert(this._children[indexOfChild] === node);\n      node.markOldPaint(false);\n      var indexOfParent = _.indexOf(node._parents, this);\n      this.markForRemoval(node, indexOfChild);\n      node._parents.splice(indexOfParent, 1);\n      this._children.splice(indexOfChild, 1);\n      this.invalidateBounds();\n      this._childBoundsDirty = true;\n      this.notifyStitch(false);\n    },\n    removeAllChildren: function () {\n      this.setChildren([]);\n    },\n    setChildren: function (children) {\n      if (this._children !== children) {\n        while (this._children.length) {\n          this.removeChild(this._children[this._children.length - 1]);\n        }\n        var len = children.length;\n        for (var i = 0; i < len; i++) {\n          this.addChild(children[i]);\n        }\n      }\n    },\n    getChildren: function () {\n      return this._children.slice(0);\n    },\n    getChildrenCount: function () {\n      return this._children.length;\n    },\n    getParents: function () {\n      return this._parents.slice(0);\n    },\n    getChildAt: function (index) {\n      return this._children[index];\n    },\n    indexOfParent: function (parent) {\n      return _.indexOf(this._parents, parent);\n    },\n    indexOfChild: function (child) {\n      return _.indexOf(this._children, child);\n    },\n    moveToFront: function () {\n      var self = this;\n      _.each(this._parents.slice(0), function (parent) {\n        parent.moveChildToFront(self);\n      });\n    },\n    moveChildToFront: function (child) {\n      if (this.indexOfChild(child) !== this._children.length - 1) {\n        this.removeChild(child);\n        this.addChild(child);\n      }\n    },\n    moveToBack: function () {\n      var self = this;\n      _.each(this._parents.slice(0), function (parent) {\n        parent.moveChildToBack(self);\n      });\n    },\n    moveChildToBack: function (child) {\n      if (this.indexOfChild(child) !== 0) {\n        this.removeChild(child);\n        this.insertChild(0, child);\n      }\n    },\n    detach: function () {\n      var that = this;\n      _.each(this._parents.slice(0), function (parent) {\n        parent.removeChild(that);\n      });\n    },\n    addPeer: function (element, options) {\n      sceneryAssert && sceneryAssert(!this.instances.length, 'Cannot call addPeer after a node has instances (yet)');\n      this._peers.push({\n        element: element,\n        options: options\n      });\n    },\n    addLiveRegion: function (property, options) {\n      this._liveRegions.push({\n        property: property,\n        options: options\n      });\n    },\n    validateBounds: function () {\n      var that = this;\n      var i;\n      if (this._selfBoundsDirty) {\n        this._selfBoundsDirty = false;\n        this.fireEvent('selfBounds', this._selfBounds);\n      }\n      if (this._childBoundsDirty) {\n        i = this._children.length;\n        while (i--) {\n          this._children[i].validateBounds();\n        }\n        var oldChildBounds = this._childBounds;\n        this._childBounds = Bounds2.NOTHING.copy();\n        i = this._children.length;\n        while (i--) {\n          this._childBounds.includeBounds(this._children[i]._bounds);\n        }\n        this._childBoundsDirty = false;\n        if (!this._childBounds.equals(oldChildBounds)) {\n          this.fireEvent('childBounds', this._childBounds);\n        }\n      }\n      if (this._boundsDirty) {\n        this._boundsDirty = false;\n        var oldBounds = this._bounds;\n        var newBounds = this.transformBoundsFromLocalToParent(this._selfBounds.copy().includeBounds(this._childBounds));\n        var changed = !newBounds.equals(oldBounds);\n        if (changed) {\n          this._bounds = newBounds;\n          i = this._parents.length;\n          while (i--) {\n            this._parents[i].invalidateBounds();\n          }\n          this.fireEvent('bounds', this._bounds);\n        }\n      }\n      if (this._selfBoundsDirty || this._childBoundsDirty || this._boundsDirty) {\n        this.validateBounds();\n      }\n      if (sceneryAssertExtra) {\n        (function () {\n          var epsilon = 0.000001;\n          var childBounds = Bounds2.NOTHING.copy();\n          _.each(that.children, function (child) {\n            childBounds.includeBounds(child._bounds);\n          });\n          var fullBounds = that.localToParentBounds(that._selfBounds).union(that.localToParentBounds(childBounds));\n          sceneryAssertExtra && sceneryAssertExtra(that._childBounds.equalsEpsilon(childBounds, epsilon), 'Child bounds mismatch after validateBounds: ' + that._childBounds.toString() + ', expected: ' + childBounds.toString());\n          sceneryAssertExtra && sceneryAssertExtra(that._bounds.equalsEpsilon(fullBounds, epsilon), 'Bounds mismatch after validateBounds: ' + that._bounds.toString() + ', expected: ' + fullBounds.toString());\n        }());\n      }\n    },\n    validateMouseBounds: function () {\n      var that = this;\n      sceneryAssert && sceneryAssert(!this._selfBoundsDirty && !this._childBoundsDirty && !this._boundsDirty, 'Bounds must be validated before calling validateMouseBounds');\n      if (this._mouseBoundsDirty) {\n        var hasMouseAreas = false;\n        this._mouseBounds = this._selfBounds.copy();\n        var i = this._children.length;\n        while (i--) {\n          var child = this._children[i];\n          child.validateMouseBounds();\n          if (child._mouseBounds) {\n            hasMouseAreas = true;\n            that._mouseBounds.includeBounds(child._mouseBounds);\n          }\n        }\n        if (this._mouseArea) {\n          hasMouseAreas = true;\n          this._mouseBounds.includeBounds(this._mouseArea.bounds);\n        }\n        if (hasMouseAreas) {\n          this.transformBoundsFromLocalToParent(this._mouseBounds);\n          this._mouseBounds.includeBounds(this._bounds);\n        } else {\n          this._mouseBounds = null;\n        }\n        this._mouseBoundsDirty = false;\n      }\n    },\n    validateTouchBounds: function () {\n      var that = this;\n      sceneryAssert && sceneryAssert(!this._selfBoundsDirty && !this._childBoundsDirty && !this._boundsDirty, 'Bounds must be validated before calling validateTouchBounds');\n      if (this._touchBoundsDirty) {\n        var hasTouchAreas = false;\n        this._touchBounds = this._selfBounds.copy();\n        var i = this._children.length;\n        while (i--) {\n          var child = this._children[i];\n          child.validateTouchBounds();\n          if (child._touchBounds) {\n            hasTouchAreas = true;\n            that._touchBounds.includeBounds(child._touchBounds);\n          }\n        }\n        if (this._touchArea) {\n          hasTouchAreas = true;\n          this._touchBounds.includeBounds(this._touchArea.bounds);\n        }\n        if (hasTouchAreas) {\n          this.transformBoundsFromLocalToParent(this._touchBounds);\n          this._touchBounds.includeBounds(this._bounds);\n        } else {\n          this._touchBounds = null;\n        }\n        this._touchBoundsDirty = false;\n      }\n    },\n    validatePaint: function () {\n      if (this._paintDirty) {\n        sceneryAssert && sceneryAssert(this.isPainted(), 'Only painted nodes can have self dirty paint');\n        if (!this._subtreePaintDirty) {\n          this.notifyDirtySelfPaint();\n        }\n        this._paintDirty = false;\n      }\n      if (this._subtreePaintDirty) {\n        this.notifyDirtySubtreePaint();\n        this._subtreePaintDirty = false;\n      }\n      if (this._childPaintDirty) {\n        this._childPaintDirty = false;\n        var children = this._children;\n        var length = children.length;\n        for (var i = 0; i < length; i++) {\n          children[i].validatePaint();\n        }\n      }\n    },\n    invalidateBounds: function () {\n      this._boundsDirty = true;\n      this._mouseBoundsDirty = true;\n      this._touchBoundsDirty = true;\n      var i = this._parents.length;\n      while (i--) {\n        this._parents[i].invalidateChildBounds();\n      }\n    },\n    invalidateChildBounds: function () {\n      if (!this._childBoundsDirty) {\n        this._childBoundsDirty = true;\n        this._mouseBoundsDirty = true;\n        this._touchBoundsDirty = true;\n        var i = this._parents.length;\n        while (i--) {\n          this._parents[i].invalidateChildBounds();\n        }\n      }\n    },\n    invalidatePaint: function () {\n      sceneryAssert && sceneryAssert(this.isPainted(), 'Can only call invalidatePaint on a painted node');\n      this._paintDirty = true;\n      var i = this._parents.length;\n      while (i--) {\n        this._parents[i].invalidateChildPaint();\n      }\n    },\n    invalidateSubtreePaint: function () {\n      this._subtreePaintDirty = true;\n      var i = this._parents.length;\n      while (i--) {\n        this._parents[i].invalidateChildPaint();\n      }\n    },\n    invalidateChildPaint: function () {\n      if (!this._childPaintDirty) {\n        this._childPaintDirty = true;\n        var i = this._parents.length;\n        while (i--) {\n          this._parents[i].invalidateChildPaint();\n        }\n      }\n    },\n    invalidateSelf: function (newBounds) {\n      sceneryAssert && sceneryAssert(newBounds.isEmpty() || newBounds.isFinite(), 'Bounds must be empty or finite in invalidateSelf');\n      this.notifyBeforeSelfChange();\n      if (!this._selfBounds.equals(newBounds)) {\n        this._selfBoundsDirty = true;\n        this.invalidateBounds();\n        this._selfBounds = newBounds;\n      }\n      this.invalidatePaint();\n    },\n    markOldSelfPaint: function () {\n      this.notifyBeforeSelfChange();\n    },\n    markLayerRefreshNeeded: function () {\n      this.markForLayerRefresh();\n      this.notifyStitch(true);\n    },\n    markOldPaint: function (justSelf) {\n      if (justSelf) {\n        this.notifyBeforeSelfChange();\n      } else {\n        this.notifyBeforeSubtreeChange();\n      }\n    },\n    isChild: function (potentialChild) {\n      var ourChild = _.contains(this._children, potentialChild);\n      var itsParent = _.contains(potentialChild._parents, this);\n      sceneryAssert && sceneryAssert(ourChild === itsParent);\n      return ourChild;\n    },\n    getSelfBounds: function () {\n      return this._selfBounds;\n    },\n    getChildBounds: function () {\n      this.validateBounds();\n      return this._childBounds;\n    },\n    getBounds: function () {\n      this.validateBounds();\n      return this._bounds;\n    },\n    getVisibleBounds: function () {\n      var bounds = this._selfBounds.copy();\n      var i = this._children.length;\n      while (i--) {\n        var child = this._children[i];\n        if (child.isVisible()) {\n          bounds.includeBounds(child.getVisibleBounds());\n        }\n      }\n      sceneryAssert && sceneryAssert(bounds.isFinite() || bounds.isEmpty(), 'Visible bounds should not be infinite');\n      return this.localToParentBounds(bounds);\n    },\n    trailUnderPointer: function (pointer) {\n      var options = {};\n      if (pointer.isMouse) {\n        options.isMouse = true;\n      }\n      if (pointer.isTouch) {\n        options.isTouch = true;\n      }\n      if (pointer.isPen) {\n        options.isPen = true;\n      }\n      return this.trailUnderPoint(pointer.point, options);\n    },\n    trailUnderPoint: function (point, options, recursive) {\n      sceneryAssert && sceneryAssert(point, 'trailUnderPointer requires a point');\n      if (options === undefined) {\n        options = {};\n      }\n      var pruneInvisible = options.pruneInvisible === undefined ? true : options.pruneInvisible;\n      var pruneUnpickable = options.pruneUnpickable === undefined ? true : options.pruneUnpickable;\n      if (pruneInvisible && !this.isVisible()) {\n        return null;\n      }\n      if (pruneUnpickable && !this.isPickable()) {\n        return null;\n      }\n      this.validateBounds();\n      if (options.isMouse) {\n        this.validateMouseBounds();\n      }\n      if (options.isTouch) {\n        this.validateTouchBounds();\n      }\n      var hasHitAreas = options && (options.isMouse && this._mouseBounds || options.isTouch && this._touchBounds || options.isPen);\n      if (hasHitAreas ? options.isMouse && !this._mouseBounds.containsPoint(point) || options.isTouch && !this._touchBounds.containsPoint(point) : !this._bounds.containsPoint(point)) {\n        return null;\n      }\n      var result = null;\n      var localPoint = this._transform.getInverse().multiplyVector2(Vector2.createFromPool(point.x, point.y));\n      if (this._children.length > 0 && (hasHitAreas || this._childBounds.containsPoint(localPoint))) {\n        for (var i = this._children.length - 1; i >= 0; i--) {\n          var child = this._children[i];\n          var childHit = child.trailUnderPoint(localPoint, options);\n          if (childHit) {\n            childHit.addAncestor(this, i);\n            localPoint.freeToPool();\n            return childHit;\n          }\n        }\n      }\n      if (hasHitAreas) {\n        if (options.isMouse && this._mouseArea) {\n          result = this._mouseArea.containsPoint(localPoint) ? new scenery.Trail(this) : null;\n          localPoint.freeToPool();\n          return result;\n        }\n        if ((options.isTouch || options.isPen) && this._touchArea) {\n          result = this._touchArea.containsPoint(localPoint) ? new scenery.Trail(this) : null;\n          localPoint.freeToPool();\n          return result;\n        }\n      }\n      if (hasHitAreas || this._selfBounds.containsPoint(localPoint)) {\n        if (this.containsPointSelf(localPoint)) {\n          localPoint.freeToPool();\n          return new scenery.Trail(this);\n        }\n      }\n      localPoint.freeToPool();\n      return null;\n    },\n    containsPoint: function (point) {\n      return this.trailUnderPoint(point) !== null;\n    },\n    containsPointSelf: function (point) {\n      return this._selfBounds.containsPoint(point);\n    },\n    intersectsBoundsSelf: function (bounds) {\n      return this._selfBounds.intersectsBounds(bounds);\n    },\n    isPainted: function () {\n      return false;\n    },\n    hasParent: function () {\n      return this._parents.length !== 0;\n    },\n    hasChildren: function () {\n      return this._children.length > 0;\n    },\n    walkDepthFirst: function (callback) {\n      callback(this);\n      var length = this._children.length;\n      for (var i = 0; i < length; i++) {\n        this._children[i].walkDepthFirst(callback);\n      }\n    },\n    getChildrenWithinBounds: function (bounds) {\n      var result = [];\n      var length = this._children.length;\n      for (var i = 0; i < length; i++) {\n        var child = this._children[i];\n        if (!child._bounds.intersection(bounds).isEmpty()) {\n          result.push(child);\n        }\n      }\n      return result;\n    },\n    addInputListener: function (listener) {\n      if (_.indexOf(this._inputListeners, listener) === -1) {\n        this._inputListeners.push(listener);\n      }\n      return this;\n    },\n    removeInputListener: function (listener) {\n      sceneryAssert && sceneryAssert(_.indexOf(this._inputListeners, listener) !== -1);\n      this._inputListeners.splice(_.indexOf(this._inputListeners, listener), 1);\n      return this;\n    },\n    getInputListeners: function () {\n      return this._inputListeners.slice(0);\n    },\n    dispatchEvent: function (type, args) {\n      sceneryEventLog && sceneryEventLog(this.constructor.name + '.dispatchEvent ' + type);\n      var trail = new scenery.Trail();\n      trail.setMutable();\n      args.trail = trail;\n      var branches = false;\n      function recursiveEventDispatch(node) {\n        trail.addAncestor(node);\n        node.fireEvent(type, args);\n        var parents = node._parents;\n        var length = parents.length;\n        branches = branches || length > 1;\n        for (var i = 0; i < length; i++) {\n          recursiveEventDispatch(parents[i]);\n        }\n        if (branches) {\n          trail.removeAncestor();\n        }\n      }\n      recursiveEventDispatch(this);\n    },\n    translate: function (x, y, prependInstead) {\n      if (typeof x === 'number') {\n        if (!x && !y) {\n          return;\n        }\n        if (prependInstead) {\n          this.prependTranslation(x, y);\n        } else {\n          this.appendMatrix(Matrix3.translation(x, y));\n        }\n      } else {\n        var vector = x;\n        if (!vector.x && !vector.y) {\n          return;\n        }\n        this.translate(vector.x, vector.y, y);\n      }\n    },\n    scale: function (x, y, prependInstead) {\n      if (typeof x === 'number') {\n        if (y === undefined) {\n          if (x === 1) {\n            return;\n          }\n          this.appendMatrix(Matrix3.scaling(x, x));\n        } else {\n          if (x === 1 && y === 1) {\n            return;\n          }\n          if (prependInstead) {\n            this.prependMatrix(Matrix3.scaling(x, y));\n          } else {\n            this.appendMatrix(Matrix3.scaling(x, y));\n          }\n        }\n      } else {\n        var vector = x;\n        this.scale(vector.x, vector.y, y);\n      }\n    },\n    rotate: function (angle, prependInstead) {\n      if (angle % (2 * Math.PI) === 0) {\n        return;\n      }\n      if (prependInstead) {\n        this.prependMatrix(Matrix3.rotation2(angle));\n      } else {\n        this.appendMatrix(Matrix3.rotation2(angle));\n      }\n    },\n    rotateAround: function (point, angle) {\n      var matrix = Matrix3.translation(-point.x, -point.y);\n      matrix = Matrix3.rotation2(angle).timesMatrix(matrix);\n      matrix = Matrix3.translation(point.x, point.y).timesMatrix(matrix);\n      this.prependMatrix(matrix);\n    },\n    getX: function () {\n      return this._transform.getMatrix().m02();\n    },\n    setX: function (x) {\n      sceneryAssert && sceneryAssert(typeof x === 'number');\n      this.translate(x - this.getX(), 0, true);\n      return this;\n    },\n    getY: function () {\n      return this._transform.getMatrix().m12();\n    },\n    setY: function (y) {\n      sceneryAssert && sceneryAssert(typeof y === 'number');\n      this.translate(0, y - this.getY(), true);\n      return this;\n    },\n    getScaleVector: function () {\n      return this._transform.getMatrix().getScaleVector();\n    },\n    setScaleMagnitude: function (a, b) {\n      var currentScale = this.getScaleVector();\n      if (typeof a === 'number') {\n        if (b === undefined) {\n          b = a;\n        }\n        this.appendMatrix(Matrix3.scaling(a / currentScale.x, b / currentScale.y));\n      } else {\n        this.appendMatrix(Matrix3.scaling(a.x / currentScale.x, a.y / currentScale.y));\n      }\n      return this;\n    },\n    getRotation: function () {\n      return this._transform.getMatrix().getRotation();\n    },\n    setRotation: function (rotation) {\n      sceneryAssert && sceneryAssert(typeof rotation === 'number');\n      this.appendMatrix(Matrix3.rotation2(rotation - this.getRotation()));\n      return this;\n    },\n    setTranslation: function (a, b) {\n      var m = this._transform.getMatrix();\n      var tx = m.m02();\n      var ty = m.m12();\n      var dx, dy;\n      if (typeof a === 'number') {\n        dx = a - tx;\n        dy = b - ty;\n      } else {\n        dx = a.x - tx;\n        dy = a.y - ty;\n      }\n      this.translate(dx, dy, true);\n      return this;\n    },\n    getTranslation: function () {\n      var matrix = this._transform.getMatrix();\n      return new Vector2(matrix.m02(), matrix.m12());\n    },\n    appendMatrix: function (matrix) {\n      this._transform.append(matrix);\n    },\n    prependMatrix: function (matrix) {\n      this._transform.prepend(matrix);\n    },\n    prependTranslation: function (x, y) {\n      this._transform.prependTranslation(x, y);\n    },\n    setMatrix: function (matrix) {\n      this._transform.set(matrix);\n    },\n    getMatrix: function () {\n      return this._transform.getMatrix();\n    },\n    setTransform: function (transform) {\n      sceneryAssert && sceneryAssert(transform.isFinite(), 'Transform should not have infinite/NaN values');\n      if (this._transform !== transform) {\n        this.beforeTransformChange();\n        this._transform.removeTransformListener(this._transformListener);\n        this._transform = transform;\n        this._transform.prependTransformListener(this._transformListener);\n        this.afterTransformChange();\n      }\n    },\n    getTransform: function () {\n      return this._transform;\n    },\n    resetTransform: function () {\n      this.setMatrix(Matrix3.IDENTITY);\n    },\n    beforeTransformChange: function () {\n      this.notifyBeforeSubtreeChange();\n    },\n    afterTransformChange: function () {\n      this.notifyTransformChange();\n      this.invalidateBounds();\n      this.invalidateSubtreePaint();\n    },\n    getLeft: function () {\n      return this.getBounds().minX;\n    },\n    setLeft: function (left) {\n      sceneryAssert && sceneryAssert(typeof left === 'number');\n      this.translate(left - this.getLeft(), 0, true);\n      return this;\n    },\n    getRight: function () {\n      return this.getBounds().maxX;\n    },\n    setRight: function (right) {\n      sceneryAssert && sceneryAssert(typeof right === 'number');\n      this.translate(right - this.getRight(), 0, true);\n      return this;\n    },\n    getCenter: function () {\n      return this.getBounds().getCenter();\n    },\n    setCenter: function (center) {\n      sceneryAssert && sceneryAssert(center instanceof Vector2);\n      this.translate(center.minus(this.getCenter()), true);\n      return this;\n    },\n    getCenterX: function () {\n      return this.getBounds().getCenterX();\n    },\n    setCenterX: function (x) {\n      sceneryAssert && sceneryAssert(typeof x === 'number');\n      this.translate(x - this.getCenterX(), 0, true);\n      return this;\n    },\n    getCenterY: function () {\n      return this.getBounds().getCenterY();\n    },\n    setCenterY: function (y) {\n      sceneryAssert && sceneryAssert(typeof y === 'number');\n      this.translate(0, y - this.getCenterY(), true);\n      return this;\n    },\n    getTop: function () {\n      return this.getBounds().minY;\n    },\n    setTop: function (top) {\n      sceneryAssert && sceneryAssert(typeof top === 'number');\n      this.translate(0, top - this.getTop(), true);\n      return this;\n    },\n    getBottom: function () {\n      return this.getBounds().maxY;\n    },\n    setBottom: function (bottom) {\n      sceneryAssert && sceneryAssert(typeof bottom === 'number');\n      this.translate(0, bottom - this.getBottom(), true);\n      return this;\n    },\n    getWidth: function () {\n      return this.getBounds().getWidth();\n    },\n    getHeight: function () {\n      return this.getBounds().getHeight();\n    },\n    getId: function () {\n      return this._id;\n    },\n    isVisible: function () {\n      return this._visible;\n    },\n    setVisible: function (visible) {\n      sceneryAssert && sceneryAssert(typeof visible === 'boolean');\n      if (visible !== this._visible) {\n        if (this._visible) {\n          this.notifyBeforeSubtreeChange();\n        }\n        this._visible = visible;\n        this.notifyVisibilityChange();\n      }\n      return this;\n    },\n    getOpacity: function () {\n      return this._opacity;\n    },\n    setOpacity: function (opacity) {\n      sceneryAssert && sceneryAssert(typeof opacity === 'number');\n      var clampedOpacity = clamp(opacity, 0, 1);\n      if (clampedOpacity !== this._opacity) {\n        this.notifyBeforeSubtreeChange();\n        this._opacity = clampedOpacity;\n        this.notifyOpacityChange();\n      }\n    },\n    isPickable: function () {\n      return this._pickable;\n    },\n    setPickable: function (pickable) {\n      sceneryAssert && sceneryAssert(typeof pickable === 'boolean');\n      if (this._pickable !== pickable) {\n        this._pickable = pickable;\n      }\n    },\n    setCursor: function (cursor) {\n      sceneryAssert && sceneryAssert(typeof cursor === 'string' || cursor === null);\n      this._cursor = cursor === 'auto' ? null : cursor;\n    },\n    getCursor: function () {\n      return this._cursor;\n    },\n    setMouseArea: function (shape) {\n      sceneryAssert && sceneryAssert(shape === null || shape instanceof Shape, 'mouseArea needs to be a kite.Shape, or null');\n      if (this._mouseArea !== shape) {\n        this._mouseArea = shape;\n        this.invalidateBounds();\n      }\n    },\n    getMouseArea: function () {\n      return this._mouseArea;\n    },\n    setTouchArea: function (shape) {\n      sceneryAssert && sceneryAssert(shape === null || shape instanceof Shape, 'touchArea needs to be a kite.Shape, or null');\n      if (this._touchArea !== shape) {\n        this._touchArea = shape;\n        this.invalidateBounds();\n      }\n    },\n    getTouchArea: function () {\n      return this._touchArea;\n    },\n    updateLayerType: function () {\n      if (this._renderer && this._rendererOptions) {\n        if (this._rendererOptions.cssTransform || this._rendererOptions.cssTranslation || this._rendererOptions.cssRotation || this._rendererOptions.cssScale) {\n          this._rendererOptions.baseNode = this;\n        } else if (this._rendererOptions.hasOwnProperty('baseNode')) {\n          delete this._rendererOptions.baseNode;\n        }\n        this._rendererLayerType = this._renderer.createLayerType(this._rendererOptions);\n      } else {\n        this._rendererLayerType = null;\n      }\n    },\n    getRendererLayerType: function () {\n      return this._rendererLayerType;\n    },\n    hasRendererLayerType: function () {\n      return !!this._rendererLayerType;\n    },\n    setRenderer: function (renderer) {\n      var newRenderer;\n      if (typeof renderer === 'string') {\n        sceneryAssert && sceneryAssert(scenery.Renderer[renderer], 'unknown renderer in setRenderer: ' + renderer);\n        newRenderer = scenery.Renderer[renderer];\n      } else if (renderer instanceof scenery.Renderer) {\n        newRenderer = renderer;\n      } else if (!renderer) {\n        newRenderer = null;\n      } else {\n        throw new Error('unrecognized type of renderer: ' + renderer);\n      }\n      if (newRenderer !== this._renderer) {\n        sceneryAssert && sceneryAssert(!this.isPainted() || !newRenderer || _.contains(this._supportedRenderers, newRenderer), 'renderer ' + newRenderer + ' not supported by ' + this.constructor.name);\n        this._renderer = newRenderer;\n        this.updateLayerType();\n        this.markLayerRefreshNeeded();\n      }\n    },\n    getRenderer: function () {\n      return this._renderer;\n    },\n    hasRenderer: function () {\n      return !!this._renderer;\n    },\n    setRendererOptions: function (options) {\n      this._rendererOptions = options;\n      this.updateLayerType();\n      this.markLayerRefreshNeeded();\n    },\n    getRendererOptions: function () {\n      return this._rendererOptions;\n    },\n    hasRendererOptions: function () {\n      return !!this._rendererOptions;\n    },\n    setLayerSplitBefore: function (split) {\n      sceneryAssert && sceneryAssert(typeof split === 'boolean');\n      if (this._layerSplitBefore !== split) {\n        this._layerSplitBefore = split;\n        this.markLayerRefreshNeeded();\n      }\n    },\n    isLayerSplitBefore: function () {\n      return this._layerSplitBefore;\n    },\n    setLayerSplitAfter: function (split) {\n      sceneryAssert && sceneryAssert(typeof split === 'boolean');\n      if (this._layerSplitAfter !== split) {\n        this._layerSplitAfter = split;\n        this.markLayerRefreshNeeded();\n      }\n    },\n    isLayerSplitAfter: function () {\n      return this._layerSplitAfter;\n    },\n    setLayerSplit: function (split) {\n      sceneryAssert && sceneryAssert(typeof split === 'boolean');\n      if (split !== this._layerSplitBefore || split !== this._layerSplitAfter) {\n        this._layerSplitBefore = split;\n        this._layerSplitAfter = split;\n        this.markLayerRefreshNeeded();\n      }\n    },\n    getUniqueTrail: function () {\n      var trail = new scenery.Trail();\n      var node = this;\n      while (node) {\n        trail.addAncestor(node);\n        sceneryAssert && sceneryAssert(node._parents.length <= 1);\n        node = node._parents[0];\n      }\n      return trail;\n    },\n    getConnectedNodes: function () {\n      var result = [];\n      var fresh = this._children.concat(this._parents).concat(this);\n      while (fresh.length) {\n        var node = fresh.pop();\n        if (!_.contains(result, node)) {\n          result.push(node);\n          fresh = fresh.concat(node._children, node._parents);\n        }\n      }\n      return result;\n    },\n    getTopologicallySortedNodes: function () {\n      var edges = {};\n      var s = [];\n      var l = [];\n      var n;\n      _.each(this.getConnectedNodes(), function (node) {\n        edges[node.id] = {};\n        _.each(node.children, function (m) {\n          edges[node.id][m.id] = true;\n        });\n        if (!node.parents.length) {\n          s.push(node);\n        }\n      });\n      function handleChild(m) {\n        delete edges[n.id][m.id];\n        if (_.every(edges, function (children) {\n            return !children[m.id];\n          })) {\n          s.push(m);\n        }\n      }\n      while (s.length) {\n        n = s.pop();\n        l.push(n);\n        _.each(n.children, handleChild);\n      }\n      sceneryAssert && sceneryAssert(_.every(edges, function (children) {\n        return _.every(children, function (final) {\n          return false;\n        });\n      }), 'circular reference check');\n      return l;\n    },\n    canAddChild: function (child) {\n      if (this === child || _.contains(this.children, child)) {\n        return false;\n      }\n      var edges = {};\n      var s = [];\n      var l = [];\n      var n;\n      _.each(this.getConnectedNodes().concat(child.getConnectedNodes()), function (node) {\n        edges[node.id] = {};\n        _.each(node.children, function (m) {\n          edges[node.id][m.id] = true;\n        });\n        if (!node.parents.length && node !== child) {\n          s.push(node);\n        }\n      });\n      edges[this.id][child.id] = true;\n      function handleChild(m) {\n        delete edges[n.id][m.id];\n        if (_.every(edges, function (children) {\n            return !children[m.id];\n          })) {\n          s.push(m);\n        }\n      }\n      while (s.length) {\n        n = s.pop();\n        l.push(n);\n        _.each(n.children, handleChild);\n        if (n === this) {\n          handleChild(child);\n        }\n      }\n      return _.every(edges, function (children) {\n        return _.every(children, function (final) {\n          return false;\n        });\n      });\n    },\n    debugText: function () {\n      var startPointer = new scenery.TrailPointer(new scenery.Trail(this), true);\n      var endPointer = new scenery.TrailPointer(new scenery.Trail(this), false);\n      var depth = 0;\n      startPointer.depthFirstUntil(endPointer, function (pointer) {\n        if (pointer.isBefore) {\n          var padding = new Array(depth * 2).join(' ');\n          console.log(padding + pointer.trail.lastNode().getId() + ' ' + pointer.trail.toString());\n        }\n        depth += pointer.isBefore ? 1 : -1;\n      }, false);\n    },\n    toCanvas: function (callback, x, y, width, height) {\n      var self = this;\n      var padding = 2;\n      var bounds = this.getBounds();\n      x = x !== undefined ? x : Math.ceil(padding - bounds.minX);\n      y = y !== undefined ? y : Math.ceil(padding - bounds.minY);\n      width = width !== undefined ? width : Math.ceil(x + bounds.getWidth() + padding);\n      height = height !== undefined ? height : Math.ceil(y + bounds.getHeight() + padding);\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var context = canvas.getContext('2d');\n      var $div = $(document.createElement('div'));\n      $div.width(width).height(height);\n      var scene = new scenery.Scene($div);\n      scene.addChild(self);\n      scene.x = x;\n      scene.y = y;\n      scene.updateScene();\n      scene.renderToCanvas(canvas, context, function () {\n        callback(canvas, x, y);\n        scene.removeChild(self);\n      });\n    },\n    toDataURL: function (callback, x, y, width, height) {\n      this.toCanvas(function (canvas, x, y) {\n        callback(canvas.toDataURL(), x, y);\n      }, x, y, width, height);\n    },\n    toImage: function (callback, x, y, width, height) {\n      this.toDataURL(function (url, x, y) {\n        var img = document.createElement('img');\n        img.onload = function () {\n          callback(img, x, y);\n          try {\n            delete img.onload;\n          } catch (e) {\n          }\n        };\n        img.src = url;\n      }, x, y, width, height);\n    },\n    toImageNodeAsynchronous: function (callback, x, y, width, height) {\n      this.toImage(function (image, x, y) {\n        callback(new scenery.Node({\n          children: [new scenery.Image(image, {\n              x: -x,\n              y: -y\n            })]\n        }));\n      }, x, y, width, height);\n    },\n    toCanvasNodeSynchronous: function (x, y, width, height) {\n      var result;\n      this.toCanvas(function (canvas, x, y) {\n        result = new scenery.Node({\n          children: [new scenery.Image(canvas, {\n              x: -x,\n              y: -y\n            })]\n        });\n      }, x, y, width, height);\n      sceneryAssert && sceneryAssert(result, 'toCanvasNodeSynchronous requires that the node can be rendered only using Canvas');\n      return result;\n    },\n    toDataURLNodeSynchronous: function (x, y, width, height) {\n      var result;\n      this.toDataURL(function (dataURL, x, y) {\n        result = new scenery.Node({\n          children: [new scenery.Image(dataURL, {\n              x: -x,\n              y: -y\n            })]\n        });\n      }, x, y, width, height);\n      sceneryAssert && sceneryAssert(result, 'toDataURLNodeSynchronous requires that the node can be rendered only using Canvas');\n      return result;\n    },\n    getInstances: function () {\n      return this._instances;\n    },\n    addInstance: function (instance) {\n      sceneryAssert && sceneryAssert(instance.getNode() === this, 'Must be an instance of this Node');\n      sceneryAssert && sceneryAssert(!_.find(this._instances, function (other) {\n        return instance.equals(other);\n      }), 'Cannot add duplicates of an instance to a Node');\n      this._instances.push(instance);\n      if (this._instances.length === 1) {\n        this.firstInstanceAdded();\n      }\n    },\n    firstInstanceAdded: function () {\n    },\n    getInstanceFromTrail: function (trail) {\n      var result;\n      var len = this._instances.length;\n      if (len === 1) {\n        result = this._instances[0];\n      } else {\n        var i = len;\n        while (i--) {\n          if (this._instances[i].trail.equals(trail)) {\n            result = this._instances[i];\n            break;\n          }\n        }\n      }\n      sceneryAssert && sceneryAssert(result, 'Could not find an instance for the trail ' + trail.toString());\n      sceneryAssert && sceneryAssert(result.trail.equals(trail), 'Instance has an incorrect Trail');\n      return result;\n    },\n    removeInstance: function (instance) {\n      var index = _.indexOf(this._instances, instance);\n      sceneryAssert && sceneryAssert(index !== -1, 'Cannot remove an Instance from a Node if it was not there');\n      this._instances.splice(index, 1);\n      if (this._instances.length === 0) {\n        this.lastInstanceRemoved();\n      }\n    },\n    lastInstanceRemoved: function () {\n    },\n    notifyVisibilityChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyVisibilityChange();\n      }\n    },\n    notifyOpacityChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyOpacityChange();\n      }\n    },\n    notifyBeforeSelfChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyBeforeSelfChange();\n      }\n    },\n    notifyBeforeSubtreeChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyBeforeSubtreeChange();\n      }\n    },\n    notifyDirtySelfPaint: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyDirtySelfPaint();\n      }\n    },\n    notifyDirtySubtreePaint: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyDirtySubtreePaint();\n      }\n    },\n    notifyTransformChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyTransformChange();\n      }\n    },\n    notifyBoundsAccuracyChange: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyBoundsAccuracyChange();\n      }\n    },\n    notifyStitch: function (match) {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].notifyStitch(match);\n      }\n    },\n    markForLayerRefresh: function () {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].markForLayerRefresh();\n      }\n    },\n    markForInsertion: function (child, index) {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].markForInsertion(child, index);\n      }\n    },\n    markForRemoval: function (child, index) {\n      var i = this._instances.length;\n      while (i--) {\n        this._instances[i].markForRemoval(child, index);\n      }\n    },\n    localToParentPoint: function (point) {\n      return this._transform.transformPosition2(point);\n    },\n    localToParentBounds: function (bounds) {\n      return this._transform.transformBounds2(bounds);\n    },\n    parentToLocalPoint: function (point) {\n      return this._transform.inversePosition2(point);\n    },\n    parentToLocalBounds: function (bounds) {\n      return this._transform.inverseBounds2(bounds);\n    },\n    transformBoundsFromLocalToParent: function (bounds) {\n      return bounds.transform(this._transform.getMatrix());\n    },\n    transformBoundsFromParentToLocal: function (bounds) {\n      return bounds.transform(this._transform.getInverse());\n    },\n    getLocalToGlobalMatrix: function () {\n      var node = this;\n      var matrices = [];\n      while (node) {\n        matrices.push(node._transform.getMatrix());\n        sceneryAssert && sceneryAssert(node._parents[1] === undefined, 'getLocalToGlobalMatrix unable to work for DAG');\n        node = node._parents[0];\n      }\n      var matrix = new Matrix3();\n      for (var i = matrices.length - 1; i >= 0; i--) {\n        matrix.multiplyMatrix(matrices[i]);\n      }\n      return matrix;\n    },\n    getUniqueTransform: function () {\n      return new Transform3(this.getLocalToGlobalMatrix());\n    },\n    getGlobalToLocalMatrix: function () {\n      return this.getLocalToGlobalMatrix().invert();\n    },\n    localToGlobalPoint: function (point) {\n      var node = this;\n      var resultPoint = point.copy();\n      while (node) {\n        node._transform.getMatrix().multiplyVector2(resultPoint);\n        sceneryAssert && sceneryAssert(node._parents[1] === undefined, 'localToGlobalPoint unable to work for DAG');\n        node = node._parents[0];\n      }\n      return resultPoint;\n    },\n    globalToLocalPoint: function (point) {\n      var node = this;\n      var transforms = [];\n      while (node) {\n        transforms.push(node._transform);\n        sceneryAssert && sceneryAssert(node._parents[1] === undefined, 'globalToLocalPoint unable to work for DAG');\n        node = node._parents[0];\n      }\n      var resultPoint = point.copy();\n      for (var i = transforms.length - 1; i >= 0; i--) {\n        transforms[i].getInverse().multiplyVector2(resultPoint);\n      }\n      return resultPoint;\n    },\n    localToGlobalBounds: function (bounds) {\n      return bounds.transformed(this.getLocalToGlobalMatrix());\n    },\n    globalToLocalBounds: function (bounds) {\n      return bounds.transformed(this.getGlobalToLocalMatrix());\n    },\n    parentToGlobalPoint: function (point) {\n      sceneryAssert && sceneryAssert(this.parents.length <= 1, 'parentToGlobalPoint unable to work for DAG');\n      return this.parents.length ? this.parents[0].localToGlobalPoint(point) : point;\n    },\n    parentToGlobalBounds: function (bounds) {\n      sceneryAssert && sceneryAssert(this.parents.length <= 1, 'parentToGlobalBounds unable to work for DAG');\n      return this.parents.length ? this.parents[0].localToGlobalBounds(bounds) : bounds;\n    },\n    globalToParentPoint: function (point) {\n      sceneryAssert && sceneryAssert(this.parents.length <= 1, 'globalToParentPoint unable to work for DAG');\n      return this.parents.length ? this.parents[0].globalToLocalPoint(point) : point;\n    },\n    globalToParentBounds: function (bounds) {\n      sceneryAssert && sceneryAssert(this.parents.length <= 1, 'globalToParentBounds unable to work for DAG');\n      return this.parents.length ? this.parents[0].globalToLocalBounds(bounds) : bounds;\n    },\n    getGlobalBounds: function () {\n      sceneryAssert && sceneryAssert(this.parents.length <= 1, 'globalBounds unable to work for DAG');\n      return this.parentToGlobalBounds(this.getBounds());\n    },\n    boundsOf: function (node) {\n      return this.globalToLocalBounds(node.getGlobalBounds());\n    },\n    boundsTo: function (node) {\n      return node.globalToLocalBounds(this.getGlobalBounds());\n    },\n    set layerSplit(value) {\n      this.setLayerSplit(value);\n    },\n    get layerSplit() {\n      throw new Error('You can\\'t get a layerSplit property, since it modifies two separate properties');\n    },\n    set layerSplitBefore(value) {\n      this.setLayerSplitBefore(value);\n    },\n    get layerSplitBefore() {\n      return this.isLayerSplitBefore();\n    },\n    set layerSplitAfter(value) {\n      this.setLayerSplitAfter(value);\n    },\n    get layerSplitAfter() {\n      return this.isLayerSplitAfter();\n    },\n    set renderer(value) {\n      this.setRenderer(value);\n    },\n    get renderer() {\n      return this.getRenderer();\n    },\n    set rendererOptions(value) {\n      this.setRendererOptions(value);\n    },\n    get rendererOptions() {\n      return this.getRendererOptions();\n    },\n    set cursor(value) {\n      this.setCursor(value);\n    },\n    get cursor() {\n      return this.getCursor();\n    },\n    set mouseArea(value) {\n      this.setMouseArea(value);\n    },\n    get mouseArea() {\n      return this.getMouseArea();\n    },\n    set touchArea(value) {\n      this.setTouchArea(value);\n    },\n    get touchArea() {\n      return this.getTouchArea();\n    },\n    set visible(value) {\n      this.setVisible(value);\n    },\n    get visible() {\n      return this.isVisible();\n    },\n    set opacity(value) {\n      this.setOpacity(value);\n    },\n    get opacity() {\n      return this.getOpacity();\n    },\n    set pickable(value) {\n      this.setPickable(value);\n    },\n    get pickable() {\n      return this.isPickable();\n    },\n    set transform(value) {\n      this.setTransform(value);\n    },\n    get transform() {\n      return this.getTransform();\n    },\n    set matrix(value) {\n      this.setMatrix(value);\n    },\n    get matrix() {\n      return this.getMatrix();\n    },\n    set translation(value) {\n      this.setTranslation(value);\n    },\n    get translation() {\n      return this.getTranslation();\n    },\n    set rotation(value) {\n      this.setRotation(value);\n    },\n    get rotation() {\n      return this.getRotation();\n    },\n    set x(value) {\n      this.setX(value);\n    },\n    get x() {\n      return this.getX();\n    },\n    set y(value) {\n      this.setY(value);\n    },\n    get y() {\n      return this.getY();\n    },\n    set left(value) {\n      this.setLeft(value);\n    },\n    get left() {\n      return this.getLeft();\n    },\n    set right(value) {\n      this.setRight(value);\n    },\n    get right() {\n      return this.getRight();\n    },\n    set top(value) {\n      this.setTop(value);\n    },\n    get top() {\n      return this.getTop();\n    },\n    set bottom(value) {\n      this.setBottom(value);\n    },\n    get bottom() {\n      return this.getBottom();\n    },\n    set center(value) {\n      this.setCenter(value);\n    },\n    get center() {\n      return this.getCenter();\n    },\n    set centerX(value) {\n      this.setCenterX(value);\n    },\n    get centerX() {\n      return this.getCenterX();\n    },\n    set centerY(value) {\n      this.setCenterY(value);\n    },\n    get centerY() {\n      return this.getCenterY();\n    },\n    set children(value) {\n      this.setChildren(value);\n    },\n    get children() {\n      return this.getChildren();\n    },\n    get parents() {\n      return this.getParents();\n    },\n    get width() {\n      return this.getWidth();\n    },\n    get height() {\n      return this.getHeight();\n    },\n    get bounds() {\n      return this.getBounds();\n    },\n    get selfBounds() {\n      return this.getSelfBounds();\n    },\n    get childBounds() {\n      return this.getChildBounds();\n    },\n    get globalBounds() {\n      return this.getGlobalBounds();\n    },\n    get visibleBounds() {\n      return this.getVisibleBounds();\n    },\n    get id() {\n      return this.getId();\n    },\n    get instances() {\n      return this.getInstances();\n    },\n    mutate: function (options) {\n      if (!options) {\n        return this;\n      }\n      var node = this;\n      _.each(this._mutatorKeys, function (key) {\n        if (options[key] !== undefined) {\n          var descriptor = Object.getOwnPropertyDescriptor(Node.prototype, key);\n          if (descriptor && typeof descriptor.value === 'function') {\n            node[key](options[key]);\n          } else {\n            node[key] = options[key];\n          }\n        }\n      });\n      return this;\n    },\n    toString: function (spaces, includeChildren) {\n      spaces = spaces || '';\n      var props = this.getPropString(spaces + '  ', includeChildren === undefined ? true : includeChildren);\n      return spaces + this.getBasicConstructor(props ? '\\n' + props + '\\n' + spaces : '');\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Node( {' + propLines + '} )';\n    },\n    getPropString: function (spaces, includeChildren) {\n      var self = this;\n      var result = '';\n      function addProp(key, value, nowrap) {\n        if (result) {\n          result += ',\\n';\n        }\n        if (!nowrap && typeof value === 'string') {\n          result += spaces + key + ': \\'' + value + '\\'';\n        } else {\n          result += spaces + key + ': ' + value;\n        }\n      }\n      if (this._children.length && includeChildren) {\n        var childString = '';\n        _.each(this._children, function (child) {\n          if (childString) {\n            childString += ',\\n';\n          }\n          childString += child.toString(spaces + '  ');\n        });\n        addProp('children', '[\\n' + childString + '\\n' + spaces + ']', true);\n      }\n      if (this.cursor) {\n        addProp('cursor', this.cursor);\n      }\n      if (!this.visible) {\n        addProp('visible', this.visible);\n      }\n      if (!this.pickable) {\n        addProp('pickable', this.pickable);\n      }\n      if (this.opacity !== 1) {\n        addProp('opacity', this.opacity);\n      }\n      if (!this.transform.isIdentity()) {\n        var m = this.transform.getMatrix();\n        addProp('matrix', 'new dot.Matrix3( ' + m.m00() + ', ' + m.m01() + ', ' + m.m02() + ', ' + m.m10() + ', ' + m.m11() + ', ' + m.m12() + ', ' + m.m20() + ', ' + m.m21() + ', ' + m.m22() + ' )', true);\n      }\n      if (this.renderer) {\n        addProp('renderer', this.renderer.name);\n        if (this.rendererOptions) {\n        }\n      }\n      if (this._layerSplitBefore) {\n        addProp('layerSplitBefore', true);\n      }\n      if (this._layerSplitAfter) {\n        addProp('layerSplitAfter', true);\n      }\n      return result;\n    }\n  };\n  Node.prototype._mutatorKeys = [\n    'children',\n    'cursor',\n    'visible',\n    'pickable',\n    'opacity',\n    'matrix',\n    'translation',\n    'x',\n    'y',\n    'rotation',\n    'scale',\n    'left',\n    'right',\n    'top',\n    'bottom',\n    'center',\n    'centerX',\n    'centerY',\n    'renderer',\n    'rendererOptions',\n    'layerSplit',\n    'layerSplitBefore',\n    'layerSplitAfter',\n    'mouseArea',\n    'touchArea'\n  ];\n  Node.prototype._supportedRenderers = [];\n  Node.prototype.layerStrategy = LayerStrategy;\n  NodeEvents(Node);\n  return Node;\n});","\ndefine('SCENERY/util/Trail',['require','DOT/Matrix3','DOT/Transform3','SCENERY/scenery','SCENERY/nodes/Node'],function (require) {\n  'use strict';\n  var Matrix3 = require('DOT/Matrix3');\n  var Transform3 = require('DOT/Transform3');\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/nodes/Node');\n  scenery.Trail = function Trail(nodes) {\n    if (sceneryAssert) {\n      this.immutable = undefined;\n    }\n    if (nodes instanceof Trail) {\n      var otherTrail = nodes;\n      this.nodes = otherTrail.nodes.slice(0);\n      this.length = otherTrail.length;\n      this.uniqueId = otherTrail.uniqueId;\n      this.indices = otherTrail.indices.slice(0);\n      return;\n    }\n    this.nodes = [];\n    this.length = 0;\n    this.uniqueId = '';\n    this.indices = [];\n    var trail = this;\n    if (nodes) {\n      if (nodes instanceof scenery.Node) {\n        var node = nodes;\n        trail.addDescendant(node);\n      } else {\n        var len = nodes.length;\n        for (var i = 0; i < len; i++) {\n          trail.addDescendant(nodes[i]);\n        }\n      }\n    }\n    phetAllocation && phetAllocation('Trail');\n  };\n  var Trail = scenery.Trail;\n  Trail.prototype = {\n    constructor: Trail,\n    copy: function () {\n      return new Trail(this);\n    },\n    isPainted: function () {\n      return this.lastNode().isPainted();\n    },\n    isVisible: function () {\n      var i = this.nodes.length;\n      while (i--) {\n        if (!this.nodes[i].isVisible()) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getOpacity: function () {\n      var opacity = 1;\n      var i = this.nodes.length;\n      while (i--) {\n        opacity *= this.nodes[i].getOpacity();\n      }\n      return opacity;\n    },\n    get: function (index) {\n      if (index >= 0) {\n        return this.nodes[index];\n      } else {\n        return this.nodes[this.nodes.length + index];\n      }\n    },\n    slice: function (startIndex, endIndex) {\n      return new Trail(this.nodes.slice(startIndex, endIndex));\n    },\n    subtrailTo: function (node, excludeNode) {\n      return this.slice(0, _.indexOf(this.nodes, node) + (excludeNode ? 0 : 1));\n    },\n    isEmpty: function () {\n      return this.nodes.length === 0;\n    },\n    getInstance: function () {\n      return this.lastNode().getInstanceFromTrail(this);\n    },\n    getMatrix: function () {\n      var matrix = new Matrix3();\n      var nodes = this.nodes;\n      var length = nodes.length;\n      for (var i = 0; i < length; i++) {\n        matrix.multiplyMatrix(nodes[i]._transform.getMatrix());\n      }\n      return matrix;\n    },\n    getParentMatrix: function () {\n      var matrix = new Matrix3();\n      var nodes = this.nodes;\n      var length = nodes.length;\n      for (var i = 0; i < length - 1; i++) {\n        matrix.multiplyMatrix(nodes[i]._transform.getMatrix());\n      }\n      return matrix;\n    },\n    getTransform: function () {\n      return new Transform3(this.getMatrix());\n    },\n    getParentTransform: function () {\n      return new Transform3(this.getParentMatrix());\n    },\n    addAncestor: function (node, index) {\n      sceneryAssert && sceneryAssert(!this.immutable, 'cannot modify an immutable Trail with addAncestor');\n      sceneryAssert && sceneryAssert(node, 'cannot add falsy value to a Trail');\n      if (this.nodes.length) {\n        var oldRoot = this.nodes[0];\n        this.indices.unshift(index === undefined ? _.indexOf(node._children, oldRoot) : index);\n      }\n      this.nodes.unshift(node);\n      this.length++;\n      this.uniqueId = this.uniqueId ? node._id + '-' + this.uniqueId : node._id + '';\n      return this;\n    },\n    removeAncestor: function () {\n      sceneryAssert && sceneryAssert(!this.immutable, 'cannot modify an immutable Trail with removeAncestor');\n      sceneryAssert && sceneryAssert(this.length > 0, 'cannot remove a Node from an empty trail');\n      this.nodes.shift();\n      if (this.indices.length) {\n        this.indices.shift();\n      }\n      this.length--;\n      this.updateUniqueId();\n      return this;\n    },\n    addDescendant: function (node, index) {\n      sceneryAssert && sceneryAssert(!this.immutable, 'cannot modify an immutable Trail with addDescendant');\n      sceneryAssert && sceneryAssert(node, 'cannot add falsy value to a Trail');\n      if (this.nodes.length) {\n        var parent = this.lastNode();\n        this.indices.push(index === undefined ? _.indexOf(parent._children, node) : index);\n      }\n      this.nodes.push(node);\n      this.length++;\n      this.uniqueId = this.uniqueId ? this.uniqueId + '-' + node._id : node._id + '';\n      return this;\n    },\n    removeDescendant: function () {\n      sceneryAssert && sceneryAssert(!this.immutable, 'cannot modify an immutable Trail with removeDescendant');\n      sceneryAssert && sceneryAssert(this.length > 0, 'cannot remove a Node from an empty trail');\n      this.nodes.pop();\n      if (this.indices.length) {\n        this.indices.pop();\n      }\n      this.length--;\n      this.updateUniqueId();\n      return this;\n    },\n    reindex: function () {\n      var length = this.length;\n      for (var i = 1; i < length; i++) {\n        var currentIndex = this.indices[i - 1];\n        var baseNode = this.nodes[i - 1];\n        if (baseNode._children[currentIndex] !== this.nodes[i]) {\n          this.indices[i - 1] = _.indexOf(baseNode._children, this.nodes[i]);\n        }\n      }\n    },\n    setImmutable: function () {\n      if (sceneryAssert) {\n        sceneryAssert(this.immutable !== false, 'A trail cannot be made immutable after being flagged as mutable');\n        this.immutable = true;\n      }\n      return this;\n    },\n    setMutable: function () {\n      if (sceneryAssert) {\n        sceneryAssert(this.immutable !== true, 'A trail cannot be made mutable after being flagged as immutable');\n        this.immutable = false;\n      }\n      return this;\n    },\n    areIndicesValid: function () {\n      for (var i = 1; i < this.length; i++) {\n        var currentIndex = this.indices[i - 1];\n        if (this.nodes[i - 1]._children[currentIndex] !== this.nodes[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    equals: function (other) {\n      if (this.length !== other.length) {\n        return false;\n      }\n      for (var i = 0; i < this.nodes.length; i++) {\n        if (this.nodes[i] !== other.nodes[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    upToNode: function (node) {\n      var nodeIndex = _.indexOf(this.nodes, node);\n      sceneryAssert && sceneryAssert(nodeIndex >= 0, 'Trail does not contain the node');\n      return this.slice(0, _.indexOf(this.nodes, node) + 1);\n    },\n    isExtensionOf: function (other, allowSameTrail) {\n      sceneryAssertExtra && sceneryAssertExtra(this.areIndicesValid(), 'Trail.compare this.areIndicesValid() failed');\n      sceneryAssertExtra && sceneryAssertExtra(other.areIndicesValid(), 'Trail.compare other.areIndicesValid() failed');\n      if (this.length <= other.length - (allowSameTrail ? 1 : 0)) {\n        return false;\n      }\n      for (var i = 0; i < other.nodes.length; i++) {\n        if (this.nodes[i] !== other.nodes[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    nodeFromTop: function (offset) {\n      return this.nodes[this.length - 1 - offset];\n    },\n    lastNode: function () {\n      return this.nodeFromTop(0);\n    },\n    rootNode: function () {\n      return this.nodes[0];\n    },\n    previous: function () {\n      if (this.nodes.length <= 1) {\n        return null;\n      }\n      var top = this.nodeFromTop(0);\n      var parent = this.nodeFromTop(1);\n      var parentIndex = _.indexOf(parent._children, top);\n      sceneryAssert && sceneryAssert(parentIndex !== -1);\n      var arr = this.nodes.slice(0, this.nodes.length - 1);\n      if (parentIndex === 0) {\n        return new Trail(arr);\n      } else {\n        arr.push(parent._children[parentIndex - 1]);\n        while (arr[arr.length - 1]._children.length !== 0) {\n          var last = arr[arr.length - 1];\n          arr.push(last._children[last._children.length - 1]);\n        }\n        return new Trail(arr);\n      }\n    },\n    previousPainted: function () {\n      var result = this.previous();\n      while (result && !result.isPainted()) {\n        result = result.previous();\n      }\n      return result;\n    },\n    next: function () {\n      var arr = this.nodes.slice(0);\n      var top = this.nodeFromTop(0);\n      if (top._children.length > 0) {\n        arr.push(top._children[0]);\n        return new Trail(arr);\n      } else {\n        var depth = this.nodes.length - 1;\n        while (depth > 0) {\n          var node = this.nodes[depth];\n          var parent = this.nodes[depth - 1];\n          arr.pop();\n          var index = _.indexOf(parent._children, node);\n          if (index !== parent._children.length - 1) {\n            arr.push(parent._children[index + 1]);\n            return new Trail(arr);\n          } else {\n            depth--;\n          }\n        }\n        return null;\n      }\n    },\n    nextPainted: function () {\n      var result = this.next();\n      while (result && !result.isPainted()) {\n        result = result.next();\n      }\n      return result;\n    },\n    eachTrailUnder: function (callback) {\n      new scenery.TrailPointer(this, true).eachTrailBetween(new scenery.TrailPointer(this, false), callback);\n    },\n    compare: function (other) {\n      sceneryAssert && sceneryAssert(!this.isEmpty(), 'cannot compare with an empty trail');\n      sceneryAssert && sceneryAssert(!other.isEmpty(), 'cannot compare with an empty trail');\n      sceneryAssert && sceneryAssert(this.nodes[0] === other.nodes[0], 'for Trail comparison, trails must have the same root node');\n      sceneryAssertExtra && sceneryAssertExtra(this.areIndicesValid(), 'Trail.compare this.areIndicesValid() failed on ' + this.toString());\n      sceneryAssertExtra && sceneryAssertExtra(other.areIndicesValid(), 'Trail.compare other.areIndicesValid() failed on ' + other.toString());\n      var minNodeIndex = Math.min(this.indices.length, other.indices.length);\n      for (var i = 0; i < minNodeIndex; i++) {\n        if (this.indices[i] !== other.indices[i]) {\n          if (this.indices[i] < other.indices[i]) {\n            return -1;\n          } else {\n            return 1;\n          }\n        }\n      }\n      if (this.nodes.length < other.nodes.length) {\n        return -1;\n      } else if (this.nodes.length > other.nodes.length) {\n        return 1;\n      } else {\n        return 0;\n      }\n    },\n    isBefore: function (other) {\n      return this.compare(other) === -1;\n    },\n    isAfter: function (other) {\n      return this.compare(other) === 1;\n    },\n    localToGlobalPoint: function (point) {\n      return this.getMatrix().timesVector2(point);\n    },\n    localToGlobalBounds: function (bounds) {\n      return bounds.transformed(this.getMatrix());\n    },\n    globalToLocalPoint: function (point) {\n      return this.getTransform().inversePosition2(point);\n    },\n    globalToLocalBounds: function (bounds) {\n      return this.getTransform().inverseBounds2(bounds);\n    },\n    parentToGlobalPoint: function (point) {\n      return this.getParentMatrix().timesVector2(point);\n    },\n    parentToGlobalBounds: function (bounds) {\n      return bounds.transformed(this.getParentMatrix());\n    },\n    globalToParentPoint: function (point) {\n      return this.getParentTransform().inversePosition2(point);\n    },\n    globalToParentBounds: function (bounds) {\n      return this.getParentTransform().inverseBounds2(bounds);\n    },\n    updateUniqueId: function () {\n      var result = '';\n      var len = this.nodes.length;\n      if (len > 0) {\n        result += this.nodes[0]._id;\n      }\n      for (var i = 1; i < len; i++) {\n        result += '-' + this.nodes[i]._id;\n      }\n      this.uniqueId = result;\n    },\n    getUniqueId: function () {\n      if (sceneryAssert) {\n        var oldUniqueId = this.uniqueId;\n        this.updateUniqueId();\n        sceneryAssert(oldUniqueId === this.uniqueId);\n      }\n      return this.uniqueId;\n    },\n    toString: function () {\n      this.reindex();\n      if (!this.length) {\n        return 'Empty Trail';\n      }\n      return '[Trail ' + this.indices.join('.') + ' ' + this.getUniqueId() + ']';\n    }\n  };\n  Trail.eachPaintedTrailBetween = function (a, b, callback, excludeEndTrails, scene) {\n    Trail.eachTrailBetween(a, b, function (trail) {\n      if (trail && trail.isPainted()) {\n        callback(trail);\n      }\n    }, excludeEndTrails, scene);\n  };\n  Trail.eachTrailBetween = function (a, b, callback, excludeEndTrails, scene) {\n    var aPointer = a ? new scenery.TrailPointer(a.copy(), true) : new scenery.TrailPointer(new scenery.Trail(scene), true);\n    var bPointer = b ? new scenery.TrailPointer(b.copy(), true) : new scenery.TrailPointer(new scenery.Trail(scene), false);\n    if (excludeEndTrails) {\n      aPointer.nestedForwards();\n      bPointer.nestedBackwards();\n      if (aPointer.compareNested(bPointer) === 1) {\n        return;\n      }\n    }\n    aPointer.depthFirstUntil(bPointer, function (pointer) {\n      if (pointer.isBefore) {\n        callback(pointer.trail);\n      }\n    }, false);\n  };\n  return Trail;\n});","\ndefine('SCENERY/input/DownUpListener',['require','SCENERY/scenery','SCENERY/util/Trail'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  scenery.DownUpListener = function DownUpListener(options) {\n    var handler = this;\n    this.options = _.extend({ mouseButton: 0 }, options);\n    this.isDown = false;\n    this.downCurrentTarget = null;\n    this.downTrail = null;\n    this.pointer = null;\n    this.downListener = {\n      up: function (event) {\n        sceneryAssert && sceneryAssert(event.pointer === handler.pointer);\n        if (!event.pointer.isMouse || event.domEvent.button === handler.options.mouseButton) {\n          handler.buttonUp(event);\n        }\n      },\n      cancel: function (event) {\n        sceneryAssert && sceneryAssert(event.pointer === handler.pointer);\n        handler.buttonUp(event);\n      }\n    };\n  };\n  var DownUpListener = scenery.DownUpListener;\n  DownUpListener.prototype = {\n    constructor: DownUpListener,\n    buttonDown: function (event) {\n      if (this.isDown) {\n        return;\n      }\n      if (event.pointer.isMouse && event.domEvent.button !== this.options.mouseButton) {\n        return;\n      }\n      event.pointer.addInputListener(this.downListener);\n      this.isDown = true;\n      this.downCurrentTarget = event.currentTarget;\n      this.downTrail = event.trail.subtrailTo(event.currentTarget, false);\n      this.pointer = event.pointer;\n      if (this.options.down) {\n        this.options.down(event, this.downTrail);\n      }\n    },\n    buttonUp: function (event) {\n      this.isDown = false;\n      this.pointer.removeInputListener(this.downListener);\n      var currentTargetSave = event.currentTarget;\n      event.currentTarget = this.downCurrentTarget;\n      if (this.options.upInside || this.options.upOutside) {\n        var scene = this.downTrail.rootNode();\n        var trailUnderPointer = event.trail;\n        var isInside = trailUnderPointer.isExtensionOf(this.downTrail, true);\n        if (isInside && this.options.upInside) {\n          this.options.upInside(event, this.downTrail);\n        } else if (!isInside && this.options.upOutside) {\n          this.options.upOutside(event, this.downTrail);\n        }\n      }\n      if (this.options.up) {\n        this.options.up(event, this.downTrail);\n      }\n      event.currentTarget = currentTargetSave;\n    },\n    down: function (event) {\n      this.buttonDown(event);\n    }\n  };\n  return DownUpListener;\n});","\ndefine('SCENERY/input/ButtonListener',['require','SCENERY/scenery','SCENERY/util/Trail','PHET_CORE/inherit','SCENERY/input/DownUpListener'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  var inherit = require('PHET_CORE/inherit');\n  var DownUpListener = require('SCENERY/input/DownUpListener');\n  scenery.ButtonListener = function ButtonListener(options) {\n    this.buttonState = 'up';\n    this._overCount = 0;\n    this._buttonOptions = options;\n    var buttonListener = this;\n    DownUpListener.call(this, {\n      mouseButton: options.mouseButton || 0,\n      down: function (event, trail) {\n        buttonListener.setButtonState(event, 'down');\n      },\n      up: function (event, trail) {\n        buttonListener.setButtonState(event, buttonListener._overCount > 0 ? 'over' : 'up');\n      }\n    });\n  };\n  var ButtonListener = scenery.ButtonListener;\n  inherit(DownUpListener, ButtonListener, {\n    setButtonState: function (event, state) {\n      if (state !== this.buttonState) {\n        var oldState = this.buttonState;\n        this.buttonState = state;\n        if (this._buttonOptions[state]) {\n          this._buttonOptions[state](event, oldState);\n        }\n        if (this._buttonOptions.fire && this._overCount > 0 && (this._buttonOptions.fireOnDown ? state === 'down' : oldState === 'down')) {\n          this._buttonOptions.fire(event);\n        }\n      }\n    },\n    enter: function (event) {\n      this._overCount++;\n      if (this._overCount === 1) {\n        this.setButtonState(event, this.isDown ? 'down' : 'over');\n      }\n    },\n    exit: function (event) {\n      sceneryAssert && sceneryAssert(this._overCount > 0, 'Exit events not matched by an enter');\n      this._overCount--;\n      if (this._overCount === 0) {\n        this.setButtonState(event, this.isDown ? 'out' : 'up');\n      }\n    }\n  });\n  ButtonListener.TEST_LISTENER = new ButtonListener({\n    up: function (event, oldState) {\n      console.log('ButtonListener.up oldState=' + oldState);\n    },\n    over: function (event, oldState) {\n      console.log('ButtonListener.over oldState=' + oldState);\n    },\n    down: function (event, oldState) {\n      console.log('ButtonListener.down oldState=' + oldState);\n    },\n    out: function (event, oldState) {\n      console.log('ButtonListener.out oldState=' + oldState);\n    },\n    fire: function (event) {\n      console.log('ButtonListener.fire');\n    }\n  });\n  return ButtonListener;\n});","\ndefine('SCENERY/input/Event',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.Event = function Event(args) {\n    sceneryAssert && sceneryAssert(args.trail && args.type && args.pointer && args.target, 'Missing required scenery.Event argument');\n    this.handled = false;\n    this.aborted = false;\n    this.trail = args.trail;\n    this.type = args.type;\n    this.pointer = args.pointer;\n    this.domEvent = args.domEvent;\n    this.currentTarget = args.currentTarget;\n    this.target = args.target;\n  };\n  var Event = scenery.Event;\n  Event.prototype = {\n    constructor: Event,\n    handle: function () {\n      this.handled = true;\n    },\n    abort: function () {\n      this.handled = true;\n      this.aborted = true;\n    }\n  };\n  return Event;\n});","\ndefine('SCENERY/input/Pointer',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.Pointer = function Pointer() {\n    this.listeners = [];\n    phetAllocation && phetAllocation('Pointer');\n  };\n  var Pointer = scenery.Pointer;\n  Pointer.prototype = {\n    constructor: Pointer,\n    addInputListener: function (listener) {\n      sceneryAssert && sceneryAssert(!_.contains(this.listeners, listener));\n      this.listeners.push(listener);\n    },\n    removeInputListener: function (listener) {\n      var index = _.indexOf(this.listeners, listener);\n      sceneryAssert && sceneryAssert(index !== -1);\n      this.listeners.splice(index, 1);\n    }\n  };\n  return Pointer;\n});","\ndefine('SCENERY/input/Mouse',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/input/Pointer'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Pointer = require('SCENERY/input/Pointer');\n  scenery.Mouse = function Mouse() {\n    Pointer.call(this);\n    this.point = null;\n    this.leftDown = false;\n    this.middleDown = false;\n    this.rightDown = false;\n    this.isMouse = true;\n    this.trail = null;\n    this.type = 'mouse';\n  };\n  var Mouse = scenery.Mouse;\n  inherit(Pointer, Mouse, {\n    down: function (point, event) {\n      this.point = point;\n      switch (event.button) {\n      case 0:\n        this.leftDown = true;\n        break;\n      case 1:\n        this.middleDown = true;\n        break;\n      case 2:\n        this.rightDown = true;\n        break;\n      }\n    },\n    up: function (point, event) {\n      this.point = point;\n      switch (event.button) {\n      case 0:\n        this.leftDown = false;\n        break;\n      case 1:\n        this.middleDown = false;\n        break;\n      case 2:\n        this.rightDown = false;\n        break;\n      }\n    },\n    move: function (point, event) {\n      this.point = point;\n    },\n    over: function (point, event) {\n      this.point = point;\n    },\n    out: function (point, event) {\n      this.point = null;\n    },\n    toString: function () {\n      return 'Mouse';\n    }\n  });\n  return Mouse;\n});","\ndefine('SCENERY/input/Touch',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/input/Pointer'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Pointer = require('SCENERY/input/Pointer');\n  scenery.Touch = function Touch(id, point, event) {\n    Pointer.call(this);\n    this.id = id;\n    this.point = point;\n    this.isTouch = true;\n    this.trail = null;\n    this.type = 'touch';\n  };\n  var Touch = scenery.Touch;\n  inherit(Pointer, Touch, {\n    move: function (point, event) {\n      this.point = point;\n    },\n    end: function (point, event) {\n      this.point = point;\n    },\n    cancel: function (point, event) {\n      this.point = point;\n    },\n    toString: function () {\n      return 'Touch#' + this.id;\n    }\n  });\n  return Touch;\n});","\ndefine('SCENERY/input/Pen',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/input/Pointer'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Pointer = require('SCENERY/input/Pointer');\n  scenery.Pen = function Pen(id, point, event) {\n    Pointer.call(this);\n    this.id = id;\n    this.point = point;\n    this.isPen = true;\n    this.trail = null;\n    this.type = 'pen';\n  };\n  var Pen = scenery.Pen;\n  inherit(Pointer, Pen, {\n    move: function (point, event) {\n      this.point = point;\n    },\n    end: function (point, event) {\n      this.point = point;\n    },\n    cancel: function (point, event) {\n      this.point = point;\n    },\n    toString: function () {\n      return 'Pen#' + this.id;\n    }\n  });\n  return Pen;\n});","\ndefine('SCENERY/input/Key',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/input/Pointer'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Pointer = require('SCENERY/input/Pointer');\n  scenery.Key = function Key(event) {\n    Pointer.call(this);\n    this.event = event;\n    this.isKey = true;\n    this.trail = null;\n    this.type = 'key';\n  };\n  var Key = scenery.Key;\n  inherit(Pointer, Key, {});\n  return Key;\n});","\ndefine('SCENERY/input/Input',['require','SCENERY/scenery','SCENERY/util/Trail','SCENERY/input/Mouse','SCENERY/input/Touch','SCENERY/input/Pen','SCENERY/input/Key','SCENERY/input/Event'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  require('SCENERY/input/Mouse');\n  require('SCENERY/input/Touch');\n  require('SCENERY/input/Pen');\n  require('SCENERY/input/Key');\n  require('SCENERY/input/Event');\n  scenery.Input = function Input(scene, listenerTarget, batchDOMEvents) {\n    this.scene = scene;\n    this.listenerTarget = listenerTarget;\n    this.batchDOMEvents = batchDOMEvents;\n    this.batchedCallbacks = [];\n    this.mouse = new scenery.Mouse();\n    this.pointers = [this.mouse];\n    this.listenerReferences = [];\n    this.eventLog = [];\n    this.logEvents = false;\n  };\n  var Input = scenery.Input;\n  Input.prototype = {\n    constructor: Input,\n    addPointer: function (pointer) {\n      this.pointers.push(pointer);\n    },\n    removePointer: function (pointer) {\n      for (var i = this.pointers.length - 1; i >= 0; i--) {\n        if (this.pointers[i] === pointer) {\n          this.pointers.splice(i, 1);\n        }\n      }\n    },\n    findTouchById: function (id) {\n      var i = this.pointers.length;\n      while (i--) {\n        var pointer = this.pointers[i];\n        if (pointer.id === id) {\n          return pointer;\n        }\n      }\n      return undefined;\n    },\n    findKeyByEvent: function (event) {\n      sceneryAssert && sceneryAssert(event.keyCode && event.charCode, 'Assumes the KeyboardEvent has keyCode and charCode properties');\n      var result = _.find(this.pointers, function (pointer) {\n          return pointer.keyCode === event.keyCode && pointer.charCode === event.charCode;\n        });\n      return result;\n    },\n    mouseDown: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseDown(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.mouse.down(point, event);\n      this.downEvent(this.mouse, event);\n    },\n    mouseUp: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseUp(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.mouse.up(point, event);\n      this.upEvent(this.mouse, event);\n    },\n    mouseUpImmediate: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseUpImmediate(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.upImmediateEvent(this.mouse, event);\n    },\n    mouseMove: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseMove(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.mouse.move(point, event);\n      this.moveEvent(this.mouse, event);\n    },\n    mouseOver: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseOver(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.mouse.over(point, event);\n    },\n    mouseOut: function (point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('mouseOut(' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      this.mouse.out(point, event);\n    },\n    keyDown: function (event) {\n      if (this.logEvents) {\n        this.eventLog.push('keyDown(' + Input.serializeDomEvent(event) + ');');\n      }\n      var key = new scenery.Key(event);\n      this.addPointer(key);\n      var trail = this.scene.getTrailFromKeyboardFocus();\n      this.dispatchEvent(trail, 'keyDown', key, event, true);\n    },\n    keyUp: function (event) {\n      if (this.logEvents) {\n        this.eventLog.push('keyUp(' + Input.serializeDomEvent(event) + ');');\n      }\n      var key = this.findKeyByEvent(event);\n      if (key) {\n        this.removePointer(key);\n        var trail = this.scene.getTrailFromKeyboardFocus();\n        this.dispatchEvent(trail, 'keyUp', key, event, true);\n      }\n    },\n    keyPress: function (event) {\n      if (this.logEvents) {\n        this.eventLog.push('keyPress(' + Input.serializeDomEvent(event) + ');');\n      }\n    },\n    touchStart: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('touchStart(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var touch = new scenery.Touch(id, point, event);\n      this.addPointer(touch);\n      this.downEvent(touch, event);\n    },\n    touchEnd: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('touchEnd(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var touch = this.findTouchById(id);\n      if (touch) {\n        touch.end(point, event);\n        this.removePointer(touch);\n        this.upEvent(touch, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Touch not found for touchEnd: ' + id);\n      }\n    },\n    touchEndImmediate: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('touchEndImmediate(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var touch = this.findTouchById(id);\n      if (touch) {\n        this.upImmediateEvent(touch, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Touch not found for touchEndImmediate: ' + id);\n      }\n    },\n    touchMove: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('touchMove(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var touch = this.findTouchById(id);\n      if (touch) {\n        touch.move(point, event);\n        this.moveEvent(touch, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Touch not found for touchMove: ' + id);\n      }\n    },\n    touchCancel: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('touchCancel(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var touch = this.findTouchById(id);\n      if (touch) {\n        touch.cancel(point, event);\n        this.removePointer(touch);\n        this.cancelEvent(touch, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Touch not found for touchCancel: ' + id);\n      }\n    },\n    penStart: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('penStart(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var pen = new scenery.Pen(id, point, event);\n      this.addPointer(pen);\n      this.downEvent(pen, event);\n    },\n    penEnd: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('penEnd(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var pen = this.findTouchById(id);\n      if (pen) {\n        pen.end(point, event);\n        this.removePointer(pen);\n        this.upEvent(pen, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Pen not found for penEnd: ' + id);\n      }\n    },\n    penEndImmediate: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('penEndImmediate(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var pen = this.findTouchById(id);\n      if (pen) {\n        this.upImmediateEvent(pen, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Pen not found for penEndImmediate: ' + id);\n      }\n    },\n    penMove: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('penMove(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var pen = this.findTouchById(id);\n      if (pen) {\n        pen.move(point, event);\n        this.moveEvent(pen, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Pen not found for penMove: ' + id);\n      }\n    },\n    penCancel: function (id, point, event) {\n      if (this.logEvents) {\n        this.eventLog.push('penCancel(\\'' + id + '\\',' + Input.serializeVector2(point) + ',' + Input.serializeDomEvent(event) + ');');\n      }\n      var pen = this.findTouchById(id);\n      if (pen) {\n        pen.cancel(point, event);\n        this.removePointer(pen);\n        this.cancelEvent(pen, event);\n      } else {\n        sceneryAssert && sceneryAssert(false, 'Pen not found for penCancel: ' + id);\n      }\n    },\n    pointerDown: function (id, type, point, event) {\n      switch (type) {\n      case 'mouse':\n        this.mouseDown(point, event);\n        break;\n      case 'touch':\n        this.touchStart(id, point, event);\n        break;\n      case 'pen':\n        this.penStart(id, point, event);\n        break;\n      default:\n        if (console.log) {\n          console.log('Unknown pointer type: ' + type);\n        }\n      }\n    },\n    pointerUp: function (id, type, point, event) {\n      switch (type) {\n      case 'mouse':\n        this.mouseUp(point, event);\n        break;\n      case 'touch':\n        this.touchEnd(id, point, event);\n        break;\n      case 'pen':\n        this.penEnd(id, point, event);\n        break;\n      default:\n        if (console.log) {\n          console.log('Unknown pointer type: ' + type);\n        }\n      }\n    },\n    pointerUpImmediate: function (id, type, point, event) {\n      switch (type) {\n      case 'mouse':\n        this.mouseUpImmediate(point, event);\n        break;\n      case 'touch':\n        this.touchEndImmediate(id, point, event);\n        break;\n      case 'pen':\n        this.penEndImmediate(id, point, event);\n        break;\n      default:\n        if (console.log) {\n          console.log('Unknown pointer type: ' + type);\n        }\n      }\n    },\n    pointerCancel: function (id, type, point, event) {\n      switch (type) {\n      case 'mouse':\n        if (console && console.log) {\n          console.log('WARNING: Pointer mouse cancel was received');\n        }\n        break;\n      case 'touch':\n        this.touchCancel(id, point, event);\n        break;\n      case 'pen':\n        this.penCancel(id, point, event);\n        break;\n      default:\n        if (console.log) {\n          console.log('Unknown pointer type: ' + type);\n        }\n      }\n    },\n    pointerMove: function (id, type, point, event) {\n      switch (type) {\n      case 'mouse':\n        this.mouseMove(point, event);\n        break;\n      case 'touch':\n        this.touchMove(id, point, event);\n        break;\n      case 'pen':\n        this.penMove(id, point, event);\n        break;\n      default:\n        if (console.log) {\n          console.log('Unknown pointer type: ' + type);\n        }\n      }\n    },\n    pointerOver: function (id, type, point, event) {\n    },\n    pointerOut: function (id, type, point, event) {\n    },\n    pointerEnter: function (id, type, point, event) {\n    },\n    pointerLeave: function (id, type, point, event) {\n    },\n    upEvent: function (pointer, event) {\n      var trail = this.scene.trailUnderPointer(pointer) || new scenery.Trail(this.scene);\n      this.dispatchEvent(trail, 'up', pointer, event, true);\n      if (pointer.isTouch) {\n        this.exitEvents(pointer, event, trail, 0, true);\n      }\n      pointer.trail = trail;\n    },\n    upImmediateEvent: function (pointer, event) {\n      var trail = this.scene.trailUnderPointer(pointer) || new scenery.Trail(this.scene);\n      this.dispatchEvent(trail, 'upImmediate', pointer, event, true);\n    },\n    downEvent: function (pointer, event) {\n      var trail = this.scene.trailUnderPointer(pointer) || new scenery.Trail(this.scene);\n      if (pointer.isTouch) {\n        this.enterEvents(pointer, event, trail, 0, true);\n      }\n      this.dispatchEvent(trail, 'down', pointer, event, true);\n      pointer.trail = trail;\n    },\n    moveEvent: function (pointer, event) {\n      this.branchChangeEvents(pointer, event, true);\n    },\n    cancelEvent: function (pointer, event) {\n      var trail = this.scene.trailUnderPointer(pointer) || new scenery.Trail(this.scene);\n      this.dispatchEvent(trail, 'cancel', pointer, event, true);\n      if (pointer.isTouch) {\n        this.exitEvents(pointer, event, trail, 0, true);\n      }\n      pointer.trail = trail;\n    },\n    branchChangeEvents: function (pointer, event, isMove) {\n      var trail = this.scene.trailUnderPointer(pointer) || new scenery.Trail(this.scene);\n      var oldTrail = pointer.trail || new scenery.Trail(this.scene);\n      var lastNodeChanged = oldTrail.lastNode() !== trail.lastNode();\n      if (!lastNodeChanged && !isMove) {\n        return;\n      }\n      var branchIndex;\n      for (branchIndex = 0; branchIndex < Math.min(trail.length, oldTrail.length); branchIndex++) {\n        if (trail.nodes[branchIndex] !== oldTrail.nodes[branchIndex]) {\n          break;\n        }\n      }\n      if (isMove) {\n        this.dispatchEvent(trail, 'move', pointer, event, true);\n      }\n      this.exitEvents(pointer, event, oldTrail, branchIndex, lastNodeChanged);\n      this.enterEvents(pointer, event, trail, branchIndex, lastNodeChanged);\n      pointer.trail = trail;\n    },\n    enterEvents: function (pointer, event, trail, branchIndex, lastNodeChanged) {\n      if (trail.length > branchIndex) {\n        for (var newIndex = trail.length - 1; newIndex >= branchIndex; newIndex--) {\n          this.dispatchEvent(trail.slice(0, newIndex + 1), 'enter', pointer, event, false);\n        }\n      }\n      if (lastNodeChanged) {\n        this.dispatchEvent(trail, 'over', pointer, event, true);\n      }\n    },\n    exitEvents: function (pointer, event, trail, branchIndex, lastNodeChanged) {\n      if (lastNodeChanged) {\n        this.dispatchEvent(trail, 'out', pointer, event, true);\n      }\n      if (trail.length > branchIndex) {\n        for (var oldIndex = branchIndex; oldIndex < trail.length; oldIndex++) {\n          this.dispatchEvent(trail.slice(0, oldIndex + 1), 'exit', pointer, event, false);\n        }\n      }\n    },\n    validatePointers: function () {\n      var that = this;\n      var i = this.pointers.length;\n      while (i--) {\n        var pointer = this.pointers[i];\n        if (pointer.point) {\n          that.branchChangeEvents(pointer, null, false);\n        }\n      }\n    },\n    dispatchEvent: function (trail, type, pointer, event, bubbles) {\n      sceneryEventLog && sceneryEventLog('Input: ' + type + ' on ' + trail.toString() + ' for pointer ' + pointer.toString());\n      if (!trail) {\n        try {\n          throw new Error('falsy trail for dispatchEvent');\n        } catch (e) {\n          console.log(e.stack);\n          throw e;\n        }\n      }\n      var inputEvent = new scenery.Event({\n          trail: trail,\n          type: type,\n          pointer: pointer,\n          domEvent: event,\n          currentTarget: null,\n          target: trail.lastNode()\n        });\n      this.dispatchToPointer(type, pointer, inputEvent);\n      this.dispatchToTargets(trail, pointer, type, inputEvent, bubbles);\n      if (!trail.lastNode().interactive && !pointer.isKey && event && event.preventDefault) {\n        event.preventDefault();\n      }\n    },\n    dispatchToPointer: function (type, pointer, inputEvent) {\n      if (inputEvent.aborted || inputEvent.handled) {\n        return;\n      }\n      var specificType = pointer.type + type;\n      var pointerListeners = pointer.listeners.slice(0);\n      for (var i = 0; i < pointerListeners.length; i++) {\n        var listener = pointerListeners[i];\n        var aborted = false;\n        if (!aborted && listener[specificType]) {\n          listener[specificType](inputEvent);\n          aborted = inputEvent.aborted;\n        }\n        if (!aborted && listener[type]) {\n          listener[type](inputEvent);\n          aborted = inputEvent.aborted;\n        }\n        if (aborted) {\n          return;\n        }\n      }\n    },\n    dispatchToTargets: function (trail, pointer, type, inputEvent, bubbles) {\n      if (inputEvent.aborted || inputEvent.handled) {\n        return;\n      }\n      var specificType = pointer.type + type;\n      for (var i = trail.length - 1; i >= 0; bubbles ? i-- : i = -1) {\n        var target = trail.nodes[i];\n        inputEvent.currentTarget = target;\n        var listeners = target.getInputListeners();\n        for (var k = 0; k < listeners.length; k++) {\n          var listener = listeners[k];\n          var aborted = false;\n          if (!aborted && listener[specificType]) {\n            listener[specificType](inputEvent);\n            aborted = inputEvent.aborted;\n          }\n          if (!aborted && listener[type]) {\n            listener[type](inputEvent);\n            aborted = inputEvent.aborted;\n          }\n          if (aborted) {\n            return;\n          }\n        }\n        if (inputEvent.handled) {\n          return;\n        }\n      }\n    },\n    addListener: function (type, callback, useCapture) {\n      var input = this;\n      var usePreventDefault = type !== 'keydown' && type !== 'keyup' && type !== 'keypress';\n      if (this.batchDOMEvents) {\n        var batchedCallback = function batchedEvent(domEvent) {\n          sceneryEventLog && sceneryEventLog('Batching event for ' + type);\n          if (usePreventDefault) {\n            domEvent.preventDefault();\n          }\n          input.batchedCallbacks.push(function batchedEventCallback() {\n            input.validatePointers();\n            if (input.logEvents) {\n              input.eventLog.push('validatePointers();');\n            }\n            callback(domEvent);\n          });\n        };\n        this.listenerTarget.addEventListener(type, batchedCallback, useCapture);\n        this.listenerReferences.push({\n          type: type,\n          callback: batchedCallback,\n          useCapture: useCapture\n        });\n      } else {\n        this.listenerTarget.addEventListener(type, callback, useCapture);\n        this.listenerReferences.push({\n          type: type,\n          callback: function synchronousEvent(domEvent) {\n            sceneryEventLog && sceneryEventLog('Running event for ' + type);\n            input.validatePointers();\n            if (input.logEvents) {\n              input.eventLog.push('validatePointers();');\n            }\n            callback(domEvent);\n          },\n          useCapture: useCapture\n        });\n      }\n    },\n    addImmediateListener: function (type, callback, useCapture) {\n      var input = this;\n      this.listenerTarget.addEventListener(type, callback, useCapture);\n      this.listenerReferences.push({\n        type: type,\n        callback: function immediateEvent(domEvent) {\n          sceneryEventLog && sceneryEventLog('Running immediate event for ' + type);\n          callback(domEvent);\n        },\n        useCapture: useCapture\n      });\n    },\n    disposeListeners: function () {\n      var input = this;\n      _.each(this.listenerReferences, function (ref) {\n        input.listenerTarget.removeEventListener(ref.type, ref.callback, ref.useCapture);\n      });\n    },\n    fireBatchedEvents: function () {\n      if (this.batchedCallbacks.length) {\n        sceneryEventLog && sceneryEventLog('Input.fireBatchedEvents length:' + this.batchedCallbacks.length);\n        var len = this.batchedCallbacks.length;\n        for (var i = 0; i < len; i++) {\n          this.batchedCallbacks[i]();\n        }\n        this.batchedCallbacks.length = 0;\n      }\n    }\n  };\n  Input.serializeDomEvent = function serializeDomEvent(domEvent) {\n    var lines = [];\n    for (var prop in domEvent) {\n      if (domEvent.hasOwnProperty(prop)) {\n        if (prop === 'touches' || prop === 'targetTouches' || prop === 'changedTouches') {\n          var arr = [];\n          for (var i = 0; i < domEvent[prop].length; i++) {\n            var touch = domEvent[prop].item(i);\n            arr.push(serializeDomEvent(touch));\n          }\n          lines.push(prop + ':[' + arr.join(',') + ']');\n        } else {\n          lines.push(prop + ':' + (typeof domEvent[prop] === 'object' && domEvent[prop] !== null ? '{}' : JSON.stringify(domEvent[prop])));\n        }\n      }\n    }\n    return '{' + lines.join(',') + '}';\n  };\n  Input.serializeVector2 = function (vector) {\n    return 'dot(' + vector.x + ',' + vector.y + ')';\n  };\n  return Input;\n});","\ndefine('SCENERY/input/SimpleDragHandler',['require','DOT/Matrix3','SCENERY/scenery'],function (require) {\n  'use strict';\n  var Matrix3 = require('DOT/Matrix3');\n  var scenery = require('SCENERY/scenery');\n  scenery.SimpleDragHandler = function SimpleDragHandler(options) {\n    var handler = this;\n    this.options = _.extend({\n      allowTouchSnag: false,\n      mouseButton: 0\n    }, options);\n    this.dragging = false;\n    this.pointer = null;\n    this.trail = null;\n    this.transform = null;\n    this.node = null;\n    this.lastDragPoint = null;\n    this.startTransformMatrix = null;\n    this.mouseButton = undefined;\n    this.transformListener = {\n      transform: function (args) {\n        if (!handler.trail.isExtensionOf(args.trail, true)) {\n          return;\n        }\n        var newMatrix = args.trail.getTransform().getMatrix();\n        var oldMatrix = handler.transform.getMatrix();\n        handler.node.prependMatrix(newMatrix.inverted().timesMatrix(oldMatrix));\n        handler.transform.set(newMatrix);\n      }\n    };\n    this.dragListener = {\n      up: function (event) {\n        sceneryAssert && sceneryAssert(event.pointer === handler.pointer);\n        if (!event.pointer.isMouse || event.domEvent.button === handler.mouseButton) {\n          var saveCurrentTarget = event.currentTarget;\n          event.currentTarget = handler.node;\n          handler.endDrag(event);\n          event.currentTarget = saveCurrentTarget;\n        }\n      },\n      cancel: function (event) {\n        sceneryAssert && sceneryAssert(event.pointer === handler.pointer);\n        var saveCurrentTarget = event.currentTarget;\n        event.currentTarget = handler.node;\n        handler.endDrag(event);\n        event.currentTarget = saveCurrentTarget;\n        if (!handler.transform) {\n          handler.node.setMatrix(handler.startTransformMatrix);\n        }\n      },\n      move: function (event) {\n        sceneryAssert && sceneryAssert(event.pointer === handler.pointer);\n        var delta = handler.transform.inverseDelta2(handler.pointer.point.minus(handler.lastDragPoint));\n        if (handler.options.translate) {\n          var translation = handler.node.getTransform().getMatrix().getTranslation();\n          handler.options.translate({\n            delta: delta,\n            oldPosition: translation,\n            position: translation.plus(delta)\n          });\n        } else {\n          handler.node.translate(delta, true);\n        }\n        handler.lastDragPoint = handler.pointer.point;\n        if (handler.options.drag) {\n          var saveCurrentTarget = event.currentTarget;\n          event.currentTarget = handler.node;\n          handler.options.drag(event, handler.trail);\n          event.currentTarget = saveCurrentTarget;\n        }\n      }\n    };\n  };\n  var SimpleDragHandler = scenery.SimpleDragHandler;\n  SimpleDragHandler.prototype = {\n    constructor: SimpleDragHandler,\n    startDrag: function (event) {\n      event.pointer.dragging = true;\n      event.pointer.addInputListener(this.dragListener);\n      this.dragging = true;\n      this.pointer = event.pointer;\n      this.trail = event.trail.subtrailTo(event.currentTarget, true);\n      this.transform = this.trail.getTransform();\n      this.node = event.currentTarget;\n      this.lastDragPoint = event.pointer.point;\n      this.startTransformMatrix = event.currentTarget.getMatrix();\n      this.mouseButton = event.pointer.isMouse ? event.domEvent.button : undefined;\n      if (this.options.start) {\n        this.options.start(event, this.trail);\n      }\n    },\n    endDrag: function (event) {\n      this.pointer.dragging = false;\n      this.pointer.removeInputListener(this.dragListener);\n      this.dragging = false;\n      if (this.options.end) {\n        this.options.end(event, this.trail);\n      }\n    },\n    tryToSnag: function (event) {\n      if (event.pointer.isMouse && event.domEvent && this.options.mouseButton !== event.domEvent.button && this.options.mouseButton !== -1) {\n        return;\n      }\n      if (!this.dragging && !event.pointer.dragging) {\n        this.startDrag(event);\n      }\n    },\n    down: function (event) {\n      this.tryToSnag(event);\n    },\n    touchenter: function (event) {\n      if (this.options.allowTouchSnag) {\n        this.tryToSnag(event);\n      }\n    }\n  };\n  return SimpleDragHandler;\n});","\ndefine('SCENERY/layers/Layer',['require','DOT/Bounds2','DOT/Transform3','SCENERY/scenery','SCENERY/util/Trail'],function (require) {\n  'use strict';\n  var Bounds2 = require('DOT/Bounds2');\n  var Transform3 = require('DOT/Transform3');\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  var globalIdCounter = 1;\n  scenery.Layer = function Layer(args) {\n    this._id = globalIdCounter++;\n    this.$main = args.$main;\n    this.scene = args.scene;\n    this.baseNode = args.baseNode;\n    this.usesPartialCSSTransforms = args.cssTranslation || args.cssRotation || args.cssScale;\n    this.cssTranslation = args.cssTranslation;\n    this.cssRotation = args.cssRotation;\n    this.cssScale = args.cssScale;\n    this.cssTransform = args.cssTransform;\n    sceneryAssert && sceneryAssert(!(this.usesPartialCSSTransforms && this.cssTransform), 'Do not specify both partial and complete CSS transform arguments.');\n    this.dirtyBounds = Bounds2.EVERYTHING;\n    this.setStartBoundary(args.startBoundary);\n    this.setEndBoundary(args.endBoundary);\n    if (this.baseNode === this.scene) {\n      this.baseTrail = new scenery.Trail(this.scene);\n    } else {\n      this.baseTrail = this.startPaintedTrail.upToNode(this.baseNode);\n      sceneryAssert && sceneryAssert(this.baseTrail.lastNode() === this.baseNode);\n    }\n    this._layerTrails = [];\n    this._instanceCount = 0;\n    var layer = this;\n    this.baseNodeBoundsListener = function (bounds) {\n      layer.baseNodeInternalBoundsChange();\n    };\n    this.baseNode.addEventListener('selfBounds', this.baseNodeBoundsListener);\n    this.baseNode.addEventListener('childBounds', this.baseNodeBoundsListener);\n    this.fitToBounds = this.usesPartialCSSTransforms || this.cssTransform;\n    sceneryAssert && sceneryAssert(this.fitToBounds || this.baseNode === this.scene, 'If the baseNode is not the scene, we need to fit the bounds');\n    this.baseNodeTransform = new Transform3();\n    this.disposed = false;\n  };\n  var Layer = scenery.Layer;\n  Layer.prototype = {\n    constructor: Layer,\n    setStartBoundary: function (boundary) {\n      this.startBoundary = boundary;\n      this.startPaintedTrail = this.startBoundary.nextPaintedTrail;\n      this.startPaintedTrail.setImmutable();\n    },\n    setEndBoundary: function (boundary) {\n      this.endBoundary = boundary;\n      this.endPaintedTrail = this.endBoundary.previousPaintedTrail;\n      this.endPaintedTrail.setImmutable();\n    },\n    toString: function () {\n      return this.getName() + ' ' + (this.startPaintedTrail ? this.startPaintedTrail.toString() : '!') + ' => ' + (this.endPaintedTrail ? this.endPaintedTrail.toString() : '!');\n    },\n    getId: function () {\n      return this._id;\n    },\n    get id() {\n      return this._id;\n    },\n    getLayerTrails: function () {\n      return this._layerTrails.slice(0);\n    },\n    getPaintedTrailCount: function () {\n      return this._layerTrails.length;\n    },\n    render: function (state) {\n      throw new Error('Layer.render unimplemented');\n    },\n    applyTransformationMatrix: function (matrix) {\n      throw new Error('Layer.applyTransformationMatrix unimplemented');\n    },\n    addInstance: function (instance) {\n      var trail = instance.trail;\n      if (sceneryAssert) {\n        _.each(this._layerTrails, function (otherTrail) {\n          sceneryAssert(!trail.equals(otherTrail), 'trail in addInstance should not already exist in a layer');\n        });\n      }\n      this._layerTrails.push(trail);\n      trail.setImmutable();\n    },\n    removeInstance: function (instance) {\n      var i;\n      for (i = 0; i < this._layerTrails.length; i++) {\n        this._layerTrails[i].reindex();\n        if (this._layerTrails[i].compare(instance.trail) === 0) {\n          break;\n        }\n      }\n      sceneryAssert && sceneryAssert(i < this._layerTrails.length);\n      this._layerTrails.splice(i, 1);\n    },\n    reindex: function (zIndex) {\n      this.startBoundary.reindex();\n      this.endBoundary.reindex();\n    },\n    pushClipShape: function (shape) {\n      throw new Error('Layer.pushClipShape unimplemented');\n    },\n    popClipShape: function () {\n      throw new Error('Layer.popClipShape unimplemented');\n    },\n    renderToCanvas: function (canvas, context, delayCounts) {\n      throw new Error('Layer.renderToCanvas unimplemented');\n    },\n    dispose: function () {\n      sceneryAssert && sceneryAssert(!this.disposed, 'Layer has already been disposed!');\n      this.disposed = true;\n      this.baseNode.removeEventListener('selfBounds', this.baseNodeBoundsListener);\n      this.baseNode.removeEventListener('childBounds', this.baseNodeBoundsListener);\n    },\n    getName: function () {\n      throw new Error('Layer.getName unimplemented');\n    },\n    baseNodeInternalBoundsChange: function () {\n    }\n  };\n  Layer.cssTransformPadding = 3;\n  return Layer;\n});","\ndefine('SCENERY/util/CanvasContextWrapper',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.CanvasContextWrapper = function CanvasContextWrapper(canvas, context) {\n    this.canvas = canvas;\n    this.context = context;\n    this.resetStyles();\n    phetAllocation && phetAllocation('CanvasContextWrapper');\n  };\n  var CanvasContextWrapper = scenery.CanvasContextWrapper;\n  CanvasContextWrapper.prototype = {\n    constructor: CanvasContextWrapper,\n    resetStyles: function () {\n      this.fillStyle = undefined;\n      this.strokeStyle = undefined;\n      this.lineWidth = undefined;\n      this.lineCap = undefined;\n      this.lineJoin = undefined;\n      this.lineDash = undefined;\n      this.lineDashOffset = undefined;\n      this.miterLimit = undefined;\n      this.font = undefined;\n      this.direction = undefined;\n    },\n    setDimensions: function (width, height) {\n      this.canvas.width = width;\n      this.canvas.height = height;\n      this.resetStyles();\n    },\n    setFillStyle: function (style) {\n      if (this.fillStyle !== style) {\n        this.fillStyle = style;\n        this.context.fillStyle = style && style.getCanvasStyle ? style.getCanvasStyle() : style;\n      }\n    },\n    setStrokeStyle: function (style) {\n      if (this.strokeStyle !== style) {\n        this.strokeStyle = style;\n        this.context.strokeStyle = style && style.getCanvasStyle ? style.getCanvasStyle() : style;\n      }\n    },\n    setLineWidth: function (width) {\n      if (this.lineWidth !== width) {\n        this.lineWidth = width;\n        this.context.lineWidth = width;\n      }\n    },\n    setLineCap: function (cap) {\n      if (this.lineCap !== cap) {\n        this.lineCap = cap;\n        this.context.lineCap = cap;\n      }\n    },\n    setLineJoin: function (join) {\n      if (this.lineJoin !== join) {\n        this.lineJoin = join;\n        this.context.lineJoin = join;\n      }\n    },\n    setLineDash: function (dash) {\n      sceneryAssert && sceneryAssert(dash !== undefined, 'undefined line dash would cause hard-to-trace errors');\n      if (this.lineDash !== dash) {\n        this.lineDash = dash;\n        if (this.context.setLineDash) {\n          this.context.setLineDash(dash === null ? [] : dash);\n        } else if (this.context.mozDash !== undefined) {\n          this.context.mozDash = dash;\n        } else if (this.context.webkitLineDash !== undefined) {\n          this.context.webkitLineDash = dash ? dash : [];\n        } else {\n        }\n      }\n    },\n    setLineDashOffset: function (lineDashOffset) {\n      if (this.lineDashOffset !== lineDashOffset) {\n        this.lineDashOffset = lineDashOffset;\n        if (this.context.lineDashOffset !== undefined) {\n          this.context.lineDashOffset = lineDashOffset;\n        } else if (this.context.webkitLineDashOffset !== undefined) {\n          this.context.webkitLineDashOffset = lineDashOffset;\n        } else {\n        }\n      }\n    },\n    setFont: function (font) {\n      if (this.font !== font) {\n        this.font = font;\n        this.context.font = font;\n      }\n    },\n    setDirection: function (direction) {\n      if (this.direction !== direction) {\n        this.direction = direction;\n        this.context.direction = direction;\n      }\n    }\n  };\n  return CanvasContextWrapper;\n});","\ndefine('SCENERY/util/TrailPointer',['require','SCENERY/scenery','SCENERY/util/Trail'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  scenery.TrailPointer = function TrailPointer(trail, isBefore) {\n    sceneryAssert && sceneryAssert(trail instanceof scenery.Trail, 'trail is not a trail');\n    this.trail = trail;\n    this.setBefore(isBefore);\n    phetAllocation && phetAllocation('TrailPointer');\n  };\n  var TrailPointer = scenery.TrailPointer;\n  TrailPointer.prototype = {\n    constructor: TrailPointer,\n    copy: function () {\n      return new TrailPointer(this.trail.copy(), this.isBefore);\n    },\n    setBefore: function (isBefore) {\n      this.isBefore = isBefore;\n      this.isAfter = !isBefore;\n    },\n    getRenderSwappedPointer: function () {\n      var newTrail = this.isBefore ? this.trail.previous() : this.trail.next();\n      if (newTrail === null) {\n        return null;\n      } else {\n        return new TrailPointer(newTrail, !this.isBefore);\n      }\n    },\n    getRenderBeforePointer: function () {\n      return this.isBefore ? this : this.getRenderSwappedPointer();\n    },\n    getRenderAfterPointer: function () {\n      return this.isAfter ? this : this.getRenderSwappedPointer();\n    },\n    compareRender: function (other) {\n      sceneryAssert && sceneryAssert(other !== null);\n      var a = this.getRenderBeforePointer();\n      var b = other.getRenderBeforePointer();\n      if (a !== null && b !== null) {\n        return a.trail.compare(b.trail);\n      } else {\n        if (a === b) {\n          return 0;\n        } else {\n          return a === null ? 1 : -1;\n        }\n      }\n    },\n    compareNested: function (other) {\n      sceneryAssert && sceneryAssert(other);\n      var comparison = this.trail.compare(other.trail);\n      if (comparison === 0) {\n        if (this.isBefore === other.isBefore) {\n          return 0;\n        } else {\n          return this.isBefore ? -1 : 1;\n        }\n      } else {\n        if (this.trail.isExtensionOf(other.trail)) {\n          return other.isBefore ? 1 : -1;\n        } else if (other.trail.isExtensionOf(this.trail)) {\n          return this.isBefore ? -1 : 1;\n        } else {\n          return comparison;\n        }\n      }\n    },\n    equalsRender: function (other) {\n      return this.compareRender(other) === 0;\n    },\n    equalsNested: function (other) {\n      return this.compareNested(other) === 0;\n    },\n    hasTrail: function () {\n      return !!this.trail;\n    },\n    nestedForwards: function () {\n      if (this.isBefore) {\n        if (this.trail.lastNode()._children.length > 0) {\n          this.trail.addDescendant(this.trail.lastNode()._children[0], 0);\n        } else {\n          this.setBefore(false);\n        }\n      } else {\n        if (this.trail.indices.length === 0) {\n          this.trail = null;\n          return null;\n        } else {\n          var index = this.trail.indices[this.trail.indices.length - 1];\n          this.trail.removeDescendant();\n          if (this.trail.lastNode()._children.length > index + 1) {\n            this.trail.addDescendant(this.trail.lastNode()._children[index + 1], index + 1);\n            this.setBefore(true);\n          } else {\n          }\n        }\n      }\n      return this;\n    },\n    nestedBackwards: function () {\n      if (this.isBefore) {\n        if (this.trail.indices.length === 0) {\n          this.trail = null;\n          return null;\n        } else {\n          var index = this.trail.indices[this.trail.indices.length - 1];\n          this.trail.removeDescendant();\n          if (index - 1 >= 0) {\n            this.trail.addDescendant(this.trail.lastNode()._children[index - 1], index - 1);\n            this.setBefore(false);\n          } else {\n          }\n        }\n      } else {\n        if (this.trail.lastNode()._children.length > 0) {\n          var children = this.trail.lastNode()._children;\n          this.trail.addDescendant(children[children.length - 1], children.length - 1);\n        } else {\n          this.setBefore(true);\n        }\n      }\n      return this;\n    },\n    eachNodeBetween: function (other, callback) {\n      this.eachTrailBetween(other, function (trail) {\n        callback(trail.lastNode());\n      });\n    },\n    eachTrailBetween: function (other, callback) {\n      if (this.isBefore) {\n        callback(this.trail);\n      }\n      this.depthFirstUntil(other, function (pointer) {\n        if (pointer.isBefore) {\n          callback(pointer.trail);\n        }\n      }, true);\n    },\n    depthFirstUntil: function (other, callback, excludeEndpoints) {\n      sceneryAssert && sceneryAssert(this.compareNested(other) <= (excludeEndpoints ? -1 : 0), 'TrailPointer.depthFirstUntil pointers out of order, possibly in both meanings of the phrase!');\n      sceneryAssert && sceneryAssert(this.trail.rootNode() === other.trail.rootNode(), 'TrailPointer.depthFirstUntil takes pointers with the same root');\n      this.trail.reindex();\n      other.trail.reindex();\n      var pointer = this.copy();\n      pointer.trail.setMutable();\n      var first = true;\n      while (!pointer.equalsNested(other)) {\n        sceneryAssert && sceneryAssert(pointer.compareNested(other) !== 1, 'skipped in depthFirstUntil');\n        var skipSubtree = false;\n        if (first) {\n          if (!excludeEndpoints) {\n            skipSubtree = callback(pointer);\n          }\n          first = false;\n        } else {\n          skipSubtree = callback(pointer);\n        }\n        if (skipSubtree && pointer.isBefore) {\n          pointer.setBefore(false);\n          if (pointer.compareNested(other) === 1) {\n            break;\n          }\n        } else {\n          pointer.nestedForwards();\n        }\n      }\n      if (!excludeEndpoints) {\n        callback(pointer);\n      }\n    },\n    toString: function () {\n      return '[' + (this.isBefore ? 'before' : 'after') + ' ' + this.trail.toString().slice(1);\n    }\n  };\n  TrailPointer.compareNested = function (trailA, isBeforeA, trailB, isBeforeB) {\n    var comparison = trailA.compare(trailB);\n    if (comparison === 0) {\n      if (isBeforeA === isBeforeB) {\n        return 0;\n      } else {\n        return isBeforeA ? -1 : 1;\n      }\n    } else {\n      if (trailA.isExtensionOf(trailB)) {\n        return isBeforeB ? 1 : -1;\n      } else if (trailB.isExtensionOf(trailA)) {\n        return isBeforeA ? -1 : 1;\n      } else {\n        return comparison;\n      }\n    }\n  };\n  return TrailPointer;\n});","\ndefine('SCENERY/util/Util',['require','SCENERY/scenery','DOT/Matrix3','DOT/Transform3','DOT/Bounds2','DOT/Vector2'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var Matrix3 = require('DOT/Matrix3');\n  var Transform3 = require('DOT/Transform3');\n  var Bounds2 = require('DOT/Bounds2');\n  var Vector2 = require('DOT/Vector2');\n  function p(x, y) {\n    return new Vector2(x, y);\n  }\n  var debugChromeBoundsScanning = false;\n  var transformProperty = '';\n  var transformOriginProperty = '';\n  var webkitHardwareAcceleration = false;\n  var mozillaHardwareAcceleration = false;\n  if (document && document.createElement) {\n    var style = document.createElement('div').style;\n    var transformNames = [\n        'transform',\n        'webkitTransform',\n        'oTransform',\n        'mozTransform',\n        'msTransform'\n      ];\n    var transformOriginNames = [\n        'transformOrigin',\n        'webkitTransformOrigin',\n        'oTransformOrigin',\n        'mozTransformOrigin',\n        'msTransformOrigin'\n      ];\n    var i;\n    for (i = 0; i < transformNames.length; i++) {\n      if (transformNames[i] in style) {\n        transformProperty = transformNames[i];\n        break;\n      }\n    }\n    for (i = 0; i < transformOriginNames.length; i++) {\n      if (transformOriginNames[i] in style) {\n        transformOriginProperty = transformOriginNames[i];\n        break;\n      }\n    }\n    if (!transformOriginProperty) {\n      transformOriginProperty = 'transformOrigin';\n    }\n    if ('webkitBackfaceVisibility' in style || 'webkitTransform' in style) {\n      webkitHardwareAcceleration = true;\n    }\n    if ('mozTransform' in style) {\n      mozillaHardwareAcceleration = true;\n    }\n  }\n  scenery.Util = {\n    extend: function (obj) {\n      _.each(Array.prototype.slice.call(arguments, 1), function (source) {\n        if (source) {\n          for (var prop in source) {\n            Object.defineProperty(obj, prop, Object.getOwnPropertyDescriptor(source, prop));\n          }\n        }\n      });\n      return obj;\n    },\n    objectCreate: Object.create || function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Object.create implementation only accepts the first parameter.');\n      }\n      function F() {\n      }\n      F.prototype = o;\n      return new F();\n    },\n    applyCSSTransform: function (matrix, element) {\n      var transformCSS = matrix.getCSSTransform();\n      if (webkitHardwareAcceleration || mozillaHardwareAcceleration) {\n        transformCSS += ' translateZ(0)';\n      }\n      if (webkitHardwareAcceleration) {\n        element.style.webkitBackfaceVisibility = 'hidden';\n      }\n      element.style[transformProperty] = transformCSS;\n      element.style[transformOriginProperty] = 'top left';\n    },\n    testAssert: function () {\n      return 'assert.scenery: ' + (sceneryAssert ? 'true' : 'false');\n    },\n    testAssertExtra: function () {\n      return 'assert.scenery.extra: ' + (sceneryAssertExtra ? 'true' : 'false');\n    },\n    polyfillRequestAnimationFrame: function () {\n      var lastTime = 0;\n      var vendors = [\n          'ms',\n          'moz',\n          'webkit',\n          'o'\n        ];\n      for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n      }\n      if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function (callback) {\n          var currTime = new Date().getTime();\n          var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n          var id = window.setTimeout(function () {\n              callback(currTime + timeToCall);\n            }, timeToCall);\n          lastTime = currTime + timeToCall;\n          return id;\n        };\n      }\n      if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function (id) {\n          clearTimeout(id);\n        };\n      }\n    },\n    backingStorePixelRatio: function (context) {\n      return context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    },\n    backingScale: function (context) {\n      if ('devicePixelRatio' in window) {\n        var backingStoreRatio = Util.backingStorePixelRatio(context);\n        return window.devicePixelRatio / backingStoreRatio;\n      }\n      return 1;\n    },\n    scanBounds: function (imageData, resolution, transform) {\n      var dirtyX = _.map(_.range(resolution), function () {\n          return false;\n        });\n      var dirtyY = _.map(_.range(resolution), function () {\n          return false;\n        });\n      for (var x = 0; x < resolution; x++) {\n        for (var y = 0; y < resolution; y++) {\n          var offset = 4 * (y * resolution + x);\n          if (imageData.data[offset] !== 0 || imageData.data[offset + 1] !== 0 || imageData.data[offset + 2] !== 0 || imageData.data[offset + 3] !== 0) {\n            dirtyX[x] = true;\n            dirtyY[y] = true;\n          }\n        }\n      }\n      var minX = _.indexOf(dirtyX, true);\n      var maxX = _.lastIndexOf(dirtyX, true);\n      var minY = _.indexOf(dirtyY, true);\n      var maxY = _.lastIndexOf(dirtyY, true);\n      var extraSpread = resolution / 16;\n      return {\n        minBounds: new Bounds2(minX < 1 || minX >= resolution - 1 ? Number.POSITIVE_INFINITY : transform.inversePosition2(p(minX + 1 + extraSpread, 0)).x, minY < 1 || minY >= resolution - 1 ? Number.POSITIVE_INFINITY : transform.inversePosition2(p(0, minY + 1 + extraSpread)).y, maxX < 1 || maxX >= resolution - 1 ? Number.NEGATIVE_INFINITY : transform.inversePosition2(p(maxX - extraSpread, 0)).x, maxY < 1 || maxY >= resolution - 1 ? Number.NEGATIVE_INFINITY : transform.inversePosition2(p(0, maxY - extraSpread)).y),\n        maxBounds: new Bounds2(minX < 1 || minX >= resolution - 1 ? Number.NEGATIVE_INFINITY : transform.inversePosition2(p(minX - 1 - extraSpread, 0)).x, minY < 1 || minY >= resolution - 1 ? Number.NEGATIVE_INFINITY : transform.inversePosition2(p(0, minY - 1 - extraSpread)).y, maxX < 1 || maxX >= resolution - 1 ? Number.POSITIVE_INFINITY : transform.inversePosition2(p(maxX + 2 + extraSpread, 0)).x, maxY < 1 || maxY >= resolution - 1 ? Number.POSITIVE_INFINITY : transform.inversePosition2(p(0, maxY + 2 + extraSpread)).y)\n      };\n    },\n    canvasAccurateBounds: function (renderToContext, options) {\n      var precision = options && options.precision ? options.precision : 0.001;\n      var resolution = options && options.resolution ? options.resolution : 128;\n      var initialScale = options && options.initialScale ? options.initialScale : 1 / 16;\n      var minBounds = Bounds2.NOTHING;\n      var maxBounds = Bounds2.EVERYTHING;\n      var canvas = document.createElement('canvas');\n      canvas.width = resolution;\n      canvas.height = resolution;\n      var context = canvas.getContext('2d');\n      if (debugChromeBoundsScanning) {\n        $(window).ready(function () {\n          var header = document.createElement('h2');\n          $(header).text('Bounds Scan');\n          $('#display').append(header);\n        });\n      }\n      function scan(transform) {\n        context.save();\n        transform.matrix.canvasSetTransform(context);\n        renderToContext(context);\n        context.restore();\n        var data = context.getImageData(0, 0, resolution, resolution);\n        var minMaxBounds = Util.scanBounds(data, resolution, transform);\n        function snapshotToCanvas(snapshot) {\n          var canvas = document.createElement('canvas');\n          canvas.width = resolution;\n          canvas.height = resolution;\n          var context = canvas.getContext('2d');\n          context.putImageData(snapshot, 0, 0);\n          $(canvas).css('border', '1px solid black');\n          $(window).ready(function () {\n            $('#display').append(canvas);\n          });\n        }\n        if (debugChromeBoundsScanning) {\n          snapshotToCanvas(data);\n        }\n        context.clearRect(0, 0, resolution, resolution);\n        return minMaxBounds;\n      }\n      function idealTransform(bounds) {\n        var borderSize = 2;\n        var scaleX = (resolution - borderSize * 2) / (bounds.maxX - bounds.minX);\n        var scaleY = (resolution - borderSize * 2) / (bounds.maxY - bounds.minY);\n        var translationX = -scaleX * bounds.minX + borderSize;\n        var translationY = -scaleY * bounds.minY + borderSize;\n        return new Transform3(Matrix3.translation(translationX, translationY).timesMatrix(Matrix3.scaling(scaleX, scaleY)));\n      }\n      var initialTransform = new Transform3();\n      initialTransform.append(Matrix3.translation(resolution / 2, resolution / 2));\n      initialTransform.append(Matrix3.scaling(initialScale));\n      var coarseBounds = scan(initialTransform);\n      minBounds = minBounds.union(coarseBounds.minBounds);\n      maxBounds = maxBounds.intersection(coarseBounds.maxBounds);\n      var tempMin, tempMax, refinedBounds;\n      tempMin = maxBounds.minY;\n      tempMax = maxBounds.maxY;\n      while (isFinite(minBounds.minX) && isFinite(maxBounds.minX) && Math.abs(minBounds.minX - maxBounds.minX) > precision) {\n        refinedBounds = scan(idealTransform(new Bounds2(maxBounds.minX, tempMin, minBounds.minX, tempMax)));\n        if (minBounds.minX <= refinedBounds.minBounds.minX && maxBounds.minX >= refinedBounds.maxBounds.minX) {\n          if (debugChromeBoundsScanning) {\n            console.log('warning, exiting infinite loop!');\n            console.log('transformed \"min\" minX: ' + idealTransform(new Bounds2(maxBounds.minX, maxBounds.minY, minBounds.minX, maxBounds.maxY)).transformPosition2(p(minBounds.minX, 0)));\n            console.log('transformed \"max\" minX: ' + idealTransform(new Bounds2(maxBounds.minX, maxBounds.minY, minBounds.minX, maxBounds.maxY)).transformPosition2(p(maxBounds.minX, 0)));\n          }\n          break;\n        }\n        minBounds = minBounds.withMinX(Math.min(minBounds.minX, refinedBounds.minBounds.minX));\n        maxBounds = maxBounds.withMinX(Math.max(maxBounds.minX, refinedBounds.maxBounds.minX));\n        tempMin = Math.max(tempMin, refinedBounds.maxBounds.minY);\n        tempMax = Math.min(tempMax, refinedBounds.maxBounds.maxY);\n      }\n      tempMin = maxBounds.minY;\n      tempMax = maxBounds.maxY;\n      while (isFinite(minBounds.maxX) && isFinite(maxBounds.maxX) && Math.abs(minBounds.maxX - maxBounds.maxX) > precision) {\n        refinedBounds = scan(idealTransform(new Bounds2(minBounds.maxX, tempMin, maxBounds.maxX, tempMax)));\n        if (minBounds.maxX >= refinedBounds.minBounds.maxX && maxBounds.maxX <= refinedBounds.maxBounds.maxX) {\n          if (debugChromeBoundsScanning) {\n            console.log('warning, exiting infinite loop!');\n          }\n          break;\n        }\n        minBounds = minBounds.withMaxX(Math.max(minBounds.maxX, refinedBounds.minBounds.maxX));\n        maxBounds = maxBounds.withMaxX(Math.min(maxBounds.maxX, refinedBounds.maxBounds.maxX));\n        tempMin = Math.max(tempMin, refinedBounds.maxBounds.minY);\n        tempMax = Math.min(tempMax, refinedBounds.maxBounds.maxY);\n      }\n      tempMin = maxBounds.minX;\n      tempMax = maxBounds.maxX;\n      while (isFinite(minBounds.minY) && isFinite(maxBounds.minY) && Math.abs(minBounds.minY - maxBounds.minY) > precision) {\n        refinedBounds = scan(idealTransform(new Bounds2(tempMin, maxBounds.minY, tempMax, minBounds.minY)));\n        if (minBounds.minY <= refinedBounds.minBounds.minY && maxBounds.minY >= refinedBounds.maxBounds.minY) {\n          if (debugChromeBoundsScanning) {\n            console.log('warning, exiting infinite loop!');\n          }\n          break;\n        }\n        minBounds = minBounds.withMinY(Math.min(minBounds.minY, refinedBounds.minBounds.minY));\n        maxBounds = maxBounds.withMinY(Math.max(maxBounds.minY, refinedBounds.maxBounds.minY));\n        tempMin = Math.max(tempMin, refinedBounds.maxBounds.minX);\n        tempMax = Math.min(tempMax, refinedBounds.maxBounds.maxX);\n      }\n      tempMin = maxBounds.minX;\n      tempMax = maxBounds.maxX;\n      while (isFinite(minBounds.maxY) && isFinite(maxBounds.maxY) && Math.abs(minBounds.maxY - maxBounds.maxY) > precision) {\n        refinedBounds = scan(idealTransform(new Bounds2(tempMin, minBounds.maxY, tempMax, maxBounds.maxY)));\n        if (minBounds.maxY >= refinedBounds.minBounds.maxY && maxBounds.maxY <= refinedBounds.maxBounds.maxY) {\n          if (debugChromeBoundsScanning) {\n            console.log('warning, exiting infinite loop!');\n          }\n          break;\n        }\n        minBounds = minBounds.withMaxY(Math.max(minBounds.maxY, refinedBounds.minBounds.maxY));\n        maxBounds = maxBounds.withMaxY(Math.min(maxBounds.maxY, refinedBounds.maxBounds.maxY));\n        tempMin = Math.max(tempMin, refinedBounds.maxBounds.minX);\n        tempMax = Math.min(tempMax, refinedBounds.maxBounds.maxX);\n      }\n      if (debugChromeBoundsScanning) {\n        console.log('minBounds: ' + minBounds);\n        console.log('maxBounds: ' + maxBounds);\n      }\n      var result = new Bounds2((minBounds.minX + maxBounds.minX) / 2, (minBounds.minY + maxBounds.minY) / 2, (minBounds.maxX + maxBounds.maxX) / 2, (minBounds.maxY + maxBounds.maxY) / 2);\n      result.minBounds = minBounds;\n      result.maxBounds = maxBounds;\n      result.isConsistent = maxBounds.containsBounds(minBounds);\n      result.precision = Math.max(Math.abs(minBounds.minX - maxBounds.minX), Math.abs(minBounds.minY - maxBounds.minY), Math.abs(minBounds.maxX - maxBounds.maxX), Math.abs(minBounds.maxY - maxBounds.maxY));\n      return result;\n    }\n  };\n  var Util = scenery.Util;\n  return Util;\n});","\ndefine('SCENERY/layers/CanvasLayer',['require','PHET_CORE/inherit','DOT/Bounds2','SCENERY/scenery','KITE/Shape','SCENERY/layers/Layer','SCENERY/util/CanvasContextWrapper','SCENERY/util/Trail','SCENERY/util/TrailPointer','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var scenery = require('SCENERY/scenery');\n  var Shape = require('KITE/Shape');\n  var Layer = require('SCENERY/layers/Layer');\n  require('SCENERY/util/CanvasContextWrapper');\n  require('SCENERY/util/Trail');\n  require('SCENERY/util/TrailPointer');\n  require('SCENERY/util/Util');\n  var canvasContextPool = [];\n  scenery.CanvasLayer = function CanvasLayer(args) {\n    sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' constructor');\n    Layer.call(this, args);\n    this.backingScale = args.scene.backingScale;\n    if (args.fullResolution !== undefined) {\n      this.backingScale = args.fullResolution ? scenery.Util.backingScale(document.createElement('canvas').getContext('2d')) : 1;\n    }\n    this.logicalWidth = this.scene.sceneBounds.width;\n    this.logicalHeight = this.scene.sceneBounds.height;\n    var canvas = document.createElement('canvas');\n    canvas.width = this.logicalWidth * this.backingScale;\n    canvas.height = this.logicalHeight * this.backingScale;\n    canvas.style.width = this.logicalWidth + 'px';\n    canvas.style.height = this.logicalHeight + 'px';\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    canvas.style.top = '0';\n    this.$main.append(canvas);\n    this.canvas = canvas;\n    this.context = canvas.getContext('2d');\n    this.scene = args.scene;\n    this.context.miterLimit = 20;\n    this.context.miterLimit = 10;\n    this.isCanvasLayer = true;\n    this.wrapper = new scenery.CanvasContextWrapper(this.canvas, this.context);\n    this.boundlessCount = 0;\n  };\n  var CanvasLayer = scenery.CanvasLayer;\n  inherit(Layer, CanvasLayer, {\n    render: function (scene, args) {\n      args = args || {};\n      var dirtyBoundsEnabled = this.canUseDirtyRegions() && !args.fullRender;\n      if (dirtyBoundsEnabled && this.dirtyBounds.isEmpty()) {\n        return;\n      }\n      this.context.setTransform(this.backingScale, 0, 0, this.backingScale, 0, 0);\n      var visibleDirtyBounds = dirtyBoundsEnabled ? this.dirtyBounds.intersection(scene.sceneBounds) : scene.sceneBounds;\n      if (!visibleDirtyBounds.isEmpty()) {\n        this.clearGlobalBounds(visibleDirtyBounds);\n        if (dirtyBoundsEnabled) {\n          this.pushClipShape(Shape.bounds(visibleDirtyBounds));\n        }\n        this.recursiveRender(scene, args);\n        if (dirtyBoundsEnabled) {\n          this.popClipShape();\n        }\n      }\n      this.dirtyBounds = Bounds2.NOTHING;\n    },\n    recursiveRender: function (scene, args) {\n      var layer = this;\n      var i;\n      var startPointer = new scenery.TrailPointer(this.startPaintedTrail, true);\n      var endPointer = new scenery.TrailPointer(this.endPaintedTrail, true);\n      var wrapperStack = [this.wrapper];\n      this.wrapper.resetStyles();\n      function requiresScratchCanvas(trail) {\n        return trail.lastNode().getOpacity() < 1;\n      }\n      function getCanvasWrapper() {\n        var width = layer.logicalWidth * layer.backingScale;\n        var height = layer.logicalHeight * layer.backingScale;\n        if (canvasContextPool.length) {\n          var wrapper = canvasContextPool.pop();\n          wrapper.setDimensions(width, height);\n          return wrapper;\n        } else {\n          var canvas = document.createElement('canvas');\n          canvas.width = layer.logicalWidth * layer.backingScale;\n          canvas.height = layer.logicalHeight * layer.backingScale;\n          var context = canvas.getContext('2d');\n          return new scenery.CanvasContextWrapper(canvas, context);\n        }\n      }\n      function topWrapper() {\n        return wrapperStack[wrapperStack.length - 1];\n      }\n      function enter(trail) {\n        var node = trail.lastNode();\n        if (requiresScratchCanvas(trail)) {\n          var wrapper = getCanvasWrapper();\n          wrapperStack.push(wrapper);\n          var newContext = wrapper.context;\n          newContext.setTransform(layer.backingScale, 0, 0, layer.backingScale, 0, 0);\n          var length = trail.nodes.length;\n          for (var i = 0; i < length; i++) {\n            trail.nodes[i].transform.getMatrix().canvasAppendTransform(newContext);\n          }\n        } else {\n          node.transform.getMatrix().canvasAppendTransform(topWrapper().context);\n        }\n        if (node._clipShape) {\n          layer.pushClipShape(node._clipShape);\n        }\n      }\n      function exit(trail) {\n        var node = trail.lastNode();\n        if (node._clipShape) {\n          layer.popClipShape();\n        }\n        if (requiresScratchCanvas(trail)) {\n          var baseContext = wrapperStack[wrapperStack.length - 2].context;\n          var topCanvas = wrapperStack[wrapperStack.length - 1].canvas;\n          var opacityChange = trail.lastNode().getOpacity() < 1;\n          if (opacityChange) {\n            baseContext.globalAlpha = trail.lastNode().getOpacity();\n          }\n          baseContext.save();\n          baseContext.setTransform(1, 0, 0, 1, 0, 0);\n          baseContext.drawImage(topCanvas, 0, 0);\n          baseContext.restore();\n          if (opacityChange) {\n            baseContext.globalAlpha = 1;\n          }\n          var wrapper = wrapperStack.pop();\n          if (wrapper !== layer.wrapper) {\n            canvasContextPool.push(wrapper);\n          }\n        } else {\n          node.transform.getInverse().canvasAppendTransform(topWrapper().context);\n        }\n      }\n      var invisibleCount = 0;\n      var boundaryTrail;\n      startPointer.trail.reindex();\n      endPointer.trail.reindex();\n      var startWalkLength = startPointer.trail.length - (startPointer.isBefore ? 1 : 0);\n      boundaryTrail = new scenery.Trail();\n      for (i = 0; i < startWalkLength; i++) {\n        var startNode = startPointer.trail.nodes[i];\n        boundaryTrail.addDescendant(startNode);\n        invisibleCount += startNode.isVisible() ? 0 : 1;\n        if (invisibleCount === 0) {\n          enter(boundaryTrail);\n        }\n      }\n      startPointer.depthFirstUntil(endPointer, function renderPointer(pointer) {\n        var node = pointer.trail.lastNode();\n        if (pointer.isBefore) {\n          invisibleCount += node.isVisible() ? 0 : 1;\n          if (invisibleCount === 0) {\n            enter(pointer.trail);\n            if (node.isPainted()) {\n              var wrapper = wrapperStack[wrapperStack.length - 1];\n              node.paintCanvas(wrapper);\n            }\n          } else {\n            return true;\n          }\n        } else {\n          if (invisibleCount === 0) {\n            exit(pointer.trail);\n          }\n          invisibleCount -= node.isVisible() ? 0 : 1;\n        }\n      }, false);\n      boundaryTrail = endPointer.trail.copy();\n      var endWalkLength = endPointer.trail.length - (endPointer.isAfter ? 1 : 0);\n      for (i = endWalkLength - 1; i >= 0; i--) {\n        var endNode = endPointer.trail.nodes[i];\n        invisibleCount -= endNode.isVisible() ? 0 : 1;\n        if (invisibleCount === 0) {\n          exit(boundaryTrail);\n        }\n        boundaryTrail.removeDescendant();\n      }\n    },\n    dispose: function () {\n      Layer.prototype.dispose.call(this);\n      this.canvas.parentNode.removeChild(this.canvas);\n    },\n    applyTransformationMatrix: function (matrix) {\n      matrix.canvasAppendTransform(this.context);\n    },\n    reindex: function (zIndex) {\n      Layer.prototype.reindex.call(this, zIndex);\n      if (this.zIndex !== zIndex) {\n        this.canvas.style.zIndex = zIndex;\n        this.zIndex = zIndex;\n      }\n      return zIndex + 1;\n    },\n    pushClipShape: function (shape) {\n      this.context.save();\n      this.writeClipShape(shape);\n    },\n    popClipShape: function () {\n      this.context.restore();\n    },\n    writeClipShape: function (shape) {\n      this.context.beginPath();\n      shape.writeToContext(this.context);\n      this.context.clip();\n    },\n    clearGlobalBounds: function (bounds) {\n      if (!bounds.isEmpty()) {\n        this.context.save();\n        this.context.setTransform(this.backingScale, 0, 0, this.backingScale, 0, 0);\n        this.context.clearRect(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());\n        this.context.restore();\n      }\n    },\n    getSVGString: function () {\n      return '<image xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"' + this.canvas.toDataURL() + '\" x=\"0\" y=\"0\" height=\"' + this.canvas.height + 'px\" width=\"' + this.canvas.width + 'px\"/>';\n    },\n    renderToCanvas: function (canvas, context, delayCounts) {\n      context.drawImage(this.canvas, 0, 0);\n    },\n    addInstance: function (instance) {\n      var trail = instance.trail;\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' addInstance: ' + trail.toString());\n      Layer.prototype.addInstance.call(this, instance);\n      this.canvasMarkLocalBounds(trail.lastNode().getBounds(), trail.slice(0, trail.length - 1));\n      if (trail.lastNode().boundsInaccurate) {\n        this.boundlessCount++;\n      }\n    },\n    removeInstance: function (instance) {\n      var trail = instance.trail;\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' removeInstance: ' + trail.toString());\n      Layer.prototype.removeInstance.call(this, instance);\n      this.canvasMarkLocalBounds(trail.lastNode().getBounds(), trail.slice(0, trail.length - 1));\n      if (trail.lastNode().boundsInaccurate) {\n        this.boundlessCount--;\n      }\n    },\n    canUseDirtyRegions: function () {\n      sceneryAssert && sceneryAssert(this.boundlessCount >= 0);\n      return this.boundlessCount === 0;\n    },\n    canvasMarkGlobalBounds: function (globalBounds) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' canvasMarkGlobalBounds: ' + globalBounds.toString());\n      sceneryAssert && sceneryAssert(globalBounds.isEmpty() || globalBounds.isFinite(), 'Infinite (non-empty) dirty bounds passed to canvasMarkGlobalBounds');\n      this.dirtyBounds = this.dirtyBounds.union(globalBounds.dilate(2).roundOut());\n    },\n    canvasMarkLocalBounds: function (localBounds, trail) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' canvasMarkLocalBounds: ' + localBounds.toString() + ' on ' + trail.toString());\n      if (!this.canUseDirtyRegions()) {\n        this.dirtyBounds = Bounds2.EVERYTHING;\n      } else {\n        this.canvasMarkGlobalBounds(trail.localToGlobalBounds(localBounds));\n      }\n    },\n    canvasMarkParentBounds: function (parentBounds, trail) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' canvasMarkParentBounds: ' + parentBounds.toString() + ' on ' + trail.toString());\n      if (!this.canUseDirtyRegions()) {\n        this.dirtyBounds = Bounds2.EVERYTHING;\n      } else {\n        this.canvasMarkGlobalBounds(trail.parentToGlobalBounds(parentBounds));\n      }\n    },\n    canvasMarkSelf: function (instance) {\n      this.canvasMarkLocalBounds(instance.getNode().getSelfBounds(), instance.trail);\n    },\n    canvasMarkSubtree: function (instance) {\n      this.canvasMarkParentBounds(instance.getNode().getBounds(), instance.trail);\n    },\n    getName: function () {\n      return 'canvas';\n    },\n    notifyVisibilityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyVisibilityChange: ' + instance.trail.toString());\n      if (instance.trail.isVisible()) {\n        this.canvasMarkSubtree(instance);\n      }\n    },\n    notifyOpacityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyOpacityChange: ' + instance.trail.toString());\n      this.canvasMarkSubtree(instance);\n    },\n    notifyBeforeSelfChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyBeforeSelfChange: ' + instance.trail.toString());\n      this.canvasMarkSelf(instance);\n    },\n    notifyBeforeSubtreeChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyBeforeSubtreeChange: ' + instance.trail.toString());\n      this.canvasMarkSubtree(instance);\n    },\n    notifyDirtySelfPaint: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyDirtySelfPaint: ' + instance.trail.toString());\n      this.canvasMarkSelf(instance);\n    },\n    notifyDirtySubtreePaint: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyDirtySubtreePaint: ' + instance.trail.toString());\n      this.canvasMarkSubtree(instance);\n    },\n    notifyTransformChange: function (instance) {\n    },\n    notifyBoundsAccuracyChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('CanvasLayer #' + this.id + ' notifyBoundsAccuracyChange: ' + instance.trail.toString());\n      if (instance.node.boundsInaccurate) {\n        this.boundlessCount++;\n      } else {\n        this.boundlessCount--;\n      }\n    }\n  });\n  return CanvasLayer;\n});","\ndefine('SCENERY/layers/DOMLayer',['require','PHET_CORE/inherit','DOT/Bounds2','SCENERY/scenery','SCENERY/layers/Layer','SCENERY/util/Trail'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var scenery = require('SCENERY/scenery');\n  var Layer = require('SCENERY/layers/Layer');\n  require('SCENERY/util/Trail');\n  scenery.DOMLayer = function DOMLayer(args) {\n    sceneryLayerLog && sceneryLayerLog('DOMLayer constructor');\n    Layer.call(this, args);\n    var width = args.scene.sceneBounds.width;\n    var height = args.scene.sceneBounds.height;\n    this.div = document.createElement('div');\n    var div = this.div;\n    div.style.position = 'absolute';\n    div.style.left = '0';\n    div.style.top = '0';\n    div.style.width = '0';\n    div.style.height = '0';\n    div.style.clip = 'rect(0px,' + width + 'px,' + height + 'px,0px)';\n    this.$div = $(this.div);\n    this.$main.append(this.div);\n    this.scene = args.scene;\n    this.isDOMLayer = true;\n    this.idElementMap = {};\n    this.idTrailMap = {};\n    this.trails = [];\n  };\n  var DOMLayer = scenery.DOMLayer;\n  inherit(Layer, DOMLayer, {\n    addInstance: function (instance) {\n      Layer.prototype.addInstance.call(this, instance);\n      var trail = instance.trail;\n      this.reindexTrails();\n      var node = trail.lastNode();\n      var element = node.getDOMElement();\n      node.updateDOMElement(element);\n      this.updateVisibility(trail, element);\n      this.idElementMap[trail.getUniqueId()] = element;\n      this.idTrailMap[trail.getUniqueId()] = trail;\n      var insertionIndex;\n      for (insertionIndex = 0; insertionIndex < this.trails.length; insertionIndex++) {\n        var otherTrail = this.trails[insertionIndex];\n        otherTrail.reindex();\n        var comparison = otherTrail.compare(trail);\n        sceneryAssert && sceneryAssert(comparison !== 0, 'Trail has already been inserted into the DOMLayer');\n        if (comparison === 1) {\n          break;\n        }\n      }\n      if (insertionIndex === this.div.childNodes.length) {\n        this.div.appendChild(element);\n        this.trails.push(trail);\n      } else {\n        this.div.insertBefore(this.getElementFromTrail(this.trails[insertionIndex]));\n        this.trails.splice(insertionIndex, 0, trail);\n      }\n      node.updateCSSTransform(trail.getTransform(), element);\n    },\n    removeInstance: function (instance) {\n      Layer.prototype.removeInstance.call(this, instance);\n      var trail = instance.trail;\n      this.reindexTrails();\n      var element = this.getElementFromTrail(trail);\n      sceneryAssert && sceneryAssert(element, 'Trail does not exist in the DOMLayer');\n      delete this.idElementMap[trail.getUniqueId];\n      delete this.idTrailMap[trail.getUniqueId];\n      this.div.removeChild(element);\n      var removalIndex = this.getIndexOfTrail(trail);\n      this.trails.splice(removalIndex, 1);\n    },\n    getElementFromTrail: function (trail) {\n      return this.idElementMap[trail.getUniqueId()];\n    },\n    reindexTrails: function (zIndex) {\n      Layer.prototype.reindex.call(this, zIndex);\n      var i = this.trails.length;\n      while (i--) {\n        this.trails[i].reindex();\n      }\n    },\n    getIndexOfTrail: function (trail) {\n      var i;\n      for (i = 0; i < this.trails.length; i++) {\n        if (this.trails[i].compare(trail) === 0) {\n          return i;\n        }\n      }\n      throw new Error('DOMLayer.getIndexOfTrail unable to find trail: ' + trail.toString());\n    },\n    render: function (scene, args) {\n    },\n    dispose: function () {\n      Layer.prototype.dispose.call(this);\n      this.div.parentNode.removeChild(this.div);\n    },\n    updateVisibility: function (trail, element) {\n      if (trail.isVisible()) {\n        element.style.visibility = 'visible';\n      } else {\n        element.style.visibility = 'hidden';\n      }\n    },\n    applyTransformationMatrix: function (matrix) {\n    },\n    getContainer: function () {\n      return this.div;\n    },\n    reindex: function (zIndex) {\n      Layer.prototype.reindex.call(this, zIndex);\n      if (this.zIndex !== zIndex) {\n        this.div.style.zIndex = zIndex;\n        this.zIndex = zIndex;\n      }\n      return zIndex + 1;\n    },\n    pushClipShape: function (shape) {\n    },\n    popClipShape: function () {\n    },\n    getSVGString: function () {\n      var data = '<svg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'' + this.$main.width() + '\\' height=\\'' + this.$main.height() + '\\'>' + '<foreignObject width=\\'100%\\' height=\\'100%\\'>' + $(this.div).html() + '</foreignObject></svg>';\n    },\n    renderToCanvas: function (canvas, context, delayCounts) {\n    },\n    getName: function () {\n      return 'dom';\n    },\n    notifyVisibilityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('DOMLayer #' + this.id + ' notifyVisibilityChange: ' + instance.trail.toString());\n      var trail = instance.trail;\n      for (var trailId in this.idTrailMap) {\n        var subtrail = this.idTrailMap[trailId];\n        subtrail.reindex();\n        if (subtrail.isExtensionOf(trail, true)) {\n          this.updateVisibility(subtrail, this.idElementMap[trailId]);\n        }\n      }\n    },\n    notifyOpacityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('DOMLayer #' + this.id + ' notifyOpacityChange: ' + instance.trail.toString());\n    },\n    notifyBeforeSelfChange: function (instance) {\n    },\n    notifyBeforeSubtreeChange: function (instance) {\n    },\n    notifyDirtySelfPaint: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('DOMLayer #' + this.id + ' notifyDirtySelfPaint: ' + instance.trail.toString());\n      var node = instance.getNode();\n      var trail = instance.trail;\n      var dirtyElement = this.idElementMap[trail.getUniqueId()];\n      if (dirtyElement) {\n        node.updateDOMElement(dirtyElement);\n        if (node.domUpdateTransformOnRepaint) {\n          node.updateCSSTransform(trail.getTransform(), dirtyElement);\n        }\n      }\n    },\n    notifyDirtySubtreePaint: function (instance) {\n      if (instance.layer === this) {\n        this.notifyDirtySelfPaint(instance);\n      }\n    },\n    notifyTransformChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('DOMLayer #' + this.id + ' notifyTransformChange: ' + instance.trail.toString());\n      var layer = this;\n      var baseTrail = instance.trail;\n      scenery.Trail.eachPaintedTrailBetween(this.startPaintedTrail, this.endPaintedTrail, function (trail) {\n        if (trail.isExtensionOf(baseTrail, true)) {\n          var element = layer.idElementMap[trail.getUniqueId()];\n          var node = trail.lastNode();\n          node.updateCSSTransform(trail.getTransform(), element);\n        }\n      }, false, this.scene);\n    },\n    notifyBoundsAccuracyChange: function (instance) {\n    }\n  });\n  return DOMLayer;\n});","\ndefine('SCENERY/layers/LayerBoundary',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.LayerBoundary = function LayerBoundary() {\n    this.previousLayerType = null;\n    this.nextLayerType = null;\n    this.previousPaintedTrail = null;\n    this.nextPaintedTrail = null;\n  };\n  var LayerBoundary = scenery.LayerBoundary;\n  LayerBoundary.prototype = {\n    constructor: LayerBoundary,\n    hasPrevious: function () {\n      return !!this.previousPaintedTrail;\n    },\n    hasNext: function () {\n      return !!this.nextPaintedTrail;\n    },\n    reindex: function () {\n      this.previousPaintedTrail && this.previousPaintedTrail.reindex();\n      this.nextPaintedTrail && this.nextPaintedTrail.reindex();\n    },\n    equivalentPreviousTrail: function (trail) {\n      if (this.previousPaintedTrail && trail) {\n        this.previousPaintedTrail.reindex();\n        return this.previousPaintedTrail.equals(trail);\n      } else {\n        return this.previousPaintedTrail === trail;\n      }\n    },\n    equivalentNextTrail: function (trail) {\n      if (this.nextPaintedTrail && trail) {\n        this.nextPaintedTrail.reindex();\n        return this.nextPaintedTrail.equals(trail);\n      } else {\n        return this.nextPaintedTrail === trail;\n      }\n    },\n    toString: function () {\n      return 'boundary:' + '\\n    types:    ' + (this.previousLayerType ? this.previousLayerType.name : '') + ' => ' + (this.nextLayerType ? this.nextLayerType.name : '') + '\\n    trails:   ' + (this.previousPaintedTrail ? this.previousPaintedTrail.getUniqueId() : '') + ' => ' + (this.nextPaintedTrail ? this.nextPaintedTrail.getUniqueId() : '');\n    }\n  };\n  return LayerBoundary;\n});","\ndefine('SCENERY/layers/LayerBuilder',['require','SCENERY/scenery','SCENERY/layers/LayerBoundary','SCENERY/util/Trail','SCENERY/util/TrailPointer'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/layers/LayerBoundary');\n  require('SCENERY/util/Trail');\n  require('SCENERY/util/TrailPointer');\n  scenery.LayerBuilder = function LayerBuilder(scene, previousLayerType, previousPaintedTrail, nextPaintedTrail) {\n    this.layerTypeStack = [];\n    this.boundaries = [];\n    this.pendingBoundary = new scenery.LayerBoundary();\n    this.pendingBoundary.previousLayerType = previousLayerType;\n    this.pendingBoundary.previousPaintedTrail = previousPaintedTrail;\n    this.currentLayerType = previousLayerType;\n    this.layerChangePending = previousPaintedTrail === null;\n    if (previousPaintedTrail) {\n      this.startPointer = new scenery.TrailPointer(previousPaintedTrail.copy(), true);\n      this.startPointer.nestedForwards();\n    } else {\n      this.startPointer = new scenery.TrailPointer(new scenery.Trail(scene), true);\n    }\n    if (nextPaintedTrail) {\n      this.endPointer = new scenery.TrailPointer(nextPaintedTrail.copy(), true);\n    } else {\n      this.endPointer = new scenery.TrailPointer(new scenery.Trail(scene), false);\n    }\n    this.includesEndTrail = nextPaintedTrail !== null;\n  };\n  var LayerBuilder = scenery.LayerBuilder;\n  LayerBuilder.prototype = {\n    constructor: LayerBuilder,\n    prepareLayerStack: function () {\n      var pointer = new scenery.TrailPointer(new scenery.Trail(this.startPointer.trail.rootNode()), true);\n      var targetLength = this.startPointer.trail.length - (this.startPointer.isBefore ? 1 : 0);\n      while (pointer.trail.length <= targetLength) {\n        var node = pointer.trail.lastNode();\n        if (node.layerStrategy.hasPreferredLayerType(pointer, this)) {\n          this.pushPreferredLayerType(node.layerStrategy.getPreferredLayerType(pointer, this));\n        }\n        if (pointer.trail.length < this.startPointer.trail.nodes.length) {\n          pointer.trail.addDescendant(this.startPointer.trail.nodes[pointer.trail.length]);\n        } else {\n          break;\n        }\n      }\n    },\n    run: function () {\n      var builder = this;\n      this.prepareLayerStack();\n      builder.startPointer.depthFirstUntil(builder.endPointer, function (pointer) {\n        var node = pointer.trail.lastNode();\n        if (pointer.isBefore) {\n          node.layerStrategy.enter(pointer, builder);\n        } else {\n          node.layerStrategy.exit(pointer, builder);\n        }\n      }, false);\n      if (!this.includesEndTrail) {\n        this.layerChange(null);\n      }\n    },\n    layerChange: function (paintedPointer) {\n      this.layerChangePending = false;\n      var confirmedBoundary = this.pendingBoundary;\n      confirmedBoundary.nextPaintedTrail = paintedPointer ? paintedPointer.trail.copy() : null;\n      this.boundaries.push(confirmedBoundary);\n      this.pendingBoundary = new scenery.LayerBoundary();\n      this.pendingBoundary.previousLayerType = confirmedBoundary.nextLayerType;\n      this.pendingBoundary.previousPaintedTrail = confirmedBoundary.nextPaintedTrail;\n    },\n    switchToType: function (pointer, layerType) {\n      this.currentLayerType = layerType;\n      this.pendingBoundary.nextLayerType = layerType;\n      this.layerChangePending = true;\n    },\n    markPainted: function (pointer) {\n      if (this.layerChangePending) {\n        this.layerChange(pointer);\n      } else {\n        this.pendingBoundary.previousPaintedTrail = pointer.trail.copy();\n      }\n    },\n    getCurrentLayerType: function () {\n      return this.currentLayerType;\n    },\n    pushPreferredLayerType: function (layerType) {\n      this.layerTypeStack.push(layerType);\n    },\n    popPreferredLayerType: function () {\n      this.layerTypeStack.pop();\n    },\n    getPreferredLayerType: function () {\n      if (this.layerTypeStack.length !== 0) {\n        return this.layerTypeStack[this.layerTypeStack.length - 1];\n      } else {\n        return null;\n      }\n    },\n    bestPreferredLayerTypeFor: function (renderers) {\n      for (var i = this.layerTypeStack.length - 1; i >= 0; i--) {\n        var preferredType = this.layerTypeStack[i];\n        var k = renderers.length;\n        while (k--) {\n          if (preferredType.supportsRenderer(renderers[k])) {\n            return preferredType;\n          }\n        }\n      }\n      return null;\n    }\n  };\n  return LayerBuilder;\n});","\ndefine('SCENERY/layers/LayerType',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.LayerType = function LayerType(Constructor, name, renderer, args) {\n    this.Constructor = Constructor;\n    this.name = name;\n    this.renderer = renderer;\n    this.args = args;\n  };\n  var LayerType = scenery.LayerType;\n  LayerType.prototype = {\n    constructor: LayerType,\n    supportsRenderer: function (renderer) {\n      return this.renderer === renderer;\n    },\n    supportsNode: function (node) {\n      var supportedRenderers = node._supportedRenderers;\n      var i = supportedRenderers.length;\n      while (i--) {\n        if (this.supportsRenderer(supportedRenderers[i])) {\n          return true;\n        }\n      }\n      return false;\n    },\n    createLayer: function (args) {\n      var Constructor = this.Constructor;\n      return new Constructor(_.extend({}, args, this.args));\n    }\n  };\n  return LayerType;\n});","\ndefine('SCENERY/layers/SVGLayer',['require','PHET_CORE/inherit','DOT/Bounds2','DOT/Transform3','DOT/Matrix3','SCENERY/scenery','SCENERY/layers/Layer','SCENERY/util/Trail','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Transform3 = require('DOT/Transform3');\n  var Matrix3 = require('DOT/Matrix3');\n  var scenery = require('SCENERY/scenery');\n  var Layer = require('SCENERY/layers/Layer');\n  require('SCENERY/util/Trail');\n  require('SCENERY/util/Util');\n  var svgns = 'http://www.w3.org/2000/svg';\n  var xlinkns = 'http://www.w3.org/1999/xlink';\n  scenery.SVGLayer = function SVGLayer(args) {\n    sceneryLayerLog && sceneryLayerLog('SVGLayer constructor');\n    var $main = args.$main;\n    this.scene = args.scene;\n    this.svg = document.createElementNS(svgns, 'svg');\n    this.g = document.createElementNS(svgns, 'g');\n    this.defs = document.createElementNS(svgns, 'defs');\n    var width = args.scene.sceneBounds.width;\n    var height = args.scene.sceneBounds.height;\n    this.svg.appendChild(this.defs);\n    this.svg.appendChild(this.g);\n    this.$svg = $(this.svg);\n    this.svg.setAttribute('width', width);\n    this.svg.setAttribute('height', height);\n    this.svg.setAttribute('stroke-miterlimit', 10);\n    this.svg.style.position = 'absolute';\n    this.svg.style.left = '0';\n    this.svg.style.top = '0';\n    this.svg.style.clip = 'rect(0px,' + width + 'px,' + height + 'px,0px)';\n    this.svg.style['pointer-events'] = 'none';\n    $main.append(this.svg);\n    this.isSVGLayer = true;\n    this.idFragmentMap = {};\n    this.idGroupMap = {};\n    Layer.call(this, args);\n    this.baseTransformDirty = true;\n    this.baseTransformChange = true;\n  };\n  var SVGLayer = scenery.SVGLayer;\n  var scratchBounds1 = Bounds2.NOTHING.copy();\n  inherit(Layer, SVGLayer, {\n    addInstance: function (instance) {\n      var trail = instance.trail;\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' addInstance: ' + trail.toString());\n      sceneryAssert && sceneryAssert(!(trail.getUniqueId() in this.idFragmentMap), 'Already contained that trail!');\n      sceneryAssert && sceneryAssert(trail.isPainted(), 'Don\\'t add nodes without isPainted() to SVGLayer');\n      Layer.prototype.addInstance.call(this, instance);\n      var subtrail = this.baseTrail.copy();\n      var lastId = null;\n      while (subtrail.length <= trail.length) {\n        var id = subtrail.getUniqueId();\n        var group = this.idGroupMap[id];\n        if (!group) {\n          if (lastId) {\n            group = document.createElementNS(svgns, 'g');\n            this.applyTransform(subtrail.lastNode().getTransform(), group);\n            this.insertGroupIntoParent(group, this.idGroupMap[lastId], subtrail);\n          } else {\n            sceneryAssert && sceneryAssert(subtrail.lastNode() === this.baseNode);\n            group = this.g;\n            this.initializeBase();\n            this.refreshBaseTransform();\n          }\n          this.updateNodeGroup(subtrail.lastNode(), group);\n          group.referenceCount = 0;\n          group.trail = subtrail.copy();\n          this.idGroupMap[id] = group;\n        }\n        group.referenceCount++;\n        if (subtrail.length === trail.length) {\n          break;\n        }\n        subtrail.addDescendant(trail.nodes[subtrail.length]);\n        lastId = id;\n      }\n      var node = trail.lastNode();\n      var trailId = trail.getUniqueId();\n      var nodeGroup = this.idGroupMap[trailId];\n      var svgFragment = node.createSVGFragment(this.svg, this.defs, nodeGroup);\n      this.updateNode(node, svgFragment);\n      this.updateNodeGroup(node, nodeGroup);\n      this.idFragmentMap[trailId] = svgFragment;\n      nodeGroup.appendChild(svgFragment);\n    },\n    removeInstance: function (instance) {\n      var trail = instance.trail;\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' removeInstance: ' + trail.toString());\n      sceneryAssert && sceneryAssert(trail.getUniqueId() in this.idFragmentMap, 'Did not contain that trail!');\n      Layer.prototype.removeInstance.call(this, instance);\n      var trailId = trail.getUniqueId();\n      var node = trail.lastNode();\n      var fragment = this.idFragmentMap[trailId];\n      this.idGroupMap[trailId].removeChild(fragment);\n      delete this.idFragmentMap[trailId];\n      if (node.removeSVGDefs) {\n        node.removeSVGDefs(this.svg, this.defs);\n      }\n      var subtrail = trail.copy();\n      while (subtrail.length > this.baseTrail.length) {\n        var id = subtrail.getUniqueId();\n        var group = this.idGroupMap[id];\n        group.referenceCount--;\n        if (group.referenceCount === 0) {\n          group.parentNode.removeChild(group);\n          delete group.trail;\n          delete this.idGroupMap[id];\n        }\n        subtrail.removeDescendant();\n      }\n      this.g.referenceCount--;\n    },\n    insertGroupIntoParent: function (group, parentGroup, subtrail) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' insertGroupIntoParent subtrail:' + subtrail.toString());\n      if (!parentGroup.childNodes.length) {\n        parentGroup.appendChild(group);\n      } else {\n        var afterNode = null;\n        var indexIndex = subtrail.length - 2;\n        var ourIndex = subtrail.indices[indexIndex];\n        var i;\n        for (i = 0; i < parentGroup.childNodes.length; i++) {\n          var child = parentGroup.childNodes[i];\n          if (child.trail) {\n            child.trail.reindex();\n            var otherIndex = child.trail.indices[indexIndex];\n            if (otherIndex > ourIndex) {\n              break;\n            }\n          }\n        }\n        if (i === parentGroup.childNodes.length) {\n          parentGroup.appendChild(group);\n        } else {\n          parentGroup.insertBefore(group, parentGroup.childNodes[i]);\n        }\n      }\n    },\n    updateNode: function (node, fragment) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' updateNode: ' + node.constructor.name + ' #' + node.id);\n      if (node.updateSVGFragment) {\n        node.updateSVGFragment(fragment);\n      }\n      if (node.updateSVGDefs) {\n        node.updateSVGDefs(this.svg, this.defs);\n      }\n    },\n    updateNodeGroup: function (node, group) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' updateNodeGroup: ' + node.constructor.name + ' #' + node.id);\n      this.updateGroupVisibility(node, group);\n      this.updateGroupOpacity(node, group);\n    },\n    updateGroupVisibility: function (node, group) {\n      if (node === this.baseNode ? this.baseTrail.isVisible() : node.isVisible()) {\n        group.style.display = 'inherit';\n      } else {\n        group.style.display = 'none';\n      }\n    },\n    updateGroupOpacity: function (node, group) {\n      var opacity;\n      if (node === this.baseNode) {\n        opacity = this.baseTrail.getOpacity();\n      } else {\n        opacity = node.getOpacity();\n      }\n      group.setAttribute('opacity', opacity);\n    },\n    getFragmentFromInstance: function (instance) {\n      return this.idFragmentMap[instance.trail.getUniqueId()];\n    },\n    getGroupFromInstance: function (instance) {\n      return this.idGroupMap[instance.trail.getUniqueId()];\n    },\n    applyTransform: function (transform, group) {\n      if (transform.isIdentity()) {\n        if (group.hasAttribute('transform')) {\n          group.removeAttribute('transform');\n        }\n      } else {\n        group.setAttribute('transform', transform.getMatrix().getSVGTransform());\n      }\n    },\n    render: function (scene, args) {\n      this.refreshBaseTransform();\n    },\n    refreshBaseTransform: function () {\n      if (this.baseTransformDirty) {\n        var includesBaseTransformChange = this.baseTransformChange;\n        this.updateBaseTransform(includesBaseTransformChange);\n        this.baseTransformDirty = false;\n        this.baseTransformChange = false;\n      }\n    },\n    dispose: function () {\n      Layer.prototype.dispose.call(this);\n      this.svg.parentNode.removeChild(this.svg);\n    },\n    markBaseTransformDirty: function (changed) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' markBaseTransformDirty');\n      var baseTransformChange = this.baseTransformChange || !!changed;\n      this.baseTransformDirty = true;\n      this.baseTransformChange = baseTransformChange;\n    },\n    initializeBase: function () {\n      if (this.cssTransform) {\n        this.baseNodeInternalBoundsChange();\n      } else {\n        this.markBaseTransformDirty(true);\n      }\n    },\n    baseNodeInternalBoundsChange: function () {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' baseNodeInternalBoundsChange');\n      if (this.cssTransform) {\n        var internalBounds = scratchBounds1;\n        internalBounds.setBounds(this.baseNode.getBounds());\n        this.baseNode.transformBoundsFromParentToLocal(internalBounds);\n        var padding = scenery.Layer.cssTransformPadding;\n        if (!internalBounds.isEmpty()) {\n          this.baseNodeTransform.set(Matrix3.translation(Math.ceil(-internalBounds.minX + padding), Math.ceil(-internalBounds.minY + padding)));\n          var baseNodeInteralBounds = internalBounds.transform(this.baseNodeTransform.getMatrix());\n          sceneryAssert && sceneryAssert(baseNodeInteralBounds.minX >= 0 && baseNodeInteralBounds.minY >= 0);\n          this.updateContainerDimensions(Math.ceil(baseNodeInteralBounds.maxX + padding), Math.ceil(baseNodeInteralBounds.maxY + padding));\n        }\n        this.markBaseTransformDirty(true);\n      } else if (this.usesPartialCSSTransforms) {\n        this.markBaseTransformDirty(true);\n      }\n    },\n    updateContainerDimensions: function (width, height) {\n      this.svg.setAttribute('width', width);\n      this.svg.setAttribute('height', height);\n    },\n    updateBaseTransform: function (includesBaseTransformChange) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' updateBaseTransform');\n      var transform = this.baseTrail.getTransform();\n      if (this.cssTransform) {\n        scenery.Util.applyCSSTransform(transform.getMatrix().timesMatrix(this.baseNodeTransform.getInverse()), this.svg);\n        if (includesBaseTransformChange) {\n          this.applyTransform(this.baseNodeTransform, this.g);\n        }\n      } else if (this.usesPartialCSSTransforms) {\n        var cssTransform = new Transform3();\n        var matrix = transform.getMatrix();\n        if (this.cssTranslation) {\n          cssTransform.append(Matrix3.translation(matrix.m02(), matrix.m12()));\n        }\n        if (this.cssRotation) {\n          cssTransform.append(Matrix3.rotation2(matrix.getRotation()));\n        }\n        if (this.cssScale) {\n          var scaleVector = matrix.getScaleVector();\n          cssTransform.append(Matrix3.scaling(scaleVector.x, scaleVector.y));\n        }\n        transform.prepend(cssTransform.getInverse());\n        var padding = scenery.Layer.cssTransformPadding;\n        var internalBounds = this.baseNode.parentToLocalBounds(this.baseNode.getBounds());\n        var mappedBounds = transform.transformBounds2(internalBounds);\n        var translation = Matrix3.translation(Math.ceil(-mappedBounds.minX + padding), Math.ceil(-mappedBounds.minY + padding));\n        var inverseTranslation = translation.inverted();\n        this.updateContainerDimensions(Math.ceil(mappedBounds.getWidth() + 2 * padding), Math.ceil(mappedBounds.getHeight() + 2 * padding));\n        cssTransform.append(inverseTranslation);\n        transform.prepend(translation);\n        scenery.Util.applyCSSTransform(cssTransform.getMatrix(), this.svg);\n        this.applyTransform(transform, this.g);\n      } else {\n        this.applyTransform(transform, this.g);\n      }\n    },\n    applyTransformationMatrix: function (matrix) {\n    },\n    getContainer: function () {\n      return this.svg;\n    },\n    reindex: function (zIndex) {\n      Layer.prototype.reindex.call(this, zIndex);\n      if (this.zIndex !== zIndex) {\n        this.svg.style.zIndex = zIndex;\n        this.zIndex = zIndex;\n      }\n      return zIndex + 1;\n    },\n    pushClipShape: function (shape) {\n    },\n    popClipShape: function () {\n    },\n    getSVGString: function () {\n      return $('<div>').append(this.$svg.clone()).html();\n    },\n    renderToCanvas: function (canvas, context, delayCounts) {\n      this.applyTransform(this.baseTrail.getTransform(), this.g);\n      if (window.canvg) {\n        delayCounts.increment();\n        canvg(canvas, this.getSVGString(), {\n          ignoreMouse: true,\n          ignoreAnimation: true,\n          ignoreDimensions: true,\n          ignoreClear: true,\n          renderCallback: function () {\n            delayCounts.decrement();\n          }\n        });\n      } else {\n        var DOMURL = window.URL || window.webkitURL || window;\n        var img = new Image();\n        var raw = this.getSVGString();\n        console.log(raw);\n        var svg = new Blob([raw], { type: 'image/svg+xml;charset=utf-8' });\n        var url = DOMURL.createObjectURL(svg);\n        delayCounts.increment();\n        img.onload = function () {\n          context.drawImage(img, 0, 0);\n          DOMURL.revokeObjectURL(url);\n          delayCounts.decrement();\n        };\n        img.src = url;\n        throw new Error('this implementation hits Chrome bugs, won\\'t work on IE9/10, etc. deprecated');\n      }\n      this.updateBaseTransform();\n    },\n    getName: function () {\n      return 'svg';\n    },\n    notifyVisibilityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' notifyVisibilityChange: ' + instance.trail.toString());\n      var group = this.getGroupFromInstance(instance);\n      if (group) {\n        this.updateGroupVisibility(instance.getNode(), group);\n      } else if (this.baseNode !== this.scene) {\n        this.updateGroupVisibility(this.baseNode, this.getGroupFromInstance(this.baseTrail.getInstance()));\n      }\n    },\n    notifyOpacityChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' notifyOpacityChange: ' + instance.trail.toString());\n      var group = this.getGroupFromInstance(instance);\n      if (group) {\n        this.updateGroupOpacity(instance.getNode(), group);\n      } else if (this.baseNode !== this.scene) {\n        this.updateGroupOpacity(this.baseNode, this.getGroupFromInstance(this.baseTrail.getInstance()));\n      }\n    },\n    notifyBeforeSelfChange: function (instance) {\n    },\n    notifyBeforeSubtreeChange: function (instance) {\n    },\n    notifyDirtySelfPaint: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' notifyDirtySelfPaint: ' + instance.trail.toString());\n      var fragment = this.getFragmentFromInstance(instance);\n      if (fragment) {\n        var node = instance.getNode();\n        if (node.updateSVGFragment) {\n          node.updateSVGFragment(fragment);\n        }\n        if (node.updateSVGDefs) {\n          node.updateSVGDefs(this.svg, this.defs);\n        }\n      }\n    },\n    notifyDirtySubtreePaint: function (instance) {\n      if (instance.layer === this) {\n        this.notifyDirtySelfPaint(instance);\n      }\n    },\n    notifyTransformChange: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('SVGLayer #' + this.id + ' notifyTransformChange: ' + instance.trail.toString());\n      var node = instance.node;\n      var trail = instance.trail;\n      if (trail.lastNode() === this.baseNode) {\n        this.markBaseTransformDirty();\n      } else if (_.contains(trail.nodes, this.baseNode)) {\n        var group = this.idGroupMap[trail.getUniqueId()];\n        this.applyTransform(node.getTransform(), group);\n      } else {\n        this.markBaseTransformDirty();\n      }\n    },\n    notifyBoundsAccuracyChange: function (instance) {\n    }\n  });\n  return SVGLayer;\n});","\ndefine('SCENERY/layers/Renderer',['require','SCENERY/scenery','SCENERY/layers/LayerType','SCENERY/layers/CanvasLayer','SCENERY/layers/DOMLayer','SCENERY/layers/SVGLayer'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/layers/LayerType');\n  require('SCENERY/layers/CanvasLayer');\n  require('SCENERY/layers/DOMLayer');\n  require('SCENERY/layers/SVGLayer');\n  var defaults = {};\n  scenery.Renderer = function Renderer(layerConstructor, name, defaultOptions) {\n    this.layerConstructor = layerConstructor;\n    this.name = name;\n    this.defaultOptions = defaultOptions;\n    this.defaultLayerType = this.createLayerType({});\n  };\n  var Renderer = scenery.Renderer;\n  Renderer.prototype = {\n    constructor: Renderer,\n    createLayerType: function (rendererOptions) {\n      return new scenery.LayerType(this.layerConstructor, this.name, this, _.extend({}, this.defaultOptions, rendererOptions));\n    }\n  };\n  Renderer.Canvas = new Renderer(scenery.CanvasLayer, 'canvas', {});\n  Renderer.DOM = new Renderer(scenery.DOMLayer, 'dom', {});\n  Renderer.SVG = new Renderer(scenery.SVGLayer, 'svg', {});\n  scenery.CanvasDefaultLayerType = Renderer.Canvas.defaultLayerType;\n  scenery.DOMDefaultLayerType = Renderer.DOM.defaultLayerType;\n  scenery.SVGDefaultLayerType = Renderer.SVG.defaultLayerType;\n  Renderer.canvas = Renderer.Canvas;\n  Renderer.dom = Renderer.DOM;\n  Renderer.svg = Renderer.SVG;\n  Renderer.webgl = Renderer.WebGL;\n  return Renderer;\n});","\ndefine('SCENERY/nodes/CanvasNode',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/layers/Renderer'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var Renderer = require('SCENERY/layers/Renderer');\n  scenery.CanvasNode = function CanvasNode(options) {\n    Node.call(this, options);\n    if (options.canvasBounds) {\n      this.setCanvasBounds(options.canvasBounds);\n    }\n  };\n  var CanvasNode = scenery.CanvasNode;\n  inherit(Node, CanvasNode, {\n    setCanvasBounds: function (selfBounds) {\n      this.invalidateSelf(selfBounds);\n    },\n    isPainted: function () {\n      return true;\n    },\n    paintCanvas: function (wrapper) {\n      throw new Error('CanvasNode needs paintCanvas implemented');\n    },\n    containsPointSelf: function (point) {\n      return false;\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.CanvasNode( {' + propLines + '} )';\n    }\n  });\n  CanvasNode.prototype._supportedRenderers = [Renderer.Canvas];\n  return CanvasNode;\n});","\ndefine('SCENERY/nodes/Fillable',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.Fillable = function Fillable(type) {\n    var proto = type.prototype;\n    proto.initializeFillable = function () {\n      this._fill = null;\n      var that = this;\n      this._fillListener = function () {\n        that.invalidatePaint();\n        that.invalidateFill();\n      };\n    };\n    proto.hasFill = function () {\n      return this._fill !== null;\n    };\n    proto.getFill = function () {\n      return this._fill;\n    };\n    proto.setFill = function (fill) {\n      if (this.getFill() !== fill) {\n        var hasInstances = this._instances.length > 0;\n        if (hasInstances && this._fill && this._fill.removeChangeListener) {\n          this._fill.removeChangeListener(this._fillListener);\n        }\n        this._fill = fill;\n        if (hasInstances && this._fill && this._fill.addChangeListener) {\n          this._fill.addChangeListener(this._fillListener);\n        }\n        this.invalidatePaint();\n        this.invalidateFill();\n      }\n      return this;\n    };\n    var superFirstInstanceAdded = proto.firstInstanceAdded;\n    proto.firstInstanceAdded = function () {\n      if (this._fill && this._fill.addChangeListener) {\n        this._fill.addChangeListener(this._fillListener);\n      }\n      if (superFirstInstanceAdded) {\n        superFirstInstanceAdded.call(this);\n      }\n    };\n    var superLastInstanceRemoved = proto.lastInstanceRemoved;\n    proto.lastInstanceRemoved = function () {\n      if (this._fill && this._fill.removeChangeListener) {\n        this._fill.removeChangeListener(this._fillListener);\n      }\n      if (superLastInstanceRemoved) {\n        superLastInstanceRemoved.call(this);\n      }\n    };\n    proto.beforeCanvasFill = function (wrapper) {\n      wrapper.setFillStyle(this._fill);\n      if (this._fill.transformMatrix) {\n        wrapper.context.save();\n        this._fill.transformMatrix.canvasAppendTransform(wrapper.context);\n      }\n    };\n    proto.afterCanvasFill = function (wrapper) {\n      if (this._fill.transformMatrix) {\n        wrapper.context.restore();\n      }\n    };\n    proto.getSVGFillStyle = function () {\n      var style = 'fill: ';\n      if (!this._fill) {\n        style += 'none;';\n      } else if (this._fill.toCSS) {\n        style += this._fill.toCSS() + ';';\n      } else if (this._fill.getSVGDefinition) {\n        style += 'url(#fill' + this.getId() + ');';\n      } else {\n        style += this._fill + ';';\n      }\n      return style;\n    };\n    proto.isFillDOMCompatible = function () {\n      return !this._fill || !this._fill.getSVGDefinition;\n    };\n    proto.getCSSFill = function () {\n      sceneryAssert && sceneryAssert(this.isFillDOMCompatible());\n      return this._fill ? this._fill.toCSS ? this._fill.toCSS() : this._fill : 'transparent';\n    };\n    proto.addSVGFillDef = function (svg, defs) {\n      var fill = this.getFill();\n      var fillId = 'fill' + this.getId();\n      if (fill && fill.getSVGDefinition) {\n        defs.appendChild(fill.getSVGDefinition(fillId));\n      }\n    };\n    proto.removeSVGFillDef = function (svg, defs) {\n      var fillId = 'fill' + this.getId();\n      var oldFillDef = svg.getElementById(fillId);\n      if (oldFillDef) {\n        defs.removeChild(oldFillDef);\n      }\n    };\n    proto.appendFillablePropString = function (spaces, result) {\n      if (this._fill) {\n        if (result) {\n          result += ',\\n';\n        }\n        if (typeof this._fill === 'string') {\n          result += spaces + 'fill: \\'' + this._fill + '\\'';\n        } else {\n          result += spaces + 'fill: ' + this._fill.toString();\n        }\n      }\n      return result;\n    };\n    proto._mutatorKeys = ['fill'].concat(proto._mutatorKeys);\n    Object.defineProperty(proto, 'fill', {\n      set: proto.setFill,\n      get: proto.getFill\n    });\n    if (!proto.invalidateFill) {\n      proto.invalidateFill = function () {\n      };\n    }\n  };\n  var Fillable = scenery.Fillable;\n  return Fillable;\n});","\ndefine('SCENERY/nodes/Strokable',['require','SCENERY/scenery','KITE/util/LineStyles'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var LineStyles = require('KITE/util/LineStyles');\n  scenery.Strokable = function Strokable(type) {\n    var proto = type.prototype;\n    proto.initializeStrokable = function () {\n      this._stroke = null;\n      this._lineDrawingStyles = new LineStyles();\n      var that = this;\n      this._strokeListener = function () {\n        that.invalidatePaint();\n        that.invalidateStroke();\n      };\n    };\n    proto.hasStroke = function () {\n      return this._stroke !== null;\n    };\n    proto.getLineWidth = function () {\n      return this._lineDrawingStyles.lineWidth;\n    };\n    proto.setLineWidth = function (lineWidth) {\n      if (this.getLineWidth() !== lineWidth) {\n        this.markOldSelfPaint();\n        this._lineDrawingStyles.lineWidth = lineWidth;\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    proto.getLineCap = function () {\n      return this._lineDrawingStyles.lineCap;\n    };\n    proto.setLineCap = function (lineCap) {\n      if (this._lineDrawingStyles.lineCap !== lineCap) {\n        this.markOldSelfPaint();\n        this._lineDrawingStyles.lineCap = lineCap;\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    proto.getLineJoin = function () {\n      return this._lineDrawingStyles.lineJoin;\n    };\n    proto.setLineJoin = function (lineJoin) {\n      if (this._lineDrawingStyles.lineJoin !== lineJoin) {\n        this.markOldSelfPaint();\n        this._lineDrawingStyles.lineJoin = lineJoin;\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    proto.getLineDash = function () {\n      return this._lineDrawingStyles.lineDash;\n    };\n    proto.setLineDash = function (lineDash) {\n      if (this._lineDrawingStyles.lineDash !== lineDash) {\n        this.markOldSelfPaint();\n        this._lineDrawingStyles.lineDash = lineDash;\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    proto.getLineDashOffset = function () {\n      return this._lineDrawingStyles.lineDashOffset;\n    };\n    proto.setLineDashOffset = function (lineDashOffset) {\n      if (this._lineDrawingStyles.lineDashOffset !== lineDashOffset) {\n        this.markOldSelfPaint();\n        this._lineDrawingStyles.lineDashOffset = lineDashOffset;\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    proto.setLineStyles = function (lineStyles) {\n      this.markOldSelfPaint();\n      this._lineDrawingStyles = lineStyles;\n      this.invalidateStroke();\n      return this;\n    };\n    proto.getLineStyles = function () {\n      return this._lineDrawingStyles;\n    };\n    proto.getStroke = function () {\n      return this._stroke;\n    };\n    proto.setStroke = function (stroke) {\n      if (this.getStroke() !== stroke) {\n        this.markOldSelfPaint();\n        var hasInstances = this._instances.length > 0;\n        if (hasInstances && this._stroke && this._stroke.removeChangeListener) {\n          this._stroke.removeChangeListener(this._strokeListener);\n        }\n        this._stroke = stroke;\n        if (hasInstances && this._stroke && this._stroke.addChangeListener) {\n          this._stroke.addChangeListener(this._strokeListener);\n        }\n        this.invalidateStroke();\n      }\n      return this;\n    };\n    var superFirstInstanceAdded = proto.firstInstanceAdded;\n    proto.firstInstanceAdded = function () {\n      if (this._stroke && this._stroke.addChangeListener) {\n        this._stroke.addChangeListener(this._strokeListener);\n      }\n      if (superFirstInstanceAdded) {\n        superFirstInstanceAdded.call(this);\n      }\n    };\n    var superLastInstanceRemoved = proto.lastInstanceRemoved;\n    proto.lastInstanceRemoved = function () {\n      if (this._stroke && this._stroke.removeChangeListener) {\n        this._stroke.removeChangeListener(this._strokeListener);\n      }\n      if (superLastInstanceRemoved) {\n        superLastInstanceRemoved.call(this);\n      }\n    };\n    proto.beforeCanvasStroke = function (wrapper) {\n      wrapper.setStrokeStyle(this._stroke);\n      wrapper.setLineWidth(this.getLineWidth());\n      wrapper.setLineCap(this.getLineCap());\n      wrapper.setLineJoin(this.getLineJoin());\n      wrapper.setLineDash(this.getLineDash());\n      wrapper.setLineDashOffset(this.getLineDashOffset());\n      if (this._stroke.transformMatrix) {\n        wrapper.context.save();\n        this._stroke.transformMatrix.canvasAppendTransform(wrapper.context);\n      }\n    };\n    proto.afterCanvasStroke = function (wrapper) {\n      if (this._stroke.transformMatrix) {\n        wrapper.context.restore();\n      }\n    };\n    proto.getSVGStrokeStyle = function () {\n      if (!this._stroke) {\n        return 'stroke: none;';\n      }\n      var style = 'stroke: ';\n      if (this._stroke.toCSS) {\n        style += this._stroke.toCSS() + ';';\n      } else if (this._stroke.getSVGDefinition) {\n        style += 'url(#stroke' + this.getId() + ');';\n      } else {\n        style += this._stroke + ';';\n      }\n      style += 'stroke-width: ' + this.getLineWidth() + ';';\n      style += 'stroke-linecap: ' + this.getLineCap() + ';';\n      style += 'stroke-linejoin: ' + this.getLineJoin() + ';';\n      if (this.getLineDash()) {\n        style += 'stroke-dasharray: ' + this.getLineDash().join(',') + ';';\n        style += 'stroke-dashoffset: ' + this.getLineDashOffset() + ';';\n      }\n      return style;\n    };\n    proto.addSVGStrokeDef = function (svg, defs) {\n      var stroke = this.getStroke();\n      var strokeId = 'stroke' + this.getId();\n      if (stroke && stroke.getSVGDefinition) {\n        defs.appendChild(stroke.getSVGDefinition(strokeId));\n      }\n    };\n    proto.removeSVGStrokeDef = function (svg, defs) {\n      var strokeId = 'stroke' + this.getId();\n      var oldStrokeDef = svg.getElementById(strokeId);\n      if (oldStrokeDef) {\n        defs.removeChild(oldStrokeDef);\n      }\n    };\n    proto.appendStrokablePropString = function (spaces, result) {\n      var self = this;\n      function addProp(key, value, nowrap) {\n        if (result) {\n          result += ',\\n';\n        }\n        if (!nowrap && typeof value === 'string') {\n          result += spaces + key + ': \\'' + value + '\\'';\n        } else {\n          result += spaces + key + ': ' + value;\n        }\n      }\n      if (this._stroke) {\n        var defaultStyles = new LineStyles();\n        if (typeof this._stroke === 'string') {\n          addProp('stroke', this._stroke);\n        } else {\n          addProp('stroke', this._stroke.toString(), true);\n        }\n        _.each([\n          'lineWidth',\n          'lineCap',\n          'lineJoin',\n          'lineDashOffset'\n        ], function (prop) {\n          if (self[prop] !== defaultStyles[prop]) {\n            addProp(prop, self[prop]);\n          }\n        });\n        if (this.lineDash) {\n          addProp('lineDash', JSON.stringify(this.lineDash), true);\n        }\n      }\n      return result;\n    };\n    proto._mutatorKeys = [\n      'stroke',\n      'lineWidth',\n      'lineCap',\n      'lineJoin',\n      'lineDash',\n      'lineDashOffset'\n    ].concat(proto._mutatorKeys);\n    Object.defineProperty(proto, 'stroke', {\n      set: proto.setStroke,\n      get: proto.getStroke\n    });\n    Object.defineProperty(proto, 'lineWidth', {\n      set: proto.setLineWidth,\n      get: proto.getLineWidth\n    });\n    Object.defineProperty(proto, 'lineCap', {\n      set: proto.setLineCap,\n      get: proto.getLineCap\n    });\n    Object.defineProperty(proto, 'lineJoin', {\n      set: proto.setLineJoin,\n      get: proto.getLineJoin\n    });\n    Object.defineProperty(proto, 'lineDash', {\n      set: proto.setLineDash,\n      get: proto.getLineDash\n    });\n    Object.defineProperty(proto, 'lineDashOffset', {\n      set: proto.setLineDashOffset,\n      get: proto.getLineDashOffset\n    });\n    if (!proto.invalidateStroke) {\n      proto.invalidateStroke = function () {\n      };\n    }\n  };\n  var Strokable = scenery.Strokable;\n  return Strokable;\n});","\ndefine('SCENERY/nodes/Path',['require','PHET_CORE/inherit','KITE/Shape','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/layers/Renderer','SCENERY/nodes/Fillable','SCENERY/nodes/Strokable','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Shape = require('KITE/Shape');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var Renderer = require('SCENERY/layers/Renderer');\n  var Fillable = require('SCENERY/nodes/Fillable');\n  var Strokable = require('SCENERY/nodes/Strokable');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  scenery.Path = function Path(shape, options) {\n    this._shape = null;\n    options = options || {};\n    this.initializeFillable();\n    this.initializeStrokable();\n    Node.call(this);\n    this.setShape(shape);\n    this.mutate(options);\n  };\n  var Path = scenery.Path;\n  inherit(Node, Path, {\n    setShape: function (shape) {\n      if (this._shape !== shape) {\n        if (typeof shape === 'string') {\n          shape = new Shape(shape);\n        }\n        this._shape = shape;\n        this.invalidateShape();\n      }\n      return this;\n    },\n    getShape: function () {\n      return this._shape;\n    },\n    invalidateShape: function () {\n      this.markOldSelfPaint();\n      if (this.hasShape()) {\n        this.invalidateSelf(this.computeShapeBounds());\n        this.invalidatePaint();\n      }\n    },\n    computeShapeBounds: function () {\n      return this._stroke ? this._shape.computeBounds(this._lineDrawingStyles) : this._shape.bounds;\n    },\n    invalidateStroke: function () {\n      this.invalidateShape();\n    },\n    hasShape: function () {\n      return this._shape;\n    },\n    paintCanvas: function (wrapper) {\n      var context = wrapper.context;\n      if (this.hasShape()) {\n        context.beginPath();\n        this._shape.writeToContext(context);\n        if (this._fill) {\n          this.beforeCanvasFill(wrapper);\n          context.fill();\n          this.afterCanvasFill(wrapper);\n        }\n        if (this._stroke) {\n          this.beforeCanvasStroke(wrapper);\n          context.stroke();\n          this.afterCanvasStroke(wrapper);\n        }\n      }\n    },\n    paintWebGL: function (state) {\n      throw new Error('Path.prototype.paintWebGL unimplemented');\n    },\n    createSVGFragment: function (svg, defs, group) {\n      return document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    },\n    updateSVGFragment: function (path) {\n      var svgPath = this.hasShape() ? this._shape.getSVGPath() : '';\n      if (!svgPath) {\n        svgPath = 'M0 0';\n      }\n      if (svgPath) {\n        path.setAttribute('d', svgPath);\n      } else if (path.hasAttribute('d')) {\n        path.removeAttribute('d');\n      }\n      path.setAttribute('style', this.getSVGFillStyle() + this.getSVGStrokeStyle());\n    },\n    updateSVGDefs: function (svg, defs) {\n      this.removeSVGDefs(svg, defs);\n      this.addSVGFillDef(svg, defs);\n      this.addSVGStrokeDef(svg, defs);\n    },\n    removeSVGDefs: function (svg, defs) {\n      this.removeSVGFillDef(svg, defs);\n      this.removeSVGStrokeDef(svg, defs);\n    },\n    isPainted: function () {\n      return true;\n    },\n    containsPointSelf: function (point) {\n      if (!this.hasShape()) {\n        return false;\n      }\n      var result = this._shape.containsPoint(point);\n      if (!result && this._includeStrokeInHitRegion && this.hasStroke()) {\n        result = this._shape.getStrokedShape(this._lineDrawingStyles).containsPoint(point);\n      }\n      return result;\n    },\n    intersectsBoundsSelf: function (bounds) {\n      return this.hasShape() ? this._shape.intersectsBounds(bounds) : false;\n    },\n    set shape(value) {\n      this.setShape(value);\n    },\n    get shape() {\n      return this.getShape();\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Path( ' + this._shape.toString() + ', {' + propLines + '} )';\n    },\n    getPropString: function (spaces, includeChildren) {\n      var result = Node.prototype.getPropString.call(this, spaces, includeChildren);\n      result = this.appendFillablePropString(spaces, result);\n      result = this.appendStrokablePropString(spaces, result);\n      return result;\n    }\n  });\n  Path.prototype._mutatorKeys = ['shape'].concat(Node.prototype._mutatorKeys);\n  Path.prototype._supportedRenderers = [\n    Renderer.Canvas,\n    Renderer.SVG\n  ];\n  Fillable(Path);\n  Strokable(Path);\n  return Path;\n});","\ndefine('SCENERY/nodes/Circle',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Path','KITE/Shape'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Path = require('SCENERY/nodes/Path');\n  var Shape = require('KITE/Shape');\n  scenery.Circle = function Circle(radius, options) {\n    if (typeof radius === 'object') {\n      options = radius;\n    } else {\n      this._radius = radius;\n      options = options || {};\n    }\n    Path.call(this, Shape.circle(0, 0, radius), options);\n  };\n  var Circle = scenery.Circle;\n  inherit(Path, Circle, {\n    invalidateCircle: function () {\n      this.setShape(Shape.circle(0, 0, this._radius));\n    },\n    createSVGFragment: function (svg, defs, group) {\n      return document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    },\n    updateSVGFragment: function (circle) {\n      circle.setAttribute('r', this._radius);\n      circle.setAttribute('style', this.getSVGFillStyle() + this.getSVGStrokeStyle());\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Circle( ' + this._radius + ', {' + propLines + '} )';\n    },\n    getRadius: function () {\n      return this._radius;\n    },\n    setRadius: function (radius) {\n      if (this._radius !== radius) {\n        this._radius = radius;\n        this.invalidateCircle();\n      }\n      return this;\n    },\n    computeShapeBounds: function () {\n      return this._stroke ? this._shape.bounds.dilated(this._lineDrawingStyles.lineWidth / 2) : this._shape.bounds;\n    },\n    containsPointSelf: function (point) {\n      return point.x * point.x + point.y * point.y < this._radius * this._radius;\n    },\n    get radius() {\n      return this.getRadius();\n    },\n    set radius(value) {\n      return this.setRadius(value);\n    }\n  });\n  Circle.prototype._mutatorKeys = ['radius'].concat(Path.prototype._mutatorKeys);\n  return Circle;\n});","\ndefine('PHET_CORE/escapeHTML',['require'],function (require) {\n  'use strict';\n  return function escapeHTML(str) {\n    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;').replace(/\\'/g, '&#x27;').replace(/\\//g, '&#x2F;');\n  };\n});","\ndefine('SCENERY/nodes/DOM',['require','PHET_CORE/inherit','PHET_CORE/escapeHTML','DOT/Bounds2','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/layers/Renderer','SCENERY/util/Util','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var escapeHTML = require('PHET_CORE/escapeHTML');\n  var Bounds2 = require('DOT/Bounds2');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var Renderer = require('SCENERY/layers/Renderer');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  require('SCENERY/util/Util');\n  scenery.DOM = function DOM(element, options) {\n    options = options || {};\n    this._interactive = false;\n    if (element && element.jquery) {\n      element = element[0];\n    }\n    this._container = document.createElement('div');\n    this._$container = $(this._container);\n    this._$container.css('position', 'absolute');\n    this._$container.css('left', 0);\n    this._$container.css('top', 0);\n    this.invalidateDOMLock = false;\n    options.element = element;\n    Node.call(this, options);\n  };\n  var DOM = scenery.DOM;\n  inherit(Node, DOM, {\n    allowsMultipleDOMInstances: false,\n    calculateDOMBounds: function () {\n      var $element = $(this._element);\n      return new Bounds2(0, 0, $element.width(), $element.height());\n    },\n    createTemporaryContainer: function () {\n      var temporaryContainer = document.createElement('div');\n      $(temporaryContainer).css({\n        display: 'hidden',\n        padding: '0 !important',\n        margin: '0 !important',\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        width: 65535,\n        height: 65535\n      });\n      return temporaryContainer;\n    },\n    invalidateDOM: function () {\n      if (this.invalidateDOMLock) {\n        return;\n      }\n      this.invalidateDOMLock = true;\n      var temporaryContainer = this.createTemporaryContainer();\n      this._container.removeChild(this._element);\n      temporaryContainer.appendChild(this._element);\n      document.body.appendChild(temporaryContainer);\n      var selfBounds = this.calculateDOMBounds();\n      this.invalidateSelf(selfBounds);\n      this._$container.width(selfBounds.getWidth());\n      this._$container.height(selfBounds.getHeight());\n      document.body.removeChild(temporaryContainer);\n      temporaryContainer.removeChild(this._element);\n      this._container.appendChild(this._element);\n      this.invalidateDOMLock = false;\n    },\n    getDOMElement: function () {\n      return this._container;\n    },\n    updateDOMElement: function (container) {\n    },\n    updateCSSTransform: function (transform, element) {\n      scenery.Util.applyCSSTransform(transform.getMatrix(), this._container);\n    },\n    isPainted: function () {\n      return true;\n    },\n    setElement: function (element) {\n      if (this._element !== element) {\n        if (this._element) {\n          this._container.removeChild(this._element);\n        }\n        this._element = element;\n        this._$element = $(element);\n        this._container.appendChild(this._element);\n        this.invalidateDOM();\n      }\n      return this;\n    },\n    getElement: function () {\n      return this._element;\n    },\n    setInteractive: function (interactive) {\n      if (this._interactive !== interactive) {\n        this._interactive = interactive;\n      }\n    },\n    isInteractive: function () {\n      return this._interactive;\n    },\n    set element(value) {\n      this.setElement(value);\n    },\n    get element() {\n      return this.getElement();\n    },\n    set interactive(value) {\n      this.setInteractive(value);\n    },\n    get interactive() {\n      return this.isInteractive();\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.DOM( $( \\'' + escapeHTML(this._container.innerHTML.replace(/'/g, '\\\\\\'')) + '\\' ), {' + propLines + '} )';\n    },\n    getPropString: function (spaces, includeChildren) {\n      var result = Node.prototype.getPropString.call(this, spaces, includeChildren);\n      if (this.interactive) {\n        if (result) {\n          result += ',\\n';\n        }\n        result += spaces + 'interactive: true';\n      }\n      return result;\n    }\n  });\n  DOM.prototype._mutatorKeys = [\n    'element',\n    'interactive'\n  ].concat(Node.prototype._mutatorKeys);\n  DOM.prototype._supportedRenderers = [Renderer.DOM];\n  return DOM;\n});","\ndefine('SCENERY/nodes/HBox',['require','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  scenery.HBox = function HBox(options) {\n    this.options = options = _.extend({\n      spacing: function () {\n        return 0;\n      },\n      align: 'center'\n    }, options);\n    if (typeof options.spacing === 'number') {\n      var spacingConstant = options.spacing;\n      options.spacing = function () {\n        return spacingConstant;\n      };\n    }\n    Node.call(this, options);\n    this.updateLayout();\n    if (options) {\n      this.mutate(options);\n    }\n  };\n  var HBox = scenery.HBox;\n  HBox.prototype = objectCreate(Node.prototype);\n  HBox.prototype.updateLayout = function () {\n    var minY = _.min(_.map(this.children, function (child) {\n        return child.top;\n      }));\n    var maxY = _.max(_.map(this.children, function (child) {\n        return child.top + child.height;\n      }));\n    var centerY = (maxY + minY) / 2;\n    var x = 0;\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.left = x;\n      if (this.options.align === 'top') {\n        child.top = minY;\n      } else if (this.options.align === 'bottom') {\n        child.bottom = maxY;\n      } else {\n        child.centerY = centerY;\n      }\n      x += child.width + this.options.spacing(child, this.children[i + 1]);\n    }\n  };\n  HBox.prototype.constructor = HBox;\n  return HBox;\n});","\ndefine('SCENERY/util/Font',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var styles = [\n      'normal',\n      'italic',\n      'oblique'\n    ];\n  var variants = [\n      'normal',\n      'small-caps'\n    ];\n  var weights = [\n      'normal',\n      'bold',\n      'bolder',\n      'lighter',\n      '100',\n      '200',\n      '300',\n      '400',\n      '500',\n      '600',\n      '700',\n      '800',\n      '900'\n    ];\n  var stretches = [\n      'normal',\n      'ultra-condensed',\n      'extra-condensed',\n      'condensed',\n      'semi-condensed',\n      'semi-expanded',\n      'expanded',\n      'extra-expanded',\n      'ultra-expanded'\n    ];\n  var sizes = [\n      'xx-small',\n      'x-small',\n      'small',\n      'medium',\n      'large',\n      'x-large',\n      'xx-large',\n      'larger',\n      'smaller'\n    ];\n  function castSize(size) {\n    if (typeof size === 'number') {\n      return size + 'px';\n    } else {\n      return size;\n    }\n  }\n  scenery.Font = function Font(options) {\n    this._style = 'normal';\n    this._variant = 'normal';\n    this._weight = 'normal';\n    this._stretch = 'normal';\n    this._size = '10px';\n    this._lineHeight = 'normal';\n    this._family = 'sans-serif';\n    var type = typeof options;\n    if (type === 'string') {\n      var tokens = _.filter(options.split(/[\\x09\\x0A\\x0C\\x0D\\x20]/), function (token) {\n          return token.length > 0;\n        });\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        if (token === 'normal') {\n        } else if (_.contains(styles, token)) {\n          sceneryAssert && sceneryAssert(this._style === 'normal', 'Style cannot be applied twice. Already set to \"' + this._style + '\", attempt to replace with \"' + token + '\"');\n          this._style = token;\n        } else if (_.contains(variants, token)) {\n          sceneryAssert && sceneryAssert(this._variant === 'normal', 'Variant cannot be applied twice. Already set to \"' + this._variant + '\", attempt to replace with \"' + token + '\"');\n          this._variant = token;\n        } else if (_.contains(weights, token)) {\n          sceneryAssert && sceneryAssert(this._weight === 'normal', 'Weight cannot be applied twice. Already set to \"' + this._weight + '\", attempt to replace with \"' + token + '\"');\n          this._weight = token;\n        } else if (_.contains(stretches, token)) {\n          sceneryAssert && sceneryAssert(this._stretch === 'normal', 'Stretch cannot be applied twice. Already set to \"' + this._stretch + '\", attempt to replace with \"' + token + '\"');\n          this._stretch = token;\n        } else {\n          var subtokens = token.split(/\\//);\n          this._size = subtokens[0];\n          if (subtokens[1]) {\n            this._lineHeight = subtokens[1];\n          }\n          this._family = tokens.slice(i + 1).join(' ');\n          break;\n        }\n      }\n    } else if (type === 'object') {\n      if (options.style !== undefined) {\n        this._style = options.style;\n      }\n      if (options.variant !== undefined) {\n        this._variant = options.variant;\n      }\n      if (options.weight !== undefined) {\n        this._weight = '' + options.weight;\n      }\n      if (options.stretch !== undefined) {\n        this._stretch = options.stretch;\n      }\n      if (options.size !== undefined) {\n        this._size = castSize(options.size);\n      }\n      if (options.lineHeight !== undefined) {\n        this._lineHeight = options.lineHeight;\n      }\n      if (options.family !== undefined) {\n        this._family = options.family;\n      }\n    }\n    sceneryAssert && sceneryAssert(typeof this._style === 'string' && _.contains(styles, this._style), 'Font style must be one of \"normal\", \"italic\", or \"oblique\"');\n    sceneryAssert && sceneryAssert(typeof this._variant === 'string' && _.contains(variants, this._variant), 'Font variant must be \"normal\" or \"small-caps\"');\n    sceneryAssert && sceneryAssert(typeof this._weight === 'string' && _.contains(weights, this._weight), 'Font weight must be one of \"normal\", \"bold\", \"bolder\", \"lighter\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", or \"900\"');\n    sceneryAssert && sceneryAssert(typeof this._stretch === 'string' && _.contains(stretches, this._stretch), 'Font stretch must be one of \"normal\", \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"semi-expanded\", \"expanded\", \"extra-expanded\", or \"ultra-expanded\"');\n    sceneryAssert && sceneryAssert(typeof this._size === 'string' && !_.contains([\n      '0',\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9'\n    ], this._size[this._size.length - 1]), 'Font size must be either passed as a number (not a string, interpreted as px), or must contain a suffix for percentage, absolute or relative units, or an explicit size constant');\n    sceneryAssert && sceneryAssert(typeof this._lineHeight === 'string');\n    sceneryAssert && sceneryAssert(typeof this._family === 'string');\n    this._font = this.computeShorthand();\n    phetAllocation && phetAllocation('Font');\n  };\n  var Font = scenery.Font;\n  Font.prototype = {\n    constructor: Font,\n    getFont: function () {\n      return this._font;\n    },\n    getStyle: function () {\n      return this._style;\n    },\n    getVariant: function () {\n      return this._variant;\n    },\n    getWeight: function () {\n      return this._weight;\n    },\n    getStretch: function () {\n      return this._stretch;\n    },\n    getSize: function () {\n      return this._size;\n    },\n    getLineHeight: function () {\n      return this._lineHeight;\n    },\n    getFamily: function () {\n      return this._family;\n    },\n    get font() {\n      return this.getFont();\n    },\n    get style() {\n      return this.getStyle();\n    },\n    get variant() {\n      return this.getVariant();\n    },\n    get weight() {\n      return this.getWeight();\n    },\n    get stretch() {\n      return this.getStretch();\n    },\n    get size() {\n      return this.getSize();\n    },\n    get lineHeight() {\n      return this.getLineHeight();\n    },\n    get family() {\n      return this.getFamily();\n    },\n    copy: function (options) {\n      return new Font(_.extend({\n        style: this._style,\n        variant: this._variant,\n        weight: this._weight,\n        stretch: this._stretch,\n        size: this._size,\n        lineHeight: this._lineHeight,\n        family: this._family\n      }, options));\n    },\n    computeShorthand: function () {\n      var ret = '';\n      if (this._style !== 'normal') {\n        ret += this._style + ' ';\n      }\n      if (this._variant !== 'normal') {\n        ret += this._variant + ' ';\n      }\n      if (this._weight !== 'normal') {\n        ret += this._weight + ' ';\n      }\n      if (this._stretch !== 'normal') {\n        ret += this._stretch + ' ';\n      }\n      ret += this._size;\n      if (this._lineHeight !== 'normal') {\n        ret += '/' + this._lineHeight;\n      }\n      ret += ' ' + this._family;\n      return ret;\n    },\n    toCSS: function () {\n      return this.getFont();\n    }\n  };\n  Font.DEFAULT = new Font();\n  return Font;\n});","\ndefine('SCENERY/nodes/Text',['require','PHET_CORE/inherit','PHET_CORE/escapeHTML','DOT/Bounds2','DOT/Matrix3','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/layers/Renderer','SCENERY/nodes/Fillable','SCENERY/nodes/Strokable','SCENERY/util/Util','SCENERY/util/Font','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var escapeHTML = require('PHET_CORE/escapeHTML');\n  var Bounds2 = require('DOT/Bounds2');\n  var Matrix3 = require('DOT/Matrix3');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var Renderer = require('SCENERY/layers/Renderer');\n  var Fillable = require('SCENERY/nodes/Fillable');\n  var Strokable = require('SCENERY/nodes/Strokable');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  require('SCENERY/util/Font');\n  require('SCENERY/util/Util');\n  var svgTextSizeContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svgTextSizeContainer.setAttribute('width', '2');\n  svgTextSizeContainer.setAttribute('height', '2');\n  svgTextSizeContainer.setAttribute('style', 'display: hidden; pointer-events: none; position: absolute; left: -65535; right: -65535;');\n  var svgTextSizeElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n  svgTextSizeElement.appendChild(document.createTextNode(''));\n  svgTextSizeContainer.appendChild(svgTextSizeElement);\n  var useDOMAsFastBounds = window.navigator.userAgent.indexOf('like Gecko) Version/5') !== -1 && window.navigator.userAgent.indexOf('Safari/') !== -1;\n  var hybridTextNode;\n  var initializingHybridTextNode = false;\n  scenery.Text = function Text(text, options) {\n    this._text = '';\n    this._font = scenery.Font.DEFAULT;\n    this._direction = 'ltr';\n    this._boundsMethod = 'hybrid';\n    this._isHTML = this._isHTML === undefined ? false : this._isHTML;\n    this._supportedRenderers = [\n      Renderer.Canvas,\n      Renderer.SVG,\n      Renderer.DOM\n    ];\n    var thisFont = this;\n    options = options || {};\n    if (options.fill === undefined) {\n      options.fill = '#000000';\n    }\n    if (text !== undefined) {\n      options.text = text;\n    }\n    this.initializeStrokable();\n    Node.call(this, options);\n    this.updateTextFlags();\n  };\n  var Text = scenery.Text;\n  inherit(Node, Text, {\n    domUpdateTransformOnRepaint: true,\n    setText: function (text) {\n      if (text !== this._text) {\n        this._text = text;\n        this.invalidateText();\n      }\n      return this;\n    },\n    getText: function () {\n      return this._text;\n    },\n    setBoundsMethod: function (method) {\n      sceneryAssert && sceneryAssert(method === 'fast' || method === 'fastCanvas' || method === 'accurate' || method === 'hybrid', 'Unknown Text boundsMethod');\n      if (method !== this._boundsMethod) {\n        this._boundsMethod = method;\n        this.updateTextFlags();\n        this.dispatchEvent('boundsAccuracy', { node: this });\n        this.invalidateText();\n      }\n      return this;\n    },\n    getBoundsMethod: function () {\n      return this._boundsMethod;\n    },\n    updateTextFlags: function () {\n      var thisText = this;\n      this.boundsInaccurate = this._boundsMethod !== 'accurate';\n      var renderersChanged = false;\n      function check(predicateValue, renderer) {\n        var inSupportedRenderers = _.contains(thisText._supportedRenderers, renderer);\n        if (predicateValue !== inSupportedRenderers) {\n          renderersChanged = true;\n          if (predicateValue) {\n            thisText._supportedRenderers.push(renderer);\n          } else {\n            thisText._supportedRenderers.splice(_.indexOf(thisText._supportedRenderers, renderer), 1);\n            if (thisText.renderer === renderer) {\n              thisText.renderer = null;\n              throw new Error('The explicitly specified Text renderer: ' + renderer.name + ' is not supported by this operation (probably invalid stroke, fill, or boundsMethod)');\n            }\n          }\n        }\n      }\n      check(this._boundsMethod !== 'fast' && !this._isHTML, Renderer.Canvas);\n      check(!this._isHTML, Renderer.SVG);\n      check(!this.hasStroke() && this.isFillDOMCompatible(), Renderer.DOM);\n      if (this._supportedRenderers.length === 0) {\n        throw new Error('No renderers are able to support this Text node (probably HTML text with a stroke or incompatible fill)');\n      }\n      if (renderersChanged) {\n        this.markLayerRefreshNeeded();\n      }\n    },\n    invalidateText: function () {\n      if (this._isHTML || useDOMAsFastBounds && this._boundsMethod !== 'accurate') {\n        this.invalidateSelf(this.approximateDOMBounds());\n      } else if (this._boundsMethod === 'hybrid') {\n        this.invalidateSelf(this.approximateHybridBounds());\n      } else if (this._boundsMethod === 'fast' || this._boundsMethod === 'fastCanvas') {\n        this.invalidateSelf(this.approximateSVGBounds());\n      } else {\n        this.invalidateSelf(this.accurateCanvasBounds());\n      }\n      this.updateTextFlags();\n    },\n    invalidateStroke: function () {\n      this.invalidateText();\n    },\n    invalidateFill: function () {\n      this.invalidateText();\n    },\n    paintCanvas: function (wrapper) {\n      var context = wrapper.context;\n      if (this.hasFill() || this.hasStroke()) {\n        wrapper.setFont(this._font.getFont());\n        wrapper.setDirection(this._direction);\n      }\n      if (this.hasFill()) {\n        this.beforeCanvasFill(wrapper);\n        context.fillText(this._text, 0, 0);\n        this.afterCanvasFill(wrapper);\n      }\n      if (this.hasStroke()) {\n        this.beforeCanvasStroke(wrapper);\n        context.strokeText(this._text, 0, 0);\n        this.afterCanvasStroke(wrapper);\n      }\n    },\n    paintWebGL: function (state) {\n      throw new Error('Text.prototype.paintWebGL unimplemented');\n    },\n    createSVGFragment: function (svg, defs, group) {\n      var element = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      element.appendChild(document.createTextNode(''));\n      return element;\n    },\n    updateSVGFragment: function (element) {\n      var isRTL = this._direction === 'rtl';\n      element.lastChild.nodeValue = this._text;\n      element.setAttribute('style', this.getSVGFillStyle() + this.getSVGStrokeStyle());\n      element.setAttribute('dominant-baseline', 'alphabetic');\n      element.setAttribute('direction', this._direction);\n      element.setAttribute('font-family', this._font.getFamily());\n      element.setAttribute('font-size', this._font.getSize());\n      element.setAttribute('font-style', this._font.getStyle());\n      element.setAttribute('font-weight', this._font.getWeight());\n      element.setAttribute('font-stretch', this._font.getStretch());\n    },\n    updateSVGDefs: function (svg, defs) {\n      this.removeSVGDefs(svg, defs);\n      this.addSVGFillDef(svg, defs);\n      this.addSVGStrokeDef(svg, defs);\n    },\n    removeSVGDefs: function (svg, defs) {\n      this.removeSVGFillDef(svg, defs);\n      this.removeSVGStrokeDef(svg, defs);\n    },\n    allowsMultipleDOMInstances: true,\n    getDOMElement: function () {\n      return document.createElement('div');\n    },\n    updateDOMElement: function (div) {\n      var $div = $(div);\n      div.style.font = this.getFont();\n      div.style.color = this.getCSSFill();\n      $div.width(this.getSelfBounds().width);\n      $div.height(this.getSelfBounds().height);\n      $div.empty();\n      div.appendChild(this.getDOMTextNode());\n      div.setAttribute('dir', this._direction);\n    },\n    updateCSSTransform: function (transform, element) {\n      var yOffset = this.getSelfBounds().minY;\n      var matrix = transform.getMatrix().timesMatrix(Matrix3.translation(0, yOffset));\n      scenery.Util.applyCSSTransform(matrix, element);\n    },\n    getDOMTextNode: function () {\n      if (this._isHTML) {\n        var span = document.createElement('span');\n        span.innerHTML = this.text;\n        return span;\n      } else {\n        return document.createTextNode(this.text);\n      }\n    },\n    accurateCanvasBounds: function () {\n      var node = this;\n      var svgBounds = this.approximateSVGBounds();\n      if (svgBounds.width === 0 && svgBounds.height === 0) {\n        return svgBounds;\n      }\n      return scenery.Util.canvasAccurateBounds(function (context) {\n        context.font = node.font;\n        context.direction = node.direction;\n        context.fillText(node.text, 0, 0);\n      }, {\n        precision: 0.5,\n        resolution: 128,\n        initialScale: 32 / Math.max(Math.abs(svgBounds.minX), Math.abs(svgBounds.minY), Math.abs(svgBounds.maxX), Math.abs(svgBounds.maxY))\n      });\n    },\n    approximateCanvasWidth: function () {\n      var context = scenery.scratchContext;\n      context.font = this.font;\n      context.direction = this.direction;\n      return context.measureText(this.text).width;\n    },\n    approximateSVGBounds: function () {\n      if (!svgTextSizeContainer.parentNode) {\n        if (document.body) {\n          document.body.appendChild(svgTextSizeContainer);\n        } else {\n          if (initializingHybridTextNode) {\n            return Bounds2.NOTHING;\n          } else {\n            throw new Error('No document.body and trying to get approximate SVG bounds of a Text node');\n          }\n        }\n      }\n      this.updateSVGFragment(svgTextSizeElement);\n      var rect = svgTextSizeElement.getBBox();\n      return new Bounds2(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height);\n    },\n    approximateHybridBounds: function () {\n      if (!hybridTextNode) {\n        return Bounds2.NOTHING;\n      }\n      if (this._font._cachedSVGBounds === undefined) {\n        hybridTextNode.setFont(this._font);\n        this._font._cachedSVGBounds = hybridTextNode.getBounds();\n      }\n      var canvasWidth = this.approximateCanvasWidth();\n      var verticalBounds = this._font._cachedSVGBounds;\n      return new Bounds2(0, verticalBounds.minY, canvasWidth, verticalBounds.maxY);\n    },\n    approximateDOMBounds: function () {\n      var maxHeight = 1024;\n      var isRTL = this.direction === 'rtl';\n      var div = document.createElement('div');\n      $(div).css({\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        padding: '0 !important',\n        margin: '0 !important',\n        display: 'hidden'\n      });\n      var span = document.createElement('span');\n      $(span).css('font', this.getFont());\n      span.appendChild(this.getDOMTextNode());\n      span.setAttribute('direction', this._direction);\n      var fakeImage = document.createElement('div');\n      $(fakeImage).css({\n        'vertical-align': 'baseline',\n        display: 'inline-block',\n        width: 0,\n        height: maxHeight + 'px',\n        margin: '0 !important',\n        padding: '0 !important'\n      });\n      div.appendChild(span);\n      div.appendChild(fakeImage);\n      document.body.appendChild(div);\n      var rect = span.getBoundingClientRect();\n      var divRect = div.getBoundingClientRect();\n      var result = new Bounds2(rect.left, rect.top - maxHeight, rect.right + 1, rect.bottom - maxHeight).shifted(-divRect.left, -divRect.top);\n      document.body.removeChild(div);\n      var width = rect.right - rect.left;\n      return result.shiftedX(isRTL ? -width : 0);\n    },\n    setFont: function (font) {\n      if (this.font !== font) {\n        this._font = font instanceof scenery.Font ? font : new scenery.Font(font);\n        this.invalidateText();\n      }\n      return this;\n    },\n    getFont: function () {\n      return this._font.getFont();\n    },\n    setDirection: function (direction) {\n      this._direction = direction;\n      this.invalidateText();\n      return this;\n    },\n    getDirection: function () {\n      return this._direction;\n    },\n    isPainted: function () {\n      return true;\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Text( \\'' + escapeHTML(this._text.replace(/'/g, '\\\\\\'')) + '\\', {' + propLines + '} )';\n    },\n    getPropString: function (spaces, includeChildren) {\n      var result = Node.prototype.getPropString.call(this, spaces, includeChildren);\n      result = this.appendFillablePropString(spaces, result);\n      result = this.appendStrokablePropString(spaces, result);\n      function addProp(key, value, nowrap) {\n        if (result) {\n          result += ',\\n';\n        }\n        if (!nowrap && typeof value === 'string') {\n          result += spaces + key + ': \\'' + value + '\\'';\n        } else {\n          result += spaces + key + ': ' + value;\n        }\n      }\n      if (this.font !== new scenery.Font().getFont()) {\n        addProp('font', this.font.replace(/'/g, '\\\\\\''));\n      }\n      if (this._direction !== 'ltr') {\n        addProp('direction', this._direction);\n      }\n      return result;\n    }\n  });\n  function addFontForwarding(propertyName, fullCapitalized, shortUncapitalized) {\n    var getterName = 'get' + fullCapitalized;\n    var setterName = 'set' + fullCapitalized;\n    Text.prototype[getterName] = function () {\n      return this._font[shortUncapitalized];\n    };\n    Text.prototype[setterName] = function (value) {\n      var ob = {};\n      ob[shortUncapitalized] = value;\n      var newFont = this._font.copy(ob);\n      this.setFont(newFont);\n      return this;\n    };\n    Object.defineProperty(Text.prototype, propertyName, {\n      set: Text.prototype[setterName],\n      get: Text.prototype[getterName]\n    });\n  }\n  addFontForwarding('fontWeight', 'FontWeight', 'weight');\n  addFontForwarding('fontFamily', 'FontFamily', 'family');\n  addFontForwarding('fontStretch', 'FontStretch', 'stretch');\n  addFontForwarding('fontStyle', 'FontStyle', 'style');\n  addFontForwarding('fontSize', 'FontSize', 'size');\n  addFontForwarding('lineHeight', 'LineHeight', 'lineHeight');\n  Text.prototype._mutatorKeys = [\n    'boundsMethod',\n    'text',\n    'font',\n    'fontWeight',\n    'fontFamily',\n    'fontStretch',\n    'fontStyle',\n    'fontSize',\n    'lineHeight',\n    'direction'\n  ].concat(Node.prototype._mutatorKeys);\n  Text.prototype._supportedRenderers = [\n    Renderer.Canvas,\n    Renderer.SVG,\n    Renderer.DOM\n  ];\n  Text.prototype._supportedRenderersWithFastBounds = [\n    Renderer.SVG,\n    Renderer.DOM\n  ];\n  Object.defineProperty(Text.prototype, 'font', {\n    set: Text.prototype.setFont,\n    get: Text.prototype.getFont\n  });\n  Object.defineProperty(Text.prototype, 'text', {\n    set: Text.prototype.setText,\n    get: Text.prototype.getText\n  });\n  Object.defineProperty(Text.prototype, 'direction', {\n    set: Text.prototype.setDirection,\n    get: Text.prototype.getDirection\n  });\n  Object.defineProperty(Text.prototype, 'boundsMethod', {\n    set: Text.prototype.setBoundsMethod,\n    get: Text.prototype.getBoundsMethod\n  });\n  Fillable(Text);\n  Strokable(Text);\n  initializingHybridTextNode = true;\n  hybridTextNode = new Text('m', { boundsMethod: 'fast' });\n  initializingHybridTextNode = false;\n  return Text;\n});","\ndefine('SCENERY/nodes/HTMLText',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Text'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Text = require('SCENERY/nodes/Text');\n  scenery.HTMLText = function HTMLText(text, options) {\n    this._isHTML = true;\n    Text.call(this, text, options);\n  };\n  var HTMLText = scenery.HTMLText;\n  inherit(Text, HTMLText, {});\n  return HTMLText;\n});","\ndefine('SCENERY/nodes/Image',['require','PHET_CORE/inherit','DOT/Bounds2','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/layers/Renderer','SCENERY/util/Util','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var Renderer = require('SCENERY/layers/Renderer');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  require('SCENERY/util/Util');\n  scenery.Image = function Image(image, options) {\n    sceneryAssert && sceneryAssert(image, 'image should be available');\n    options = options || {};\n    if (image) {\n      options.image = image;\n    }\n    var self = this;\n    this.loadListener = function (event) {\n      self.invalidateImage();\n      self._image.removeEventListener('load', self.loadListener);\n    };\n    Node.call(this, options);\n  };\n  var Image = scenery.Image;\n  inherit(Node, Image, {\n    allowsMultipleDOMInstances: false,\n    invalidateImage: function () {\n      this.invalidateSelf(new Bounds2(0, 0, this.getImageWidth(), this.getImageHeight()));\n    },\n    getImage: function () {\n      return this._image;\n    },\n    setImage: function (image) {\n      var self = this;\n      if (this._image !== image && (typeof image !== 'string' || !this._image || image !== this._image.src)) {\n        if (this._image) {\n          this._image.removeEventListener('load', this.loadListener);\n        }\n        if (typeof image === 'string') {\n          var src = image;\n          image = document.createElement('img');\n          image.addEventListener('load', this.loadListener);\n          image.src = src;\n        } else if (image instanceof HTMLImageElement) {\n          if (!image.width || !image.height) {\n            image.addEventListener('load', this.loadListener);\n          }\n        }\n        if (image instanceof HTMLCanvasElement) {\n          if (!this.hasOwnProperty('_supportedRenderers')) {\n            this._supportedRenderers = [Renderer.Canvas];\n            this.markLayerRefreshNeeded();\n          }\n        } else {\n          if (this.hasOwnProperty('_supportedRenderers')) {\n            delete this._supportedRenderers;\n            this.markLayerRefreshNeeded();\n          }\n        }\n        this._image = image;\n        this.invalidateImage();\n      }\n      return this;\n    },\n    getImageWidth: function () {\n      return this._image.width;\n    },\n    getImageHeight: function () {\n      return this._image.height;\n    },\n    getImageURL: function () {\n      return this._image.src;\n    },\n    isPainted: function () {\n      return true;\n    },\n    paintCanvas: function (wrapper) {\n      wrapper.context.drawImage(this._image, 0, 0);\n    },\n    paintWebGL: function (state) {\n      throw new Error('paintWebGL:nimplemented');\n    },\n    createSVGFragment: function (svg, defs, group) {\n      var element = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n      element.setAttribute('x', 0);\n      element.setAttribute('y', 0);\n      return element;\n    },\n    updateSVGFragment: function (element) {\n      var xlinkns = 'http://www.w3.org/1999/xlink';\n      element.setAttribute('width', this.getImageWidth() + 'px');\n      element.setAttribute('height', this.getImageHeight() + 'px');\n      element.setAttributeNS(xlinkns, 'xlink:href', this.getImageURL());\n    },\n    getDOMElement: function () {\n      this._image.style.display = 'block';\n      this._image.style.position = 'absolute';\n      this._image.style.left = '0';\n      this._image.style.top = '0';\n      return this._image;\n    },\n    updateDOMElement: function (image) {\n      if (image.src !== this._image.src) {\n        image.src = this._image.src;\n      }\n    },\n    updateCSSTransform: function (transform, element) {\n      scenery.Util.applyCSSTransform(transform.getMatrix(), element);\n    },\n    set image(value) {\n      this.setImage(value);\n    },\n    get image() {\n      return this.getImage();\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Image( \\'' + (this._image.src ? this._image.src.replace(/'/g, '\\\\\\'') : 'other') + '\\', {' + propLines + '} )';\n    }\n  });\n  Image.prototype._mutatorKeys = ['image'].concat(Node.prototype._mutatorKeys);\n  Image.prototype._supportedRenderers = [\n    Renderer.Canvas,\n    Renderer.SVG,\n    Renderer.DOM\n  ];\n  Image.createSVGImage = function (url, width, height) {\n    var xlinkns = 'http://www.w3.org/1999/xlink';\n    var svgns = 'http://www.w3.org/2000/svg';\n    var element = document.createElementNS(svgns, 'image');\n    element.setAttribute('x', 0);\n    element.setAttribute('y', 0);\n    element.setAttribute('width', width + 'px');\n    element.setAttribute('height', height + 'px');\n    element.setAttributeNS(xlinkns, 'xlink:href', url);\n    return element;\n  };\n  return Image;\n});","\ndefine('SCENERY/nodes/Line',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Path','KITE/Shape','DOT/Vector2'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Path = require('SCENERY/nodes/Path');\n  var Shape = require('KITE/Shape');\n  var Vector2 = require('DOT/Vector2');\n  scenery.Line = function Line(x1, y1, x2, y2, options) {\n    if (typeof x1 === 'object') {\n      if (x1 instanceof Vector2) {\n        this._x1 = x1.x;\n        this._y1 = x1.y;\n        this._x2 = y1.x;\n        this._y2 = y1.y;\n        options = x2 || {};\n      } else {\n        this._x1 = 0;\n        this._y1 = 0;\n        this._x2 = 0;\n        this._y2 = 0;\n        options = x1 || {};\n      }\n    } else {\n      this._x1 = x1;\n      this._y1 = y1;\n      this._x2 = x2;\n      this._y2 = y2;\n      options = options || {};\n    }\n    Path.call(this, this.createLineShape(), options);\n  };\n  var Line = scenery.Line;\n  inherit(Path, Line, {\n    setLine: function (x1, y1, x2, y2) {\n      sceneryAssert && sceneryAssert(x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined, 'parameters need to be defined');\n      this._x1 = x1;\n      this._y1 = y1;\n      this._x2 = x2;\n      this._y2 = y2;\n      this.invalidateLine();\n    },\n    setPoint1: function (x1, y1) {\n      if (typeof x1 === 'number') {\n        this.setLine(x1, y1, this._x2, this._y2);\n      } else {\n        this.setLine(x1.x, x1.y, this._x2, this._y2);\n      }\n    },\n    set p1(point) {\n      this.setPoint1(point);\n    },\n    get p1() {\n      return new Vector2(this._x1, this._y1);\n    },\n    setPoint2: function (x2, y2) {\n      if (typeof x2 === 'number') {\n        this.setLine(this._x1, this._y1, x2, y2);\n      } else {\n        this.setLine(this._x1, this._y1, x2.x, x2.y);\n      }\n    },\n    set p2(point) {\n      this.setPoint2(point);\n    },\n    get p2() {\n      return new Vector2(this._x2, this._y2);\n    },\n    createLineShape: function () {\n      sceneryAssert && sceneryAssert(isFinite(this._x1), 'A rectangle needs to have a finite x1 (' + this._x1 + ')');\n      sceneryAssert && sceneryAssert(isFinite(this._y1), 'A rectangle needs to have a finite y1 (' + this._y1 + ')');\n      sceneryAssert && sceneryAssert(isFinite(this._x2), 'A rectangle needs to have a finite x2 (' + this._x2 + ')');\n      sceneryAssert && sceneryAssert(isFinite(this._y2), 'A rectangle needs to have a finite y2 (' + this._y2 + ')');\n      return Shape.lineSegment(this._x1, this._y1, this._x2, this._y2);\n    },\n    invalidateLine: function () {\n      this.setShape(this.createLineShape());\n    },\n    containsPointSelf: function (point) {\n      return false;\n    },\n    createSVGFragment: function (svg, defs, group) {\n      return document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    },\n    updateSVGFragment: function (rect) {\n      rect.setAttribute('x1', this._x1);\n      rect.setAttribute('y1', this._y1);\n      rect.setAttribute('x2', this._x2);\n      rect.setAttribute('y2', this._y2);\n      rect.setAttribute('style', this.getSVGFillStyle() + this.getSVGStrokeStyle());\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Line( ' + this._x1 + ', ' + this._y1 + ', ' + this._x1 + ', ' + this._y1 + ', {' + propLines + '} )';\n    }\n  });\n  function addLineProp(capitalizedShort) {\n    var lowerShort = capitalizedShort.toLowerCase();\n    var getName = 'get' + capitalizedShort;\n    var setName = 'set' + capitalizedShort;\n    var privateName = '_' + lowerShort;\n    Line.prototype[getName] = function () {\n      return this[privateName];\n    };\n    Line.prototype[setName] = function (value) {\n      this[privateName] = value;\n      this.invalidateLine();\n      return this;\n    };\n    Object.defineProperty(Line.prototype, lowerShort, {\n      set: Line.prototype[setName],\n      get: Line.prototype[getName]\n    });\n  }\n  addLineProp('X1');\n  addLineProp('Y1');\n  addLineProp('X2');\n  addLineProp('Y2');\n  Line.prototype._mutatorKeys = [\n    'p1',\n    'p2',\n    'x1',\n    'y1',\n    'x2',\n    'y2'\n  ].concat(Path.prototype._mutatorKeys);\n  return Line;\n});","\ndefine('SCENERY/nodes/Rectangle',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Path','KITE/Shape','DOT/Vector2'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Path = require('SCENERY/nodes/Path');\n  var Shape = require('KITE/Shape');\n  var Vector2 = require('DOT/Vector2');\n  scenery.Rectangle = function Rectangle(x, y, width, height, arcWidth, arcHeight, options) {\n    if (typeof x === 'object') {\n      options = x;\n      this._rectX = options.rectX || 0;\n      this._rectY = options.rectY || 0;\n      this._rectWidth = options.rectWidth;\n      this._rectHeight = options.rectHeight;\n      this._rectArcWidth = options.rectArcWidth || 0;\n      this._rectArcHeight = options.rectArcHeight || 0;\n    } else if (arguments.length < 6) {\n      this._rectX = x;\n      this._rectY = y;\n      this._rectWidth = width;\n      this._rectHeight = height;\n      this._rectArcWidth = 0;\n      this._rectArcHeight = 0;\n      options = arcWidth || {};\n    } else {\n      this._rectX = x;\n      this._rectY = y;\n      this._rectWidth = width;\n      this._rectHeight = height;\n      this._rectArcWidth = arcWidth;\n      this._rectArcHeight = arcHeight;\n      options = options || {};\n    }\n    Path.call(this, this.createRectangleShape(), options);\n  };\n  var Rectangle = scenery.Rectangle;\n  inherit(Path, Rectangle, {\n    setRect: function (x, y, width, height, arcWidth, arcHeight) {\n      sceneryAssert && sceneryAssert(x !== undefined && y !== undefined && width !== undefined && height !== undefined, 'x/y/width/height need to be defined');\n      this._rectX = x;\n      this._rectY = y;\n      this._rectWidth = width;\n      this._rectHeight = height;\n      this._rectArcWidth = arcWidth || 0;\n      this._rectArcHeight = arcHeight || 0;\n      this.invalidateRectangle();\n    },\n    isRounded: function () {\n      return this._rectArcWidth !== 0 && this._rectArcHeight !== 0;\n    },\n    createRectangleShape: function () {\n      sceneryAssert && sceneryAssert(isFinite(this._rectX), 'A rectangle needs to have a finite x (' + this._rectX + ')');\n      sceneryAssert && sceneryAssert(isFinite(this._rectY), 'A rectangle needs to have a finite x (' + this._rectY + ')');\n      sceneryAssert && sceneryAssert(this._rectWidth >= 0 && isFinite(this._rectWidth), 'A rectangle needs to have a non-negative finite width (' + this._rectWidth + ')');\n      sceneryAssert && sceneryAssert(this._rectHeight >= 0 && isFinite(this._rectHeight), 'A rectangle needs to have a non-negative finite height (' + this._rectHeight + ')');\n      sceneryAssert && sceneryAssert(this._rectArcWidth >= 0 && isFinite(this._rectArcWidth), 'A rectangle needs to have a non-negative finite arcWidth (' + this._rectArcWidth + ')');\n      sceneryAssert && sceneryAssert(this._rectArcHeight >= 0 && isFinite(this._rectArcHeight), 'A rectangle needs to have a non-negative finite arcHeight (' + this._rectArcHeight + ')');\n      if (this.isRounded()) {\n        var maximumArcSize = Math.min(this._rectWidth / 2, this._rectHeight / 2);\n        return Shape.roundRectangle(this._rectX, this._rectY, this._rectWidth, this._rectHeight, Math.min(maximumArcSize, this._rectArcWidth), Math.min(maximumArcSize, this._rectArcHeight));\n      } else {\n        return Shape.rectangle(this._rectX, this._rectY, this._rectWidth, this._rectHeight);\n      }\n    },\n    invalidateRectangle: function () {\n      this.setShape(this.createRectangleShape());\n    },\n    computeShapeBounds: function () {\n      return this._stroke ? this._shape.bounds.dilated(this._lineDrawingStyles.lineWidth / 2) : this._shape.bounds;\n    },\n    containsPointSelf: function (point) {\n      var result = point.x >= this._rectX && point.x <= this._rectX + this._rectWidth && point.y >= this._rectY && point.y <= this._rectY + this._rectHeight;\n      if (!result || !this.isRounded()) {\n        return result;\n      }\n      var closestCornerX, closestCornerY, guaranteedInside = false;\n      if (point.x < this._rectX + this._rectWidth / 2) {\n        closestCornerX = this._rectX + this._rectArcWidth;\n        guaranteedInside = guaranteedInside || point.x >= closestCornerX;\n      } else {\n        closestCornerX = this._rectX + this._rectWidth - this._rectArcWidth;\n        guaranteedInside = guaranteedInside || point.x <= closestCornerX;\n      }\n      if (guaranteedInside) {\n        return true;\n      }\n      if (point.y < this._rectY + this._rectHeight / 2) {\n        closestCornerY = this._rectY + this._rectArcHeight;\n        guaranteedInside = guaranteedInside || point.y >= closestCornerY;\n      } else {\n        closestCornerY = this._rectY + this._rectHeight - this._rectArcHeight;\n        guaranteedInside = guaranteedInside || point.y <= closestCornerY;\n      }\n      if (guaranteedInside) {\n        return true;\n      }\n      var offsetX = point.x - closestCornerX;\n      var offsetY = point.y - closestCornerY;\n      offsetX /= this._rectArcWidth;\n      offsetY /= this._rectArcHeight;\n      offsetX *= offsetX;\n      offsetY *= offsetY;\n      return offsetX + offsetY <= 1;\n    },\n    paintCanvas: function (wrapper) {\n      var context = wrapper.context;\n      if (this.isRounded()) {\n        return Path.prototype.paintCanvas.call(this, wrapper);\n      }\n      if (this._fill) {\n        this.beforeCanvasFill(wrapper);\n        context.fillRect(this._rectX, this._rectY, this._rectWidth, this._rectHeight);\n        this.afterCanvasFill(wrapper);\n      }\n      if (this._stroke) {\n        this.beforeCanvasStroke(wrapper);\n        context.strokeRect(this._rectX, this._rectY, this._rectWidth, this._rectHeight);\n        this.afterCanvasStroke(wrapper);\n      }\n    },\n    createSVGFragment: function (svg, defs, group) {\n      return document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    },\n    updateSVGFragment: function (rect) {\n      rect.setAttribute('x', this._rectX);\n      rect.setAttribute('y', this._rectY);\n      rect.setAttribute('width', this._rectWidth);\n      rect.setAttribute('height', this._rectHeight);\n      rect.setAttribute('rx', this._rectArcWidth);\n      rect.setAttribute('ry', this._rectArcHeight);\n      rect.setAttribute('style', this.getSVGFillStyle() + this.getSVGStrokeStyle());\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Rectangle( ' + this._rectX + ', ' + this._rectY + ', ' + this._rectWidth + ', ' + this._rectHeight + ', ' + this._rectArcWidth + ', ' + this._rectArcHeight + ', {' + propLines + '} )';\n    }\n  });\n  function addRectProp(capitalizedShort) {\n    var getName = 'getRect' + capitalizedShort;\n    var setName = 'setRect' + capitalizedShort;\n    var privateName = '_rect' + capitalizedShort;\n    Rectangle.prototype[getName] = function () {\n      return this[privateName];\n    };\n    Rectangle.prototype[setName] = function (value) {\n      this[privateName] = value;\n      this.invalidateRectangle();\n      return this;\n    };\n    Object.defineProperty(Rectangle.prototype, 'rect' + capitalizedShort, {\n      set: Rectangle.prototype[setName],\n      get: Rectangle.prototype[getName]\n    });\n  }\n  addRectProp('X');\n  addRectProp('Y');\n  addRectProp('Width');\n  addRectProp('Height');\n  addRectProp('ArcWidth');\n  addRectProp('ArcHeight');\n  Rectangle.prototype._mutatorKeys = [\n    'rectX',\n    'rectY',\n    'rectWidth',\n    'rectHeight',\n    'rectArcWidth',\n    'rectArcHeight'\n  ].concat(Path.prototype._mutatorKeys);\n  return Rectangle;\n});","\ndefine('SCENERY/nodes/Plane',['require','PHET_CORE/inherit','SCENERY/scenery','SCENERY/nodes/Rectangle','KITE/Shape'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var Rectangle = require('SCENERY/nodes/Rectangle');\n  var Shape = require('KITE/Shape');\n  scenery.Plane = function Plane(options) {\n    Rectangle.call(this, -2000, -2000, 6000, 6000, options);\n  };\n  var Plane = scenery.Plane;\n  return inherit(Rectangle, Plane);\n});","\ndefine('SCENERY/nodes/VBox',['require','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  var objectCreate = require('SCENERY/util/Util').objectCreate;\n  scenery.VBox = function VBox(options) {\n    this.options = options = _.extend({\n      spacing: function () {\n        return 0;\n      },\n      align: 'center'\n    }, options);\n    if (typeof options.spacing === 'number') {\n      var spacingConstant = options.spacing;\n      options.spacing = function () {\n        return spacingConstant;\n      };\n    }\n    Node.call(this, options);\n    this.updateLayout();\n    if (options) {\n      this.mutate(options);\n    }\n  };\n  var VBox = scenery.VBox;\n  VBox.prototype = objectCreate(Node.prototype);\n  VBox.prototype.updateLayout = function () {\n    var minX = _.min(_.map(this.children, function (child) {\n        return child.left;\n      }));\n    var maxX = _.max(_.map(this.children, function (child) {\n        return child.left + child.width;\n      }));\n    var centerX = (maxX + minX) / 2;\n    var y = 0;\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.top = y;\n      if (this.options.align === 'left') {\n        child.left = minX;\n      } else if (this.options.align === 'right') {\n        child.right = maxX;\n      } else {\n        child.centerX = centerX;\n      }\n      y += child.height + this.options.spacing(child, this.children[i + 1]);\n    }\n  };\n  VBox.prototype.constructor = VBox;\n  return VBox;\n});","\ndefine('SCENERY/util/AccessibilityPeer',['require','PHET_CORE/inherit','SCENERY/scenery'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var scenery = require('SCENERY/scenery');\n  var AccessibilityPeer = scenery.AccessibilityPeer = function AccessibilityPeer(instance, element, options) {\n      var peer = this;\n      options = options || {};\n      options.tabIndex = options.tabIndex || 1;\n      this.element = typeof element === 'string' ? $(element)[0] : element;\n      if (options.label) {\n        this.peerElement = document.createElement('div');\n        this.element.id = 'peer-' + instance.trail.getUniqueId();\n        var label = document.createElement('label');\n        label.appendChild(document.createTextNode(options.label));\n        label.setAttribute('for', this.element.id);\n        this.peerElement.appendChild(label);\n        this.peerElement.appendChild(this.element);\n      } else {\n        this.peerElement = this.element;\n      }\n      this.instance = instance;\n      this.trail = instance.trail;\n      this.element.setAttribute('tabindex', options.tabIndex);\n      this.element.style.position = 'absolute';\n      var scene = instance.getScene();\n      this.clickListener = function PeerClickListener(event) {\n        sceneryAccessibilityLog && sceneryAccessibilityLog('peer click on ' + instance.toString() + ': ' + instance.getNode().constructor.name);\n        if (options.click) {\n          options.click(event);\n        }\n      };\n      this.focusListener = function PeerFocusListener(event) {\n        sceneryAccessibilityLog && sceneryAccessibilityLog('peer focused: ' + instance.toString() + ': ' + instance.getNode().constructor.name);\n        scene.focusPeer(peer);\n      };\n      this.blurListener = function PeerBlurListener(event) {\n        sceneryAccessibilityLog && sceneryAccessibilityLog('peer blurred: ' + instance.toString() + ': ' + instance.getNode().constructor.name);\n        scene.blurPeer(peer);\n      };\n      this.element.addEventListener('click', this.clickListener);\n      this.element.addEventListener('focus', this.focusListener);\n      this.element.addEventListener('blur', this.blurListener);\n      this.keepPeerBoundsInSync = true;\n      if (this.keepPeerBoundsInSync) {\n        this.boundsSyncListener = this.syncBounds.bind(this);\n        instance.getNode().addEventListener('bounds', this.boundsSyncListener);\n        this.syncBounds();\n        instance.getScene().addEventListener('resize', this.boundsSyncListener);\n        window.setTimeout(this.syncBounds.bind(this), 30);\n      }\n    };\n  AccessibilityPeer.prototype = {\n    constructor: AccessibilityPeer,\n    dispose: function () {\n      this.element.removeEventListener('click', this.clickListener);\n      this.element.removeEventListener('focus', this.focusListener);\n      this.element.removeEventListener('blur', this.blurListener);\n      if (this.keepPeerBoundsInSync) {\n        this.instance.getNode().removeEventListener('bounds', this.boundsSyncListener);\n        this.instance.getScene().removeEventListener('resize', this.boundsSyncListener);\n      }\n    },\n    getGlobalBounds: function () {\n      return this.trail.parentToGlobalBounds(this.trail.lastNode().getBounds()).roundedOut();\n    },\n    syncBounds: function () {\n      var globalBounds = this.getGlobalBounds();\n      this.element.style.left = globalBounds.x + 'px';\n      this.element.style.top = globalBounds.y + 'px';\n      this.element.style.width = globalBounds.width + 'px';\n      this.element.style.height = globalBounds.height + 'px';\n    }\n  };\n  return AccessibilityPeer;\n});","\ndefine('SCENERY/util/Color',['require','SCENERY/scenery','DOT/Util','DOT/Util'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var clamp = require('DOT/Util').clamp;\n  var linear = require('DOT/Util').linear;\n  scenery.Color = function Color(r, g, b, a) {\n    this.listeners = [];\n    if (typeof r === 'string') {\n      var str = r.replace(/ /g, '').toLowerCase();\n      var success = false;\n      var keywordMatch = Color.colorKeywords[str];\n      if (keywordMatch) {\n        str = '#' + keywordMatch;\n      }\n      for (var i = 0; i < Color.formatParsers.length; i++) {\n        var parser = Color.formatParsers[i];\n        var matches = parser.regexp.exec(str);\n        if (matches) {\n          parser.apply(this, matches);\n          success = true;\n          break;\n        }\n      }\n      if (!success) {\n        throw new Error('scenery.Color unable to parse color string: ' + r);\n      }\n    } else {\n      var alpha = a === undefined ? 1 : a;\n      if (g === undefined || b === undefined) {\n        this.setRGBA(r >> 16 && 255, r >> 8 && 255, r >> 0 && 255, alpha);\n      } else {\n        this.setRGBA(r, g, b, alpha);\n      }\n    }\n    phetAllocation && phetAllocation('Color');\n  };\n  var Color = scenery.Color;\n  var rgbNumber = '(-?\\\\d{1,3}%?)';\n  var aNumber = '(\\\\d+|\\\\d*\\\\.\\\\d+)';\n  var rawNumber = '(\\\\d{1,3})';\n  function parseRGBNumber(str) {\n    var multiplier = 1;\n    if (str.charAt(str.length - 1) === '%') {\n      multiplier = 2.55;\n      str = str.slice(0, str.length - 1);\n    }\n    return Math.round(parseInt(str, 10) * multiplier);\n  }\n  Color.formatParsers = [\n    {\n      regexp: /^transparent$/,\n      apply: function (color, matches) {\n        color.setRGBA(0, 0, 0, 0);\n      }\n    },\n    {\n      regexp: /^#(\\w{1})(\\w{1})(\\w{1})$/,\n      apply: function (color, matches) {\n        color.setRGBA(parseInt(matches[1] + matches[1], 16), parseInt(matches[2] + matches[2], 16), parseInt(matches[3] + matches[3], 16), 1);\n      }\n    },\n    {\n      regexp: /^#(\\w{2})(\\w{2})(\\w{2})$/,\n      apply: function (color, matches) {\n        color.setRGBA(parseInt(matches[1], 16), parseInt(matches[2], 16), parseInt(matches[3], 16), 1);\n      }\n    },\n    {\n      regexp: new RegExp('^rgb\\\\(' + rgbNumber + ',' + rgbNumber + ',' + rgbNumber + '\\\\)$'),\n      apply: function (color, matches) {\n        color.setRGBA(parseRGBNumber(matches[1]), parseRGBNumber(matches[2]), parseRGBNumber(matches[3]), 1);\n      }\n    },\n    {\n      regexp: new RegExp('^rgba\\\\(' + rgbNumber + ',' + rgbNumber + ',' + rgbNumber + ',' + aNumber + '\\\\)$'),\n      apply: function (color, matches) {\n        color.setRGBA(parseRGBNumber(matches[1]), parseRGBNumber(matches[2]), parseRGBNumber(matches[3]), parseFloat(matches[4]));\n      }\n    },\n    {\n      regexp: new RegExp('^hsl\\\\(' + rawNumber + ',' + rawNumber + '%,' + rawNumber + '%\\\\)$'),\n      apply: function (color, matches) {\n        color.setHSLA(parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3], 10), 1);\n      }\n    },\n    {\n      regexp: new RegExp('^hsla\\\\(' + rawNumber + ',' + rawNumber + '%,' + rawNumber + '%,' + aNumber + '\\\\)$'),\n      apply: function (color, matches) {\n        color.setHSLA(parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3], 10), parseFloat(matches[4]));\n      }\n    }\n  ];\n  Color.hueToRGB = function (m1, m2, h) {\n    if (h < 0) {\n      h = h + 1;\n    }\n    if (h > 1) {\n      h = h - 1;\n    }\n    if (h * 6 < 1) {\n      return m1 + (m2 - m1) * h * 6;\n    }\n    if (h * 2 < 1) {\n      return m2;\n    }\n    if (h * 3 < 2) {\n      return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n    }\n    return m1;\n  };\n  Color.prototype = {\n    constructor: Color,\n    copy: function () {\n      return new Color(this.r, this.g, this.b, this.a);\n    },\n    getRed: function () {\n      return this.r;\n    },\n    setRed: function (value) {\n      return this.setRGBA(value, this.g, this.b, this.a);\n    },\n    get red() {\n      return this.getRed();\n    },\n    set red(value) {\n      return this.setRed(value);\n    },\n    getGreen: function () {\n      return this.g;\n    },\n    setGreen: function (value) {\n      return this.setRGBA(this.r, value, this.b, this.a);\n    },\n    get green() {\n      return this.getGreen();\n    },\n    set green(value) {\n      return this.setGreen(value);\n    },\n    getBlue: function () {\n      return this.b;\n    },\n    setBlue: function (value) {\n      return this.setRGBA(this.r, this.g, value, this.a);\n    },\n    get blue() {\n      return this.getBlue();\n    },\n    set blue(value) {\n      return this.setBlue(value);\n    },\n    getAlpha: function () {\n      return this.a;\n    },\n    setAlpha: function (value) {\n      return this.setRGBA(this.r, this.g, this.b, value);\n    },\n    get alpha() {\n      return this.getAlpha();\n    },\n    set alpha(value) {\n      return this.setAlpha(value);\n    },\n    setRGBA: function (red, green, blue, alpha) {\n      this.r = Math.round(clamp(red, 0, 255));\n      this.g = Math.round(clamp(green, 0, 255));\n      this.b = Math.round(clamp(blue, 0, 255));\n      this.a = clamp(alpha, 0, 1);\n      this.updateColor();\n      return this;\n    },\n    computeCSS: function () {\n      if (this.a === 1) {\n        return 'rgb(' + this.r + ',' + this.g + ',' + this.b + ')';\n      } else {\n        var alphaString = this.a === 0 || this.a === 1 ? this.a : this.a.toFixed(20);\n        return 'rgba(' + this.r + ',' + this.g + ',' + this.b + ',' + alphaString + ')';\n      }\n    },\n    toCSS: function () {\n      sceneryAssert && sceneryAssert(this._css === this.computeCSS(), 'CSS cached value is ' + this._css + ', but the computed value appears to be ' + this.computeCSS());\n      return this._css;\n    },\n    updateColor: function () {\n      sceneryAssert && sceneryAssert(!this.immutable, 'Cannot modify an immutable color');\n      var oldCSS = this._css;\n      this._css = this.computeCSS();\n      if (oldCSS !== this._css && this.listeners.length) {\n        var listeners = this.listeners.slice(0);\n        var length = listeners.length;\n        for (var i = 0; i < length; i++) {\n          listeners[i]();\n        }\n      }\n    },\n    setImmutable: function () {\n      if (sceneryAssert) {\n        this.immutable = true;\n      }\n      return this;\n    },\n    getCanvasStyle: function () {\n      return this.toCSS();\n    },\n    setHSLA: function (hue, saturation, lightness, alpha) {\n      hue = hue % 360 / 360;\n      saturation = clamp(saturation / 100, 0, 1);\n      lightness = clamp(lightness / 100, 0, 1);\n      var m1, m2;\n      if (lightness < 0.5) {\n        m2 = lightness * (saturation + 1);\n      } else {\n        m2 = lightness + saturation - lightness * saturation;\n      }\n      m1 = lightness * 2 - m2;\n      this.r = Math.round(Color.hueToRGB(m1, m2, hue + 1 / 3) * 255);\n      this.g = Math.round(Color.hueToRGB(m1, m2, hue) * 255);\n      this.b = Math.round(Color.hueToRGB(m1, m2, hue - 1 / 3) * 255);\n      this.a = clamp(alpha, 0, 1);\n      this.updateColor();\n      return this;\n    },\n    equals: function (color) {\n      return this.r === color.r && this.g === color.g && this.b === color.b && this.a === color.a;\n    },\n    withAlpha: function (alpha) {\n      return new Color(this.r, this.g, this.b, alpha);\n    },\n    checkFactor: function (factor) {\n      if (factor < 0 || factor > 1) {\n        throw new Error('factor must be between 0 and 1: ' + factor);\n      }\n      return factor === undefined ? 0.7 : factor;\n    },\n    brighterColor: function (factor) {\n      factor = this.checkFactor(factor);\n      var red = Math.min(255, Math.floor(this.r / factor));\n      var green = Math.min(255, Math.floor(this.g / factor));\n      var blue = Math.min(255, Math.floor(this.b / factor));\n      return new Color(red, green, blue, this.a);\n    },\n    colorUtilsBrighter: function (factor) {\n      factor = this.checkFactor(factor);\n      var red = Math.min(255, this.getRed() + Math.floor(factor * (255 - this.getRed())));\n      var green = Math.min(255, this.getGreen() + Math.floor(factor * (255 - this.getGreen())));\n      var blue = Math.min(255, this.getBlue() + Math.floor(factor * (255 - this.getBlue())));\n      return new Color(red, green, blue, this.getAlpha());\n    },\n    darkerColor: function (factor) {\n      factor = this.checkFactor(factor);\n      var red = Math.max(0, Math.floor(factor * this.r));\n      var green = Math.max(0, Math.floor(factor * this.g));\n      var blue = Math.max(0, Math.floor(factor * this.b));\n      return new Color(red, green, blue, this.a);\n    },\n    colorUtilsDarker: function (factor) {\n      factor = this.checkFactor(factor);\n      var red = Math.max(0, this.getRed() - Math.floor(factor * this.getRed()));\n      var green = Math.max(0, this.getGreen() - Math.floor(factor * this.getGreen()));\n      var blue = Math.max(0, this.getBlue() - Math.floor(factor * this.getBlue()));\n      return new Color(red, green, blue, this.getAlpha());\n    },\n    addChangeListener: function (listener) {\n      sceneryAssert && sceneryAssert(listener !== undefined && listener !== null, 'Verify that the listener exists');\n      sceneryAssert && sceneryAssert(!_.contains(this.listeners, listener));\n      this.listeners.push(listener);\n    },\n    removeChangeListener: function (listener) {\n      sceneryAssert && sceneryAssert(_.contains(this.listeners, listener));\n      this.listeners.splice(_.indexOf(this.listeners, listener), 1);\n    },\n    toString: function () {\n      return this.constructor.name + '[r:' + this.r + ' g:' + this.g + ' b:' + this.b + ' a:' + this.a + ']';\n    }\n  };\n  Color.basicColorKeywords = {\n    aqua: '00ffff',\n    black: '000000',\n    blue: '0000ff',\n    fuchsia: 'ff00ff',\n    gray: '808080',\n    green: '008000',\n    lime: '00ff00',\n    maroon: '800000',\n    navy: '000080',\n    olive: '808000',\n    purple: '800080',\n    red: 'ff0000',\n    silver: 'c0c0c0',\n    teal: '008080',\n    white: 'ffffff',\n    yellow: 'ffff00'\n  };\n  Color.colorKeywords = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '00ffff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000000',\n    blanchedalmond: 'ffebcd',\n    blue: '0000ff',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '00ffff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dodgerblue: '1e90ff',\n    feldspar: 'd19275',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'ff00ff',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslateblue: '8470ff',\n    lightslategray: '778899',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '00ff00',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'ff00ff',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    red: 'ff0000',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    violetred: 'd02090',\n    wheat: 'f5deb3',\n    white: 'ffffff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ffff00',\n    yellowgreen: '9acd32'\n  };\n  Color.BLACK = new Color(0, 0, 0).setImmutable();\n  Color.BLUE = new Color(0, 0, 255).setImmutable();\n  Color.CYAN = new Color(0, 255, 255).setImmutable();\n  Color.DARK_GRAY = new Color(64, 64, 64).setImmutable();\n  Color.GRAY = new Color(128, 128, 128).setImmutable();\n  Color.GREEN = new Color(0, 255, 0).setImmutable();\n  Color.LIGHT_GRAY = new Color(192, 192, 192).setImmutable();\n  Color.MAGENTA = new Color(255, 0, 255).setImmutable();\n  Color.ORANGE = new Color(255, 200, 0).setImmutable();\n  Color.PINK = new Color(255, 175, 175).setImmutable();\n  Color.RED = new Color(255, 0, 0).setImmutable();\n  Color.WHITE = new Color(255, 255, 255).setImmutable();\n  Color.YELLOW = new Color(255, 255, 0).setImmutable();\n  Color.interpolateRBGA = function (color1, color2, distance) {\n    if (distance < 0 || distance > 1) {\n      throw new Error('distance must be between 0 and 1: ' + distance);\n    }\n    var r = Math.floor(linear(0, 1, color1.r, color2.r, distance));\n    var g = Math.floor(linear(0, 1, color1.g, color2.g, distance));\n    var b = Math.floor(linear(0, 1, color1.b, color2.b, distance));\n    var a = linear(0, 1, color1.a, color2.a, distance);\n    return new Color(r, g, b, a);\n  };\n  return Color;\n});","\ndefine('SCENERY/util/Gradient',['require','SCENERY/util/Color','SCENERY/scenery','DOT/Vector2'],function (require) {\n  'use strict';\n  require('SCENERY/util/Color');\n  var scenery = require('SCENERY/scenery');\n  var Vector2 = require('DOT/Vector2');\n  scenery.Gradient = function Gradient(canvasGradient) {\n    sceneryAssert && sceneryAssert(this.constructor.name !== 'Gradient', 'Please create a LinearGradient or RadialGradient. Do not directly use the supertype Gradient.');\n    this.stops = [];\n    this.lastStopRatio = 0;\n    this.canvasGradient = canvasGradient;\n    this.transformMatrix = null;\n  };\n  var Gradient = scenery.Gradient;\n  Gradient.prototype = {\n    constructor: Gradient,\n    addColorStop: function (ratio, color) {\n      if (this.lastStopRatio > ratio) {\n        throw new Error('Color stops not specified in the order of increasing ratios');\n      } else {\n        this.lastStopRatio = ratio;\n      }\n      if (typeof color === 'string') {\n        color = new scenery.Color(color);\n      }\n      this.stops.push({\n        ratio: ratio,\n        color: color\n      });\n      this.canvasGradient.addColorStop(ratio, color.toCSS());\n      return this;\n    },\n    setTransformMatrix: function (transformMatrix) {\n      if (this.transformMatrix !== transformMatrix) {\n        this.transformMatrix = transformMatrix;\n      }\n      return this;\n    },\n    getCanvasStyle: function () {\n      return this.canvasGradient;\n    }\n  };\n  return Gradient;\n});","\ndefine('SCENERY/util/LinearGradient',['require','SCENERY/scenery','PHET_CORE/inherit','DOT/Vector2','SCENERY/util/Gradient'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Gradient = require('SCENERY/util/Gradient');\n  scenery.LinearGradient = function LinearGradient(x0, y0, x1, y1) {\n    sceneryAssert && sceneryAssert(isFinite(x0) && isFinite(y0) && isFinite(x1) && isFinite(y1));\n    var usesVectors = y1 === undefined;\n    if (usesVectors) {\n      sceneryAssert && sceneryAssert(x0 instanceof Vector2 && y0 instanceof Vector2, 'If less than 4 parameters are given, the first two parameters must be Vector2');\n    }\n    this.start = usesVectors ? x0 : new Vector2(x0, y0);\n    this.end = usesVectors ? y0 : new Vector2(x1, y1);\n    Gradient.call(this, scenery.scratchContext.createLinearGradient(x0, y0, x1, y1));\n  };\n  var LinearGradient = scenery.LinearGradient;\n  inherit(Gradient, LinearGradient, {\n    getSVGDefinition: function (id) {\n      var svgns = 'http://www.w3.org/2000/svg';\n      var definition = document.createElementNS(svgns, 'linearGradient');\n      definition.setAttribute('id', id);\n      definition.setAttribute('gradientUnits', 'userSpaceOnUse');\n      definition.setAttribute('x1', this.start.x);\n      definition.setAttribute('y1', this.start.y);\n      definition.setAttribute('x2', this.end.x);\n      definition.setAttribute('y2', this.end.y);\n      if (this.transformMatrix) {\n        definition.setAttribute('gradientTransform', this.transformMatrix.getSVGTransform());\n      }\n      _.each(this.stops, function (stop) {\n        var stopElement = document.createElementNS(svgns, 'stop');\n        stopElement.setAttribute('offset', stop.ratio);\n        stopElement.setAttribute('style', 'stop-color: ' + stop.color.withAlpha(1).toCSS() + '; stop-opacity: ' + stop.color.a.toFixed(20) + ';');\n        definition.appendChild(stopElement);\n      });\n      return definition;\n    },\n    toString: function () {\n      var result = 'new scenery.LinearGradient( ' + this.start.x + ', ' + this.start.y + ', ' + this.end.x + ', ' + this.end.y + ' )';\n      _.each(this.stops, function (stop) {\n        result += '.addColorStop( ' + stop.ratio + ', \\'' + stop.color.toString() + '\\' )';\n      });\n      return result;\n    }\n  });\n  return LinearGradient;\n});","\ndefine('SCENERY/util/LiveRegion',['require','PHET_CORE/inherit','PHET_CORE/escapeHTML','SCENERY/scenery'],function (require) {\n  'use strict';\n  var inherit = require('PHET_CORE/inherit');\n  var escapeHTML = require('PHET_CORE/escapeHTML');\n  var scenery = require('SCENERY/scenery');\n  var LiveRegion = scenery.LiveRegion = function LiveRegion(instance, property, options) {\n      var liveRegion = this;\n      this.property = property;\n      options = options || {};\n      options.tabIndex = options.tabIndex || 1;\n      this.element = document.createElement('div');\n      this.element.setAttribute('aria-live', 'polite');\n      this.element.setAttribute('role', 'region');\n      this.textNode = document.createTextNode('');\n      this.element.appendChild(this.textNode);\n      this.listener = function (newText) {\n        liveRegion.element.removeChild(liveRegion.textNode);\n        liveRegion.textNode = document.createTextNode(newText);\n        liveRegion.element.appendChild(liveRegion.textNode);\n      };\n      property.link(this.listener);\n    };\n  LiveRegion.prototype = {\n    constructor: scenery.LiveRegion,\n    dispose: function () {\n      this.property.unlink(this.listener);\n    }\n  };\n  return LiveRegion;\n});","\ndefine('SCENERY/util/Instance',['require','SCENERY/scenery','SCENERY/util/AccessibilityPeer','SCENERY/util/LiveRegion'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/AccessibilityPeer');\n  require('SCENERY/util/LiveRegion');\n  var accessibility = window.has && window.has('scenery.accessibility');\n  scenery.Instance = function Instance(trail, layer, parent) {\n    this.trail = trail;\n    this.layer = layer;\n    this.oldLayer = layer;\n    this.data = {};\n    this.parent = parent;\n    this.children = [];\n    this.peers = [];\n    this.liveRegions = [];\n    this.startAffectedLayer = null;\n    this.endAffectedLayer = null;\n    trail.setImmutable();\n    if (accessibility) {\n      this.addPeers();\n      this.addLiveRegions();\n    }\n    phetAllocation && phetAllocation('Instance');\n  };\n  var Instance = scenery.Instance;\n  Instance.prototype = {\n    constructor: Instance,\n    getScene: function () {\n      return this.trail.rootNode();\n    },\n    get scene() {\n      return this.getScene();\n    },\n    getNode: function () {\n      return this.trail.lastNode();\n    },\n    get node() {\n      return this.getNode();\n    },\n    changeLayer: function (newLayer) {\n      if (newLayer !== this.layer) {\n        sceneryLayerLog && sceneryLayerLog('changing instance ' + this.trail.toString() + ' to layer ' + (newLayer ? '#' + newLayer.id : 'null'));\n        this.layer && (this.layer._instanceCount -= 1);\n        this.layer = newLayer;\n        this.layer && (this.layer._instanceCount += 1);\n      }\n    },\n    updateLayer: function () {\n      if (this.layer !== this.oldLayer) {\n        this.reindex();\n        if (sceneryLayerLog) {\n          if (this.oldLayer && this.layer) {\n            sceneryLayerLog('moving instance ' + this.trail.toString() + ' from layer #' + this.oldLayer.id + ' to layer #' + this.layer.id);\n          } else if (this.layer) {\n            sceneryLayerLog('adding instance ' + this.trail.toString() + ' to layer #' + this.layer.id);\n          } else {\n            sceneryLayerLog('remove instance ' + this.trail.toString() + ' from layer #' + this.oldLayer.id);\n          }\n        }\n        if (this.oldLayer) {\n          this.oldLayer.removeInstance(this);\n        }\n        if (this.layer) {\n          this.layer.addInstance(this);\n        }\n        this.oldLayer = this.layer;\n      }\n    },\n    createChild: function (childNode, index) {\n      var childTrail = this.trail.copy().addDescendant(childNode);\n      var childInstance = new scenery.Instance(childTrail, null, this);\n      sceneryLayerLog && sceneryLayerLog('Instance.createChild: ' + childInstance.toString());\n      this.insertInstance(index, childInstance);\n      childInstance.getNode().addInstance(childInstance);\n      return childInstance;\n    },\n    addInstance: function (instance) {\n      sceneryAssert && sceneryAssert(instance, 'Instance.addInstance cannot have falsy parameter');\n      this.children.push(instance);\n    },\n    insertInstance: function (index, instance) {\n      sceneryAssert && sceneryAssert(instance, 'Instance.insert cannot have falsy instance parameter');\n      sceneryAssert && sceneryAssert(index >= 0 && index <= this.children.length, 'Instance.insert has bad index ' + index + ' for length ' + this.children.length);\n      this.children.splice(index, 0, instance);\n    },\n    removeInstance: function (index) {\n      sceneryAssert && sceneryAssert(typeof index === 'number');\n      this.children.splice(index, 1);\n    },\n    reindex: function () {\n      this.trail.reindex();\n    },\n    dispose: function () {\n      if (this.layer) {\n        this.changeLayer(null);\n        this.updateLayer();\n      }\n      this.parent = null;\n      this.children.length = 0;\n      this.getNode().removeInstance(this);\n      if (accessibility) {\n        this.removePeers();\n        this.removeLiveRegions();\n      }\n    },\n    equals: function (other) {\n      sceneryAssert && sceneryAssert(this === other === this.trail.equals(other.trail), 'We assume a 1-1 mapping from trails to instances');\n      return this === other;\n    },\n    compare: function (other) {\n      return this.trail.compare(other.trail);\n    },\n    getLayerString: function () {\n      return this.layer ? this.layer.getName() + '#' + this.layer.getId() : '-';\n    },\n    getTrailString: function () {\n      return this.trail.toString();\n    },\n    toString: function () {\n      return '{' + this.getTrailString() + ', ' + this.getLayerString() + '}';\n    },\n    getAffectedLayers: function () {\n      this.reindex();\n      return this.getScene().affectedLayers(this.trail);\n    },\n    addPeers: function () {\n      var node = this.getNode();\n      var scene = this.getScene();\n      var len = node._peers.length;\n      if (len) {\n        for (var i = 0; i < len; i++) {\n          var desc = node._peers[i];\n          var peer = new scenery.AccessibilityPeer(this, desc.element, desc.options);\n          scene.addPeer(peer);\n          this.peers.push(peer);\n        }\n      }\n    },\n    removePeers: function () {\n      var scene = this.getScene();\n      var i = this.peers.length;\n      while (i--) {\n        var peer = this.peers[i];\n        scene.removePeer(peer);\n        peer.dispose();\n      }\n      this.peers.length = 0;\n    },\n    addLiveRegions: function () {\n      var thisInstance = this;\n      var node = this.getNode();\n      var scene = this.getScene();\n      if (node._liveRegions.length) {\n        _.each(node._liveRegions, function (item) {\n          var liveRegion = new scenery.LiveRegion(thisInstance, item.property, item.options);\n          scene.addLiveRegion(liveRegion);\n          thisInstance.liveRegions.push(liveRegion);\n        });\n      }\n    },\n    removeLiveRegions: function () {\n      var scene = this.getScene();\n      _.each(this.liveRegions, function (liveRegion) {\n        scene.removeLiveRegion(liveRegion);\n        liveRegion.dispose();\n      });\n      this.peers.length = 0;\n    },\n    notifyVisibilityChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyVisibilityChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyVisibilityChange(this);\n      }\n    },\n    notifyOpacityChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyOpacityChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyOpacityChange(this);\n      }\n    },\n    notifyBeforeSelfChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyBeforeSelfChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      this.layer.notifyBeforeSelfChange(this);\n    },\n    notifyBeforeSubtreeChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyBeforeSubtreeChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyBeforeSubtreeChange(this);\n      }\n    },\n    notifyDirtySelfPaint: function () {\n      sceneryEventLog && sceneryEventLog('notifyDirtySelfPaint: ' + this.trail.toString() + ', ' + this.getLayerString());\n      sceneryAssert && sceneryAssert(this.getNode().isPainted(), 'Instance needs to be painted for notifyDirtySelfPaint');\n      this.layer.notifyDirtySelfPaint(this);\n    },\n    notifyDirtySubtreePaint: function () {\n      sceneryEventLog && sceneryEventLog('notifyDirtySubtreePaint: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyDirtySubtreePaint(this);\n      }\n    },\n    notifyDirtySubtreeBounds: function () {\n      sceneryEventLog && sceneryEventLog('notifyDirtySubtreeBounds: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyDirtySubtreeBounds(this);\n      }\n    },\n    notifyTransformChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyTransformChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      var affectedLayers = this.getAffectedLayers();\n      var i = affectedLayers.length;\n      while (i--) {\n        affectedLayers[i].notifyTransformChange(this);\n      }\n    },\n    notifyBoundsAccuracyChange: function () {\n      sceneryEventLog && sceneryEventLog('notifyBoundsAccuracyChange: ' + this.trail.toString() + ', ' + this.getLayerString());\n      this.layer.notifyBoundsAccuracyChange(this);\n    },\n    notifyStitch: function (match) {\n      sceneryEventLog && sceneryEventLog('notifyStitch: ' + this.trail.toString() + ' match:' + match + ', ' + this.getLayerString());\n      this.getScene().stitch(match);\n    },\n    markForLayerRefresh: function () {\n      sceneryEventLog && sceneryEventLog('markForLayerRefresh: ' + this.trail.toString() + ', ' + this.getLayerString());\n      this.getScene().markSceneForLayerRefresh(this);\n    },\n    markForInsertion: function (child, index) {\n      sceneryEventLog && sceneryEventLog('markForInsertion: ' + this.trail.toString() + ' child:' + child.id + ', index: ' + index + ', ' + this.getLayerString());\n      this.reindex();\n      this.getScene().markSceneForInsertion(this, child, index);\n    },\n    markForRemoval: function (child, index) {\n      sceneryEventLog && sceneryEventLog('markForRemoval: ' + this.trail.toString() + ' child:' + child.id + ', index: ' + index + ', ' + this.getLayerString());\n      this.reindex();\n      this.getScene().markSceneForRemoval(this, child, index);\n    }\n  };\n  return Instance;\n});","\ndefine('SCENERY/util/Pattern',['require','SCENERY/scenery','DOT/Vector2'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var Vector2 = require('DOT/Vector2');\n  scenery.Pattern = function Pattern(image) {\n    this.image = image;\n    this.canvasPattern = scenery.scratchContext.createPattern(image, 'repeat');\n    this.transformMatrix = null;\n  };\n  var Pattern = scenery.Pattern;\n  Pattern.prototype = {\n    constructor: Pattern,\n    setTransformMatrix: function (transformMatrix) {\n      this.transformMatrix = transformMatrix;\n      return this;\n    },\n    getCanvasStyle: function () {\n      return this.canvasPattern;\n    },\n    getSVGDefinition: function (id) {\n      var svgns = 'http://www.w3.org/2000/svg';\n      var definition = document.createElementNS(svgns, 'pattern');\n      definition.setAttribute('id', id);\n      definition.setAttribute('patternUnits', 'userSpaceOnUse');\n      definition.setAttribute('patternContentUnits', 'userSpaceOnUse');\n      definition.setAttribute('x', 0);\n      definition.setAttribute('y', 0);\n      definition.setAttribute('width', this.image.width);\n      definition.setAttribute('height', this.image.height);\n      if (this.transformMatrix) {\n        definition.setAttribute('patternTransform', this.transformMatrix.getSVGTransform());\n      }\n      definition.appendChild(scenery.Image.createSVGImage(this.image.src, this.image.width, this.image.height));\n      return definition;\n    },\n    toString: function () {\n      return 'new scenery.Pattern( $( \\'<img src=\"' + this.image.src + '\"/>\\' )[0] )';\n    }\n  };\n  return Pattern;\n});","\ndefine('SCENERY/util/RadialGradient',['require','SCENERY/scenery','PHET_CORE/inherit','DOT/Vector2','SCENERY/util/Gradient'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  var Gradient = require('SCENERY/util/Gradient');\n  scenery.RadialGradient = function RadialGradient(x0, y0, r0, x1, y1, r1) {\n    this.start = new Vector2(x0, y0);\n    this.end = new Vector2(x1, y1);\n    this.startRadius = r0;\n    this.endRadius = r1;\n    this.focalPoint = this.start.plus(this.end.minus(this.start).times(this.startRadius / (this.startRadius - this.endRadius)));\n    if (this.startRadius >= this.endRadius) {\n      sceneryAssert && sceneryAssert(this.focalPoint.minus(this.start).magnitude() <= this.startRadius);\n    } else {\n      sceneryAssert && sceneryAssert(this.focalPoint.minus(this.end).magnitude() <= this.endRadius);\n    }\n    Gradient.call(this, scenery.scratchContext.createRadialGradient(x0, y0, r0, x1, y1, r1));\n  };\n  var RadialGradient = scenery.RadialGradient;\n  inherit(Gradient, RadialGradient, {\n    getSVGDefinition: function (id) {\n      var startIsLarger = this.startRadius > this.endRadius;\n      var largePoint = startIsLarger ? this.start : this.end;\n      var smallPoint = startIsLarger ? this.end : this.start;\n      var maxRadius = Math.max(this.startRadius, this.endRadius);\n      var minRadius = Math.min(this.startRadius, this.endRadius);\n      var svgns = 'http://www.w3.org/2000/svg';\n      var definition = document.createElementNS(svgns, 'radialGradient');\n      definition.setAttribute('id', id);\n      definition.setAttribute('gradientUnits', 'userSpaceOnUse');\n      definition.setAttribute('cx', largePoint.x);\n      definition.setAttribute('cy', largePoint.y);\n      definition.setAttribute('r', maxRadius);\n      definition.setAttribute('fx', this.focalPoint.x);\n      definition.setAttribute('fy', this.focalPoint.y);\n      if (this.transformMatrix) {\n        definition.setAttribute('gradientTransform', this.transformMatrix.getSVGTransform());\n      }\n      function linearMap(a0, b0, a1, b1, x) {\n        return a1 + (x - a0) * (b1 - a1) / (b0 - a0);\n      }\n      function applyStop(stop) {\n        var ratio = startIsLarger ? 1 - stop.ratio : stop.ratio;\n        if (minRadius > 0) {\n          ratio = linearMap(0, 1, minRadius / maxRadius, 1, ratio);\n        }\n        var stopElement = document.createElementNS(svgns, 'stop');\n        stopElement.setAttribute('offset', ratio);\n        stopElement.setAttribute('style', 'stop-color: ' + stop.color.withAlpha(1).toCSS() + '; stop-opacity: ' + stop.color.a.toFixed(20) + ';');\n        definition.appendChild(stopElement);\n      }\n      var i;\n      if (startIsLarger) {\n        for (i = this.stops.length - 1; i >= 0; i--) {\n          applyStop(this.stops[i]);\n        }\n      } else {\n        for (i = 0; i < this.stops.length; i++) {\n          applyStop(this.stops[i]);\n        }\n      }\n      return definition;\n    },\n    toString: function () {\n      var result = 'new scenery.RadialGradient( ' + this.start.x + ', ' + this.start.y + ', ' + this.startRadius + ', ' + this.end.x + ', ' + this.end.y + ', ' + this.endRadius + ' )';\n      _.each(this.stops, function (stop) {\n        result += '.addColorStop( ' + stop.ratio + ', \\'' + stop.color.toString() + '\\' )';\n      });\n      return result;\n    }\n  });\n  return RadialGradient;\n});","\ndefine('SCENERY/util/RenderInterval',['require','SCENERY/scenery','SCENERY/util/Trail'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  require('SCENERY/util/Trail');\n  scenery.RenderInterval = function RenderInterval(start, end) {\n    sceneryAssert && sceneryAssert(!start || !end || start.compare(end) <= 0, 'RenderInterval parameters must not be out of order');\n    this.start = start;\n    this.end = end;\n  };\n  var RenderInterval = scenery.RenderInterval;\n  RenderInterval.compareDisjoint = function (x, y) {\n    if (!x.start && !y.start) {\n      return 0;\n    }\n    if (!x.start || !y.start) {\n      return x.start ? 1 : -1;\n    }\n    return x.start.compare(y.start);\n  };\n  RenderInterval.prototype = {\n    constructor: RenderInterval,\n    reindex: function () {\n      this.start && this.start.reindex();\n      this.end && this.end.reindex();\n    },\n    isValidExclusive: function () {\n      return !this.start || !this.end || this.start.compare(this.end) < 0;\n    },\n    exclusiveUnionable: function (interval) {\n      sceneryAssert && sceneryAssert(this.isValidExclusive(), 'exclusiveUnionable requires exclusive intervals');\n      sceneryAssert && sceneryAssert(interval.isValidExclusive(), 'exclusiveUnionable requires exclusive intervals');\n      return (!this.start || !interval.end || this.start.compare(interval.end) === -1) && (!this.end || !interval.start || this.end.compare(interval.start) === 1);\n    },\n    exclusiveContains: function (trail) {\n      sceneryAssert && sceneryAssert(trail);\n      return (!this.start || this.start.compare(trail) < 0) && (!this.end || this.end.compare(trail) > 0);\n    },\n    union: function (interval) {\n      var thisA = !this.start || interval.start && this.start.compare(interval.start) === -1;\n      var thisB = !this.end || interval.end && this.end.compare(interval.end) === 1;\n      return new RenderInterval(thisA ? this.start : interval.start, thisB ? this.end : interval.end);\n    },\n    toString: function () {\n      return '[' + (this.start ? this.start.toString() : this.start) + ',' + (this.end ? this.end.toString() : this.end) + ']';\n    }\n  };\n  return RenderInterval;\n});","\ndefine('SCENERY/util/SceneImage',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  scenery.SceneImage = function SceneImage(scene) {\n    this.scene = scene;\n    this.canvas = document.createElement('canvas');\n    this.context = this.canvas.getContext('2d');\n    this.img = document.createElement('img');\n    this.update();\n  };\n  var SceneImage = scenery.SceneImage;\n  SceneImage.prototype = {\n    constructor: SceneImage,\n    update: function (onComplete) {\n      var self = this;\n      this.scene.updateScene();\n      this.canvas.width = this.scene.getSceneWidth();\n      this.canvas.height = this.scene.getSceneHeight();\n      this.scene.renderToCanvas(this.canvas, this.context, function () {\n        var url = self.toDataURL();\n        self.img.onload = function () {\n          onComplete();\n          delete self.img.onload;\n        };\n        self.img.src = url;\n      });\n    }\n  };\n  return SceneImage;\n});","\ndefine('SCENERY/util/SceneryStyle',['require','SCENERY/scenery'],function (require) {\n  'use strict';\n  var scenery = require('SCENERY/scenery');\n  var styleElement = document.createElement('style');\n  styleElement.type = 'text/css';\n  document.head.appendChild(styleElement);\n  var stylesheet = document.styleSheets[document.styleSheets.length - 1];\n  sceneryAssert && sceneryAssert(stylesheet.disabled === false);\n  sceneryAssert && sceneryAssert(stylesheet.cssRules.length === 0);\n  return {\n    stylesheet: stylesheet,\n    styleElement: styleElement,\n    addRule: function (ruleString) {\n      this.stylesheet.insertRule(ruleString, 0);\n    }\n  };\n});","\ndefine('PHET_CORE/collect',['require'],function (require) {\n  'use strict';\n  return function collect(iterate) {\n    var result = [];\n    iterate(function (ob) {\n      result.push(ob);\n    });\n    return result;\n  };\n});","\ndefine('SCENERY/Scene',['require','PHET_CORE/collect','PHET_CORE/inherit','DOT/Bounds2','DOT/Vector2','DOT/Matrix3','KITE/Shape','SCENERY/scenery','SCENERY/nodes/Node','SCENERY/util/Instance','SCENERY/util/Trail','SCENERY/util/RenderInterval','SCENERY/util/TrailPointer','SCENERY/input/Input','SCENERY/layers/LayerBuilder','SCENERY/layers/Renderer','SCENERY/util/Util'],function (require) {\n  'use strict';\n  var collect = require('PHET_CORE/collect');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  var Vector2 = require('DOT/Vector2');\n  var Matrix3 = require('DOT/Matrix3');\n  var Shape = require('KITE/Shape');\n  var scenery = require('SCENERY/scenery');\n  var Node = require('SCENERY/nodes/Node');\n  require('SCENERY/util/Instance');\n  require('SCENERY/util/Trail');\n  require('SCENERY/util/RenderInterval');\n  require('SCENERY/util/TrailPointer');\n  require('SCENERY/input/Input');\n  require('SCENERY/layers/LayerBuilder');\n  require('SCENERY/layers/Renderer');\n  var Util = require('SCENERY/util/Util');\n  var objectCreate = Util.objectCreate;\n  var accessibility = window.has && window.has('scenery.accessibility');\n  var forceNewLayers = true;\n  function buildInstances(instance) {\n    var node = instance.getNode();\n    var len = node._children.length;\n    for (var i = 0; i < len; i++) {\n      buildInstances(instance.createChild(node._children[i], i));\n    }\n  }\n  scenery.Scene = function Scene($main, options) {\n    sceneryAssert && sceneryAssert($main[0], 'A main container is required for a scene');\n    this.$main = $main;\n    this.main = $main[0];\n    this.main.scene = this;\n    this.scenery = scenery;\n    options = _.extend({\n      allowSceneOverflow: false,\n      allowCSSHacks: true,\n      allowDevicePixelRatioScaling: false,\n      enablePointerEvents: true,\n      preferredSceneLayerType: scenery.CanvasDefaultLayerType,\n      width: $main.width(),\n      height: $main.height()\n    }, options || {});\n    this.backingScale = options.allowDevicePixelRatioScaling ? Util.backingScale(document.createElement('canvas').getContext('2d')) : 1;\n    this.enablePointerEvents = options.enablePointerEvents;\n    Node.call(this, options);\n    var scene = this;\n    window.debugScene = scene;\n    this.layers = [];\n    this.layerChangeIntervals = [];\n    this.lastCursor = null;\n    this.defaultCursor = $main.css('cursor');\n    this.setSize(options.width, options.height);\n    this.sceneBounds = new Bounds2(0, 0, options.width, options.height);\n    this.rootInstance = new scenery.Instance(new scenery.Trail(this), null, null);\n    this.addInstance(this.rootInstance);\n    this.preferredSceneLayerType = options.preferredSceneLayerType;\n    applyCSSHacks($main, options);\n    if (accessibility) {\n      this.activePeer = null;\n      this.accessibilityLayer = document.createElement('div');\n      this.accessibilityLayer.className = 'accessibility-layer';\n      this.accessibilityLayer.style.zIndex = -1;\n      this.accessibilityLayer.style.position = 'relative';\n      $main[0].appendChild(this.accessibilityLayer);\n      this.focusRingSVGContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      this.focusRingSVGContainer.style.position = 'absolute';\n      this.focusRingSVGContainer.style.top = 0;\n      this.focusRingSVGContainer.style.left = 0;\n      this.focusRingSVGContainer.style['pointer-events'] = 'none';\n      this.resizeFocusRingSVGContainer(options.width, options.height);\n      this.focusRingPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      this.focusRingPath.setAttribute('style', 'fill: none; stroke: blue; stroke-width: 5;');\n      this.focusRingPath.setAttribute('id', 'p1');\n      this.focusRingSVGContainer.appendChild(this.focusRingPath);\n      $main[0].appendChild(this.focusRingSVGContainer);\n      this.updateFocusRing = function () {\n        sceneryAssert && sceneryAssert(scene.activePeer, 'scene should have an active peer when changing the focus ring bounds');\n        scene.focusRingPath.setAttribute('d', Shape.bounds(scene.activePeer.getGlobalBounds()).getSVGPath());\n      };\n      this.liveRegionLayer = document.createElement('div');\n      this.liveRegionLayer.className = 'live-region-layer';\n      this.liveRegionLayer.style.zIndex = -2;\n      this.liveRegionLayer.style.position = 'relative';\n      $main[0].appendChild(this.liveRegionLayer);\n    }\n  };\n  var Scene = scenery.Scene;\n  inherit(Node, Scene, {\n    updateScene: function (args) {\n      var scene = this;\n      if (this.input) {\n        this.input.validatePointers();\n      }\n      this.validateBounds();\n      this.validatePaint();\n      if (!this.layers.length) {\n        return;\n      }\n      var i = this.layers.length;\n      while (i--) {\n        this.layers[i].render(scene, args);\n      }\n      this.updateCursor();\n    },\n    renderScene: function () {\n      this.updateScene();\n    },\n    addPeer: function (peer) {\n      this.accessibilityLayer.appendChild(peer.peerElement);\n    },\n    removePeer: function (peer) {\n      this.accessibilityLayer.removeChild(peer.peerElement);\n    },\n    addLiveRegion: function (liveRegion) {\n      this.liveRegionLayer.appendChild(liveRegion.element);\n    },\n    removeLiveRegion: function (liveRegion) {\n      this.liveRegionLayer.removeChild(liveRegion.element);\n    },\n    setActivePeer: function (peer) {\n      if (this.activePeer !== peer) {\n        var scene = this;\n        if (this.activePeer) {\n          this.activePeer.instance.node.removeEventListener('bounds', this.updateFocusRing);\n        }\n        this.activePeer = peer;\n        if (peer) {\n          this.activePeer.instance.node.addEventListener('bounds', this.updateFocusRing);\n          this.updateFocusRing();\n        } else {\n          this.focusRingPath.setAttribute('d', 'M 0 0');\n        }\n      }\n    },\n    getActivePeer: function (peer) {\n      return this.activePeer;\n    },\n    focusPeer: function (peer) {\n      this.setActivePeer(peer);\n    },\n    blurPeer: function (peer) {\n      sceneryAssert && sceneryAssert(this.getActivePeer() === peer, 'Can only blur an active peer');\n      this.setActivePeer(null);\n    },\n    markInterval: function (affectedTrail) {\n      affectedTrail.reindex();\n      var beforeTrail = affectedTrail.previousPainted();\n      var afterTrailPointer = new scenery.TrailPointer(affectedTrail.copy(), false);\n      while (afterTrailPointer.hasTrail() && (!afterTrailPointer.isBefore || !afterTrailPointer.trail.isPainted())) {\n        afterTrailPointer.nestedForwards();\n      }\n      var afterTrail = afterTrailPointer.trail;\n      sceneryAssert && sceneryAssert(!beforeTrail || beforeTrail.areIndicesValid(), 'beforeTrail needs to be valid');\n      sceneryAssert && sceneryAssert(!afterTrail || afterTrail.areIndicesValid(), 'afterTrail needs to be valid');\n      sceneryAssert && sceneryAssert(!beforeTrail || !afterTrail || beforeTrail.compare(afterTrail) !== 0, 'Marked interval needs to be exclusive');\n      this.addLayerChangeInterval(new scenery.RenderInterval(beforeTrail, afterTrail));\n    },\n    addLayerChangeInterval: function (interval) {\n      if (sceneryLayerLog) {\n        sceneryLayerLog('adding interval: ' + interval.toString() + ' to intervals:');\n        _.each(this.layerChangeIntervals, function (interval) {\n          sceneryLayerLog('  ' + interval.toString());\n        });\n      }\n      for (var i = 0; i < this.layerChangeIntervals.length; i++) {\n        var other = this.layerChangeIntervals[i];\n        other.reindex();\n        if (interval.exclusiveUnionable(other)) {\n          interval = interval.union(other);\n          this.layerChangeIntervals.splice(i--, 1);\n          sceneryLayerLog && sceneryLayerLog('removing interval: ' + other.toString());\n        }\n      }\n      this.layerChangeIntervals.push(interval);\n      if (sceneryLayerLog) {\n        sceneryLayerLog('new intervals: ');\n        _.each(this.layerChangeIntervals, function (interval) {\n          sceneryLayerLog('  ' + interval.toString());\n        });\n        sceneryLayerLog('---');\n      }\n    },\n    createLayer: function (layerType, layerArgs, startBoundary, endBoundary) {\n      var layer = layerType.createLayer(_.extend({\n          startBoundary: startBoundary,\n          endBoundary: endBoundary\n        }, layerArgs));\n      layer.type = layerType;\n      sceneryLayerLog && sceneryLayerLog('created layer: ' + layer.getId() + ' of type ' + layer.type.name);\n      return layer;\n    },\n    insertLayer: function (layer) {\n      for (var i = 0; i < this.layers.length; i++) {\n        if (layer.endPaintedTrail.isBefore(this.layers[i].startPaintedTrail)) {\n          this.layers.splice(i, 0, layer);\n          return;\n        }\n      }\n      this.layers.push(layer);\n    },\n    getBoundaries: function () {\n      return [this.layers[0].startBoundary].concat(_.pluck(this.layers, 'endBoundary'));\n    },\n    calculateBoundaries: function (beforeLayerType, beforeTrail, afterTrail) {\n      sceneryLayerLog && sceneryLayerLog('build between ' + (beforeTrail ? beforeTrail.toString() : beforeTrail) + ',' + (afterTrail ? afterTrail.toString() : afterTrail) + ' with beforeType: ' + (beforeLayerType ? beforeLayerType.name : null));\n      var builder = new scenery.LayerBuilder(this, beforeLayerType, beforeTrail, afterTrail);\n      if (this.preferredSceneLayerType) {\n        builder.pushPreferredLayerType(this.preferredSceneLayerType);\n      }\n      builder.run();\n      return builder.boundaries;\n    },\n    stitch: function (match) {\n      var scene = this;\n      var i;\n      sceneryLayerLog && sceneryLayerLog('-----------------------------------\\nbeginning stitch');\n      if (!this.layerChangeIntervals.length) {\n        return;\n      }\n      var stitchData = {\n          affectedInstances: [],\n          newLayers: []\n        };\n      var layerArgs = {\n          $main: this.$main,\n          scene: this,\n          baseNode: this\n        };\n      i = this.layerChangeIntervals.length;\n      while (i--) {\n        this.layerChangeIntervals[i].reindex();\n      }\n      this.layerChangeIntervals.sort(scenery.RenderInterval.compareDisjoint);\n      sceneryLayerLog && sceneryLayerLog('stitching on intervals: \\n' + this.layerChangeIntervals.join('\\n'));\n      for (i = 0; i < this.layerChangeIntervals.length; i++) {\n        var interval = this.layerChangeIntervals[i];\n        sceneryLayerLog && sceneryLayerLog('stitch on interval ' + interval.toString());\n        var beforeTrail = interval.start;\n        var afterTrail = interval.end;\n        var beforeInstance = beforeTrail ? beforeTrail.getInstance() : null;\n        var afterInstance = afterTrail ? afterTrail.getInstance() : null;\n        var beforeLayer = beforeInstance ? beforeInstance.layer : null;\n        var afterLayer = afterInstance ? afterInstance.layer : null;\n        var boundaries = this.calculateBoundaries(beforeLayer ? beforeLayer.type : null, beforeTrail, afterTrail);\n        this.stitchInterval(stitchData, layerArgs, beforeTrail, afterTrail, beforeLayer, afterLayer, boundaries, match);\n      }\n      this.layerChangeIntervals.length = 0;\n      sceneryLayerLog && sceneryLayerLog('------ finished intervals in stitching');\n      i = this.layers.length;\n      while (i--) {\n        var layer = this.layers[i];\n        layer.startBoundary.reindex();\n        layer.endBoundary.reindex();\n        if (layer._instanceCount === 0) {\n          sceneryLayerLog && sceneryLayerLog('disposing layer: ' + layer.getId());\n          this.disposeLayer(layer);\n        }\n      }\n      i = stitchData.newLayers.length;\n      while (i--) {\n        var newLayer = stitchData.newLayers[i];\n        newLayer.startBoundary.reindex();\n        newLayer.endBoundary.reindex();\n        sceneryAssert && sceneryAssert(newLayer._instanceCount, 'ensure we are not adding empty layers');\n        sceneryLayerLog && sceneryLayerLog('inserting layer: ' + newLayer.getId());\n        scene.insertLayer(newLayer);\n      }\n      this.reindexLayers();\n      sceneryLayerLog && sceneryLayerLog('------ updating layer references');\n      var affectedLen = stitchData.affectedInstances.length;\n      for (i = 0; i < affectedLen; i++) {\n        stitchData.affectedInstances[i].updateLayer();\n      }\n      sceneryAssertExtra && sceneryAssertExtra(this.layerAudit());\n      sceneryLayerLog && sceneryLayerLog('finished stitch\\n-----------------------------------');\n    },\n    stitchInterval: function (stitchData, layerArgs, beforeTrail, afterTrail, beforeLayer, afterLayer, boundaries, match) {\n      var scene = this;\n      beforeTrail && beforeTrail.setImmutable();\n      afterTrail && afterTrail.setImmutable();\n      var afterLayerEndBoundary = afterLayer ? afterLayer.endBoundary : null;\n      var beforeLayerIndex = beforeLayer ? _.indexOf(this.layers, beforeLayer) : -1;\n      var afterLayerIndex = afterLayer ? _.indexOf(this.layers, afterLayer) : this.layers.length;\n      var beforePointer = beforeTrail ? new scenery.TrailPointer(beforeTrail, true) : new scenery.TrailPointer(new scenery.Trail(this), true);\n      var afterPointer = afterTrail ? new scenery.TrailPointer(afterTrail, true) : new scenery.TrailPointer(new scenery.Trail(this), false);\n      sceneryLayerLog && sceneryLayerLog('\\nstitching with boundaries:\\n' + _.map(boundaries, function (boundary) {\n        return boundary.toString();\n      }).join('\\n'));\n      sceneryLayerLog && sceneryLayerLog('               layers: ' + (beforeLayer ? beforeLayer.getId() : '-') + ' to ' + (afterLayer ? afterLayer.getId() : '-'));\n      sceneryLayerLog && sceneryLayerLog('               trails: ' + (beforeTrail ? beforeTrail.toString() : '-') + ' to ' + (afterTrail ? afterTrail.toString() : '-'));\n      sceneryLayerLog && sceneryLayerLog('               match: ' + match);\n      var nextBoundaryIndex = 0;\n      var nextBoundary = boundaries[nextBoundaryIndex];\n      var instancesToAddToLayer = [];\n      var currentTrail = beforeTrail;\n      var currentLayer = beforeLayer;\n      var currentLayerType = beforeLayer ? beforeLayer.type : null;\n      var currentStartBoundary = null;\n      var matchingLayer = null;\n      function addPendingTrailsToLayer() {\n        var len = instancesToAddToLayer.length;\n        for (var i = 0; i < len; i++) {\n          var instance = instancesToAddToLayer[i];\n          instance.changeLayer(currentLayer);\n          stitchData.affectedInstances.push(instance);\n        }\n        instancesToAddToLayer.length = 0;\n      }\n      function addAndCreateLayer(startBoundary, endBoundary) {\n        currentLayer = scene.createLayer(currentLayerType, layerArgs, startBoundary, endBoundary);\n        stitchData.newLayers.push(currentLayer);\n      }\n      function step(trail, isEnd) {\n        sceneryLayerLog && sceneryLayerLog('step: ' + (trail ? trail.toString() : trail));\n        trail && trail.setImmutable();\n        if (nextBoundary && nextBoundary.equivalentPreviousTrail(currentTrail)) {\n          sceneryAssert && sceneryAssert(nextBoundary.equivalentNextTrail(trail));\n          sceneryLayerLog && sceneryLayerLog(nextBoundary.toString());\n          if (currentLayer || currentStartBoundary) {\n            if (currentLayer) {\n              sceneryLayerLog && sceneryLayerLog('has currentLayer: ' + currentLayer.getId());\n              currentLayer.setEndBoundary(nextBoundary);\n            } else {\n              sceneryAssert && sceneryAssert(currentStartBoundary);\n              if (matchingLayer) {\n                sceneryLayerLog && sceneryLayerLog('matching layer used: ' + matchingLayer.getId());\n                matchingLayer.setStartBoundary(currentStartBoundary);\n                matchingLayer.setEndBoundary(nextBoundary);\n                currentLayer = matchingLayer;\n              } else {\n                sceneryLayerLog && sceneryLayerLog('creating layer');\n                addAndCreateLayer(currentStartBoundary, nextBoundary);\n              }\n            }\n            sceneryAssert && sceneryAssert(currentLayer.startPaintedTrail);\n            sceneryAssert && sceneryAssert(currentLayer.endPaintedTrail);\n            addPendingTrailsToLayer();\n          } else {\n            sceneryLayerLog && sceneryLayerLog('was first layer');\n            sceneryAssert && sceneryAssert(instancesToAddToLayer.length === 0);\n          }\n          currentLayer = null;\n          currentLayerType = nextBoundary.nextLayerType;\n          currentStartBoundary = nextBoundary;\n          matchingLayer = null;\n          nextBoundaryIndex++;\n          nextBoundary = boundaries[nextBoundaryIndex];\n        }\n        if (trail && !isEnd) {\n          instancesToAddToLayer.push(trail.getInstance());\n        }\n        if (match && !isEnd) {\n          var layer = trail.getInstance().layer;\n          if (layer.type === currentLayerType && !forceNewLayers) {\n            matchingLayer = layer;\n          }\n        }\n        currentTrail = trail;\n      }\n      function startStep(trail) {\n        sceneryLayerLog && sceneryLayerLog('startStep: ' + (trail ? trail.toString() : trail));\n      }\n      function middleStep(trail) {\n        sceneryLayerLog && sceneryLayerLog('middleStep: ' + trail.toString());\n        step(trail, false);\n      }\n      function endStep(trail) {\n        sceneryLayerLog && sceneryLayerLog('endStep: ' + (trail ? trail.toString() : trail));\n        step(trail, true);\n        if (beforeLayer !== afterLayer && boundaries.length === 0) {\n          sceneryLayerLog && sceneryLayerLog('gluing layer');\n          sceneryLayerLog && sceneryLayerLog('endBoundary: ' + afterLayer.endBoundary.toString());\n          beforeLayer.setEndBoundary(afterLayer.endBoundary);\n          currentLayer = beforeLayer;\n          addPendingTrailsToLayer();\n          var len = afterLayer._layerTrails.length;\n          for (var i = 0; i < len; i++) {\n            var endTrail = afterLayer._layerTrails[i];\n            endTrail.reindex();\n            var instance = endTrail.getInstance();\n            instance.changeLayer(beforeLayer);\n            stitchData.affectedInstances.push(instance);\n          }\n        } else if (beforeLayer && beforeLayer === afterLayer && boundaries.length > 0) {\n          sceneryLayerLog && sceneryLayerLog('ungluing layer');\n          sceneryAssert && sceneryAssert(currentStartBoundary);\n          addAndCreateLayer(currentStartBoundary, afterLayerEndBoundary);\n          addPendingTrailsToLayer();\n          currentLayer.endPaintedTrail.reindex();\n          scenery.Trail.eachPaintedTrailBetween(afterTrail, currentLayer.endPaintedTrail, function (subtrail) {\n            var instance = subtrail.getInstance();\n            instance.changeLayer(currentLayer);\n            stitchData.affectedInstances.push(instance);\n          }, false, scene);\n        } else if (!beforeLayer && !afterLayer && boundaries.length === 1 && !boundaries[0].hasNext() && !boundaries[0].hasPrevious()) {\n        } else {\n          currentLayer = afterLayer;\n          if (currentLayer && currentStartBoundary) {\n            currentLayer.setStartBoundary(currentStartBoundary);\n          }\n          addPendingTrailsToLayer();\n        }\n      }\n      startStep(beforeTrail);\n      beforePointer.eachTrailBetween(afterPointer, function (trail) {\n        if (!trail.isPainted() || beforeTrail && trail.equals(beforeTrail)) {\n          return;\n        }\n        middleStep(trail.copy());\n      });\n      endStep(afterTrail);\n    },\n    rebuildLayers: function () {\n      sceneryLayerLog && sceneryLayerLog('Scene: rebuildLayers');\n      this.markInterval(new scenery.Trail(this));\n      this.stitch(true);\n    },\n    reindexLayers: function () {\n      sceneryLayerLog && sceneryLayerLog('Scene: reindexLayers');\n      var index = 1;\n      if (accessibility && this.accessibiltyLayer) {\n        this.accessibilityLayer.style.zIndex = 9999;\n        index++;\n      }\n      var len = this.layers.length;\n      for (var i = 0; i < len; i++) {\n        index = this.layers[i].reindex(index);\n      }\n      if (accessibility) {\n        if (this.focusRingSVGContainer) {\n          this.focusRingSVGContainer.style.zIndex = index;\n        }\n      }\n    },\n    dispose: function () {\n      this.disposeLayers();\n      if (this.input) {\n        this.input.disposeListeners();\n      }\n      delete this.main.scene;\n    },\n    disposeLayer: function (layer) {\n      layer.dispose();\n      this.layers.splice(_.indexOf(this.layers, layer), 1);\n    },\n    disposeLayers: function () {\n      var scene = this;\n      var i = this.layers.length;\n      while (i--) {\n        this.disposeLayer(this.layers[i]);\n      }\n    },\n    affectedLayers: function (trail) {\n      sceneryAssert && sceneryAssert(!(trail.isEmpty() || trail.nodes[0] !== this), 'layerLookup root matches');\n      var n = this.layers.length;\n      if (n === 0) {\n        sceneryAssert && sceneryAssert(!trail.lastNode().isPainted(), 'There should be at least one layer for a painted trail');\n        return [];\n      }\n      sceneryAssert && sceneryAssert(trail.areIndicesValid());\n      var layers = this.layers;\n      var low = -1;\n      var high = n;\n      var mid;\n      while (high - 1 > low) {\n        mid = high + low >> 1;\n        var endTrail = layers[mid].endPaintedTrail;\n        sceneryAssert && sceneryAssert(endTrail.areIndicesValid());\n        var notAfter = scenery.TrailPointer.compareNested(trail, true, endTrail, true) !== 1;\n        if (notAfter) {\n          high = mid;\n        } else {\n          low = mid;\n        }\n      }\n      var firstIndex = high;\n      low = -1;\n      high = n;\n      while (high - 1 > low) {\n        mid = high + low >> 1;\n        var startTrail = layers[mid].startPaintedTrail;\n        startTrail.reindex();\n        sceneryAssert && sceneryAssert(startTrail.areIndicesValid());\n        var notBefore = scenery.TrailPointer.compareNested(trail, false, startTrail, true) !== -1;\n        if (notBefore) {\n          low = mid;\n        } else {\n          high = mid;\n        }\n      }\n      var lastIndex = low;\n      return layers.slice(firstIndex, lastIndex + 1);\n    },\n    renderToCanvas: function (canvas, context, callback) {\n      var count = 0;\n      var started = false;\n      var delayCounts = {\n          increment: function () {\n            count++;\n          },\n          decrement: function () {\n            count--;\n            if (count === 0 && callback && started) {\n              callback();\n            }\n          }\n        };\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      var len = this.layers.length;\n      for (var i = 0; i < len; i++) {\n        this.layers[i].renderToCanvas(canvas, context, delayCounts);\n      }\n      if (count === 0) {\n        if (callback) {\n          callback();\n        }\n      } else {\n        started = true;\n      }\n    },\n    canvasDataURL: function (callback) {\n      this.canvasSnapshot(function (canvas) {\n        callback(canvas.toDataURL());\n      });\n    },\n    canvasSnapshot: function (callback) {\n      var canvas = document.createElement('canvas');\n      canvas.width = this.sceneBounds.getWidth();\n      canvas.height = this.sceneBounds.getHeight();\n      var context = canvas.getContext('2d');\n      this.renderToCanvas(canvas, context, function () {\n        callback(canvas, context.getImageData(0, 0, canvas.width, canvas.height));\n      });\n    },\n    setSize: function (width, height) {\n      this.$main.width(width);\n      this.$main.height(height);\n      this.$main.css('clip', 'rect(0px,' + width + 'px,' + height + 'px,0px)');\n      this.sceneBounds = new Bounds2(0, 0, width, height);\n    },\n    resize: function (width, height) {\n      if (this.sceneBounds.width !== width || this.sceneBounds.height !== height) {\n        this.setSize(width, height);\n        this.rebuildLayers();\n        if (accessibility) {\n          this.resizeAccessibilityLayer(width, height);\n          this.resizeFocusRingSVGContainer(width, height);\n          if (this.updateFocusRing && this.activePeer) {\n            this.updateFocusRing();\n          }\n        }\n        if (this.input) {\n          this.input.validatePointers();\n        }\n        this.fireEvent('resize', {\n          width: width,\n          height: height\n        });\n      }\n    },\n    resizeAccessibilityLayer: function (width, height) {\n      if (this.accessibilityLayer) {\n        this.accessibilityLayer.setAttribute('width', width);\n        this.accessibilityLayer.setAttribute('height', height);\n        this.accessibilityLayer.style.clip = 'rect(0px,' + width + 'px,' + height + 'px,0px)';\n      }\n    },\n    resizeFocusRingSVGContainer: function (width, height) {\n      if (this.focusRingSVGContainer) {\n        this.focusRingSVGContainer.setAttribute('width', width);\n        this.focusRingSVGContainer.setAttribute('height', height);\n        this.focusRingSVGContainer.style.clip = 'rect(0px,' + width + 'px,' + height + 'px,0px)';\n      }\n    },\n    getSceneWidth: function () {\n      return this.sceneBounds.getWidth();\n    },\n    getSceneHeight: function () {\n      return this.sceneBounds.getHeight();\n    },\n    markSceneForLayerRefresh: function (instance) {\n      sceneryLayerLog && sceneryLayerLog('Scene: marking layer refresh: ' + instance.trail.toString());\n      this.markInterval(instance.trail);\n    },\n    markSceneForInsertion: function (instance, child, index) {\n      var affectedTrail = instance.trail.copy().addDescendant(child);\n      sceneryLayerLog && sceneryLayerLog('Scene: marking insertion: ' + affectedTrail.toString());\n      sceneryLayerLog && sceneryLayerLog('inserting instances onto ' + instance.toString() + ' with child ' + child.id + ' and index ' + index);\n      var baseInstance = instance.createChild(child, index);\n      buildInstances(baseInstance);\n      this.markInterval(affectedTrail);\n    },\n    markSceneForRemoval: function (instance, child, index) {\n      var affectedTrail = instance.trail.copy().addDescendant(child);\n      sceneryLayerLog && sceneryLayerLog('Scene: marking removal: ' + affectedTrail.toString());\n      this.markInterval(affectedTrail);\n      var toRemove = [instance.children[index]];\n      instance.removeInstance(index);\n      while (toRemove.length) {\n        var item = toRemove.pop();\n        sceneryAssert && sceneryAssert(item, 'item instance should always exist');\n        Array.prototype.push.apply(toRemove, item.children);\n        item.dispose();\n      }\n    },\n    updateCursor: function () {\n      if (this.input && this.input.mouse.point) {\n        var mouseTrail = this.trailUnderPoint(this.input.mouse.point, { isMouse: true });\n        if (mouseTrail) {\n          for (var i = mouseTrail.length - 1; i >= 0; i--) {\n            var cursor = mouseTrail.nodes[i].getCursor();\n            if (cursor) {\n              this.setSceneCursor(cursor);\n              return;\n            }\n          }\n        }\n      }\n      this.setSceneCursor(this.defaultCursor);\n    },\n    setSceneCursor: function (cursor) {\n      if (cursor !== this.lastCursor) {\n        this.lastCursor = cursor;\n        this.$main.css('cursor', cursor);\n      }\n    },\n    updateOnRequestAnimationFrame: function (element) {\n      var scene = this;\n      (function step() {\n        window.requestAnimationFrame(step, element);\n        scene.updateScene();\n      }());\n    },\n    initializeStandaloneEvents: function (parameters) {\n      var element = this.$main[0];\n      this.initializeEvents(_.extend({}, {\n        listenerTarget: element,\n        pointFromEvent: function pointFromEvent(evt) {\n          var mainBounds = element.getBoundingClientRect();\n          return Vector2.createFromPool(evt.clientX - mainBounds.left, evt.clientY - mainBounds.top);\n        }\n      }, parameters));\n    },\n    initializeFullscreenEvents: function (parameters) {\n      var element = this.$main[0];\n      this.initializeEvents(_.extend({}, {\n        listenerTarget: document,\n        pointFromEvent: function pointFromEvent(evt) {\n          var mainBounds = element.getBoundingClientRect();\n          return Vector2.createFromPool(evt.clientX - mainBounds.left, evt.clientY - mainBounds.top);\n        }\n      }, parameters));\n    },\n    initializeWindowEvents: function (parameters) {\n      var element = this.$main[0];\n      this.initializeEvents(_.extend({}, {\n        listenerTarget: window,\n        pointFromEvent: function pointFromEvent(evt) {\n          var mainBounds = element.getBoundingClientRect();\n          return Vector2.createFromPool(evt.clientX - mainBounds.left, evt.clientY - mainBounds.top);\n        }\n      }, parameters));\n    },\n    initializeEvents: function (parameters) {\n      var scene = this;\n      if (scene.input) {\n        throw new Error('Attempt to attach events twice to the scene');\n      }\n      var pointFromEvent = parameters.pointFromEvent;\n      var listenerTarget = parameters.listenerTarget;\n      var batchDOMEvents = parameters.batchDOMEvents;\n      var input = new scenery.Input(scene, listenerTarget, !!batchDOMEvents);\n      scene.input = input;\n      function msPointerType(evt) {\n        if (evt.pointerType === window.MSPointerEvent.MSPOINTER_TYPE_TOUCH) {\n          return 'touch';\n        } else if (evt.pointerType === window.MSPointerEvent.MSPOINTER_TYPE_PEN) {\n          return 'pen';\n        } else if (evt.pointerType === window.MSPointerEvent.MSPOINTER_TYPE_MOUSE) {\n          return 'mouse';\n        } else {\n          return evt.pointerType;\n        }\n      }\n      function forEachChangedTouch(evt, callback) {\n        for (var i = 0; i < evt.changedTouches.length; i++) {\n          var touch = evt.changedTouches.item(i);\n          callback(touch.identifier, pointFromEvent(touch));\n        }\n      }\n      var implementsPointerEvents = window.navigator && window.navigator.pointerEnabled;\n      var implementsMSPointerEvents = window.navigator && window.navigator.msPointerEnabled;\n      if (this.enablePointerEvents && implementsPointerEvents) {\n        sceneryEventLog && sceneryEventLog('Detected pointer events support, using that instead of mouse/touch events');\n        input.addListener('pointerdown', function pointerDownCallback(domEvent) {\n          input.pointerDown(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('pointerup', function pointerUpCallback(domEvent) {\n          input.pointerUp(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('pointermove', function pointerMoveCallback(domEvent) {\n          input.pointerMove(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('pointerover', function pointerOverCallback(domEvent) {\n          input.pointerOver(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('pointerout', function pointerOutCallback(domEvent) {\n          input.pointerOut(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('pointercancel', function pointerCancelCallback(domEvent) {\n          input.pointerCancel(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n        input.addImmediateListener('pointerup', function pointerUpCallback(domEvent) {\n          input.pointerUpImmediate(domEvent.pointerId, domEvent.pointerType, pointFromEvent(domEvent), domEvent);\n        });\n      } else if (this.enablePointerEvents && implementsMSPointerEvents) {\n        sceneryEventLog && sceneryEventLog('Detected MS pointer events support, using that instead of mouse/touch events');\n        input.addListener('MSPointerDown', function msPointerDownCallback(domEvent) {\n          input.pointerDown(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('MSPointerUp', function msPointerUpCallback(domEvent) {\n          input.pointerUp(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('MSPointerMove', function msPointerMoveCallback(domEvent) {\n          input.pointerMove(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('MSPointerOver', function msPointerOverCallback(domEvent) {\n          input.pointerOver(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('MSPointerOut', function msPointerOutCallback(domEvent) {\n          input.pointerOut(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('MSPointerCancel', function msPointerCancelCallback(domEvent) {\n          input.pointerCancel(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n        input.addImmediateListener('MSPointerUp', function msPointerUpCallback(domEvent) {\n          input.pointerUpImmediate(domEvent.pointerId, msPointerType(domEvent), pointFromEvent(domEvent), domEvent);\n        });\n      } else {\n        sceneryEventLog && sceneryEventLog('No pointer events support detected, using mouse/touch events');\n        input.addListener('mousedown', function mouseDownCallback(domEvent) {\n          input.mouseDown(pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('mouseup', function mouseUpCallback(domEvent) {\n          input.mouseUp(pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('mousemove', function mouseMoveCallback(domEvent) {\n          input.mouseMove(pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('mouseover', function mouseOverCallback(domEvent) {\n          input.mouseOver(pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('mouseout', function mouseOutCallback(domEvent) {\n          input.mouseOut(pointFromEvent(domEvent), domEvent);\n        });\n        input.addImmediateListener('mouseup', function mouseUpCallback(domEvent) {\n          input.mouseUpImmediate(pointFromEvent(domEvent), domEvent);\n        });\n        input.addListener('touchstart', function touchStartCallback(domEvent) {\n          sceneryEventLog && sceneryEventLog('touchstart (multiple events)');\n          forEachChangedTouch(domEvent, function touchStartTouch(id, point) {\n            input.touchStart(id, point, domEvent);\n          });\n        });\n        input.addListener('touchend', function touchEndCallback(domEvent) {\n          sceneryEventLog && sceneryEventLog('touchend (multiple events)');\n          forEachChangedTouch(domEvent, function touchEndTouch(id, point) {\n            input.touchEnd(id, point, domEvent);\n          });\n        });\n        input.addListener('touchmove', function touchMoveCallback(domEvent) {\n          sceneryEventLog && sceneryEventLog('touchmove (multiple events)');\n          forEachChangedTouch(domEvent, function touchMoveTouch(id, point) {\n            input.touchMove(id, point, domEvent);\n          });\n        });\n        input.addListener('touchcancel', function touchCancelCallback(domEvent) {\n          sceneryEventLog && sceneryEventLog('touchcancel (multiple events)');\n          forEachChangedTouch(domEvent, function touchCancelTouch(id, point) {\n            input.touchCancel(id, point, domEvent);\n          });\n        });\n        input.addImmediateListener('touchend', function touchEndCallback(domEvent) {\n          sceneryEventLog && sceneryEventLog('touchend immediate (multiple events)');\n          forEachChangedTouch(domEvent, function touchEndTouch(id, point) {\n            input.touchEndImmediate(id, point, domEvent);\n          });\n        });\n      }\n      input.addListener('keyup', function keyUpCallback(domEvent) {\n        input.keyUp(domEvent);\n      });\n      input.addListener('keydown', function keyDownCallback(domEvent) {\n        input.keyDown(domEvent);\n      });\n      input.addListener('keypress', function keyPressCallback(domEvent) {\n        input.keyPress(domEvent);\n      });\n    },\n    getTrailFromKeyboardFocus: function () {\n      return new scenery.Trail(this);\n    },\n    fireBatchedEvents: function () {\n      this.input.fireBatchedEvents();\n    },\n    resizeOnWindowResize: function () {\n      var scene = this;\n      var resizer = function () {\n        scene.resize(window.innerWidth, window.innerHeight);\n      };\n      $(window).resize(resizer);\n      resizer();\n    },\n    layerAudit: function () {\n      var scene = this;\n      var boundaries = this.calculateBoundaries(null, null, null);\n      sceneryAssert && sceneryAssert(boundaries.length === this.layers.length + 1, 'boundary count (' + boundaries.length + ') does not match layer count (' + this.layers.length + ') + 1');\n      var eachTrailUnderPaintedCount = 0;\n      new scenery.Trail(this).eachTrailUnder(function (trail) {\n        if (trail.isPainted()) {\n          eachTrailUnderPaintedCount++;\n          sceneryAssert && sceneryAssert(trail.getInstance(), 'every painted trail must have an instance');\n        }\n        sceneryAssert && sceneryAssert(trail.getInstance() && trail.getInstance().trail.equals(trail), 'every trail must have a single corresponding instance');\n      });\n      var layerPaintedCount = 0;\n      _.each(this.layers, function (layer) {\n        layerPaintedCount += layer.getLayerTrails().length;\n        layer.startPaintedTrail.reindex();\n        layer.endPaintedTrail.reindex();\n      });\n      var layerIterationPaintedCount = 0;\n      _.each(this.layers, function (layer) {\n        var selfCount = 0;\n        scenery.Trail.eachPaintedTrailBetween(layer.startPaintedTrail, layer.endPaintedTrail, function (trail) {\n          selfCount++;\n        }, false, scene);\n        sceneryAssert && sceneryAssert(selfCount > 0, 'every layer must have at least one self trail');\n        layerIterationPaintedCount += selfCount;\n      });\n      sceneryAssert && sceneryAssert(eachTrailUnderPaintedCount === layerPaintedCount, 'cross-referencing self trail counts: layerPaintedCount, ' + eachTrailUnderPaintedCount + ' vs ' + layerPaintedCount);\n      sceneryAssert && sceneryAssert(eachTrailUnderPaintedCount === layerIterationPaintedCount, 'cross-referencing self trail counts: layerIterationPaintedCount, ' + eachTrailUnderPaintedCount + ' vs ' + layerIterationPaintedCount);\n      _.each(this.layers, function (layer) {\n        sceneryAssert && sceneryAssert(layer.startPaintedTrail.compare(layer.endPaintedTrail) <= 0, 'proper ordering on layer trails');\n      });\n      for (var i = 1; i < this.layers.length; i++) {\n        sceneryAssert && sceneryAssert(this.layers[i - 1].endPaintedTrail.compare(this.layers[i].startPaintedTrail) === -1, 'proper ordering of layer trail boundaries in scene.layers array');\n        sceneryAssert && sceneryAssert(this.layers[i - 1].endBoundary === this.layers[i].startBoundary, 'proper sharing of boundaries');\n      }\n      _.each(this.layers, function (layer) {\n        var layerTrails = layer.getLayerTrails();\n        var computedTrails = [];\n        scenery.Trail.eachPaintedTrailBetween(layer.startPaintedTrail, layer.endPaintedTrail, function (trail) {\n          computedTrails.push(trail.copy());\n        }, false, scene);\n        sceneryAssert && sceneryAssert(layerTrails.length === computedTrails.length, 'layer has incorrect number of tracked trails');\n        _.each(layerTrails, function (trail) {\n          sceneryAssert && sceneryAssert(_.some(computedTrails, function (otherTrail) {\n            return trail.equals(otherTrail);\n          }), 'layer has a tracked trail discrepancy');\n        });\n        scenery.Trail.eachTrailBetween(layer.startPaintedTrail, layer.endPaintedTrail, function (trail) {\n          var node = trail.lastNode();\n          sceneryAssert && sceneryAssert(!node.renderer || node.renderer.name === layer.type.name, 'specified renderers should match the layer renderer');\n        }, false, scene);\n      });\n      new scenery.Trail(this).eachTrailUnder(function (trail) {\n        var beforeSplitTrail;\n        var afterSplitTrail;\n        if (trail.lastNode().layerSplitBefore) {\n          beforeSplitTrail = trail.previousPainted();\n          afterSplitTrail = trail.lastNode().isPainted() ? trail : trail.nextPainted();\n          sceneryAssert && sceneryAssert(!beforeSplitTrail || !afterSplitTrail || beforeSplitTrail.getInstance().layer !== afterSplitTrail.getInstance().layer, 'layerSplitBefore layers need to be different');\n        }\n        if (trail.lastNode().layerSplitAfter) {\n          var ptr = new scenery.TrailPointer(trail.copy(), false);\n          while (ptr && ptr.isAfter) {\n            ptr = ptr.nestedForwards();\n          }\n          if (ptr) {\n            beforeSplitTrail = ptr.trail.previousPainted();\n            afterSplitTrail = ptr.trail.lastNode().isPainted() ? ptr.trail : ptr.trail.nextPainted();\n            sceneryAssert && sceneryAssert(!beforeSplitTrail || !afterSplitTrail || beforeSplitTrail.getInstance().layer !== afterSplitTrail.getInstance().layer, 'layerSplitAfter layers need to be different');\n          }\n        }\n      });\n      return true;\n    },\n    getDebugHTML: function () {\n      var startPointer = new scenery.TrailPointer(new scenery.Trail(this), true);\n      var endPointer = new scenery.TrailPointer(new scenery.Trail(this), false);\n      function str(ob) {\n        return ob ? ob.toString() : ob;\n      }\n      var depth = 0;\n      var result = '';\n      var layerStartEntries = {};\n      var layerEndEntries = {};\n      _.each(this.layers, function (layer) {\n        var startIdx = layer.startPaintedTrail.getUniqueId();\n        var endIndex = layer.endPaintedTrail.getUniqueId();\n        layerStartEntries[startIdx] = '';\n        layerEndEntries[endIndex] = '';\n        layer.startPaintedTrail.reindex();\n        layer.endPaintedTrail.reindex();\n        var layerInfo = layer.getId() + ' <strong>' + layer.type.name + '</strong>' + ' trails: ' + (layer.startPaintedTrail ? str(layer.startPaintedTrail) : layer.startPaintedTrail) + ',' + (layer.endPaintedTrail ? str(layer.endPaintedTrail) : layer.endPaintedTrail);\n        layerInfo += '<span style=\"color: #008\">';\n        if (layer.canUseDirtyRegions && !layer.canUseDirtyRegions()) {\n          layerInfo += ' dirtyRegionsDisabled';\n        }\n        if (layer.cssTranslation) {\n          layerInfo += ' cssTranslation';\n        }\n        if (layer.cssRotation) {\n          layerInfo += ' cssTranslation';\n        }\n        if (layer.cssScale) {\n          layerInfo += ' cssTranslation';\n        }\n        if (layer.cssTransform) {\n          layerInfo += ' cssTranslation';\n        }\n        if (layer.dirtyBounds && layer.dirtyBounds.isFinite()) {\n          layerInfo += ' dirtyBounds:' + layer.dirtyBounds.toString();\n        }\n        layerInfo += '</span>';\n        layerStartEntries[startIdx] += '<div style=\"color: #080\">+Layer ' + layerInfo + '</div>';\n        layerEndEntries[endIndex] += '<div style=\"color: #800\">-Layer ' + layerInfo + '</div>';\n      });\n      startPointer.depthFirstUntil(endPointer, function (pointer) {\n        var div;\n        var ptr = str(pointer);\n        var node = pointer.trail.lastNode();\n        function addQualifier(text) {\n          div += ' <span style=\"color: #008\">' + text + '</span>';\n        }\n        if (pointer.isBefore && layerStartEntries[pointer.trail.getUniqueId()]) {\n          result += layerStartEntries[pointer.trail.getUniqueId()];\n        }\n        if (pointer.isBefore) {\n          div = '<div style=\"margin-left: ' + depth * 20 + 'px\">';\n          if (node.constructor.name) {\n            div += ' ' + node.constructor.name;\n          }\n          div += ' <span style=\"font-weight: ' + (node.isPainted() ? 'bold' : 'normal') + '\">' + pointer.trail.lastNode().getId() + '</span>';\n          div += ' <span style=\"color: #888\">' + str(pointer.trail) + '</span>';\n          if (!node._visible) {\n            addQualifier('invisible');\n          }\n          if (!node._pickable) {\n            addQualifier('unpickable');\n          }\n          if (node._clipShape) {\n            addQualifier('clipShape');\n          }\n          if (node._renderer) {\n            addQualifier('renderer:' + node._renderer.name);\n          }\n          if (node._rendererOptions) {\n          }\n          if (node._layerSplitBefore) {\n            addQualifier('layerSplitBefore');\n          }\n          if (node._layerSplitAfter) {\n            addQualifier('layerSplitAfter');\n          }\n          if (node._opacity < 1) {\n            addQualifier('opacity:' + node._opacity);\n          }\n          var transformType = '';\n          switch (node.transform.getMatrix().type) {\n          case Matrix3.Types.IDENTITY:\n            transformType = '';\n            break;\n          case Matrix3.Types.TRANSLATION_2D:\n            transformType = 'translated';\n            break;\n          case Matrix3.Types.SCALING:\n            transformType = 'scale';\n            break;\n          case Matrix3.Types.AFFINE:\n            transformType = 'affine';\n            break;\n          case Matrix3.Types.OTHER:\n            transformType = 'other';\n            break;\n          }\n          if (transformType) {\n            div += ' <span style=\"color: #88f\" title=\"' + node.transform.getMatrix().toString().replace('\\n', '&#10;') + '\">' + transformType + '</span>';\n          }\n          div += '</div>';\n          result += div;\n        }\n        if (pointer.isAfter && layerEndEntries[pointer.trail.getUniqueId()]) {\n          result += layerEndEntries[pointer.trail.getUniqueId()];\n        }\n        depth += pointer.isBefore ? 1 : -1;\n      }, false);\n      return result;\n    },\n    popupDebug: function () {\n      var htmlContent = '<!DOCTYPE html>' + '<html lang=\"en\">' + '<head><title>Scenery Debug Snapshot</title></head>' + '<body>' + this.getDebugHTML() + '</body>' + '</html>';\n      window.open('data:text/html;charset=utf-8,' + encodeURIComponent(htmlContent));\n    },\n    getBasicConstructor: function (propLines) {\n      return 'new scenery.Scene( $( \\'#main\\' ), {' + propLines + '} )';\n    },\n    toStringWithChildren: function (mutateScene) {\n      var scene = this;\n      var result = '';\n      var nodes = this.getTopologicallySortedNodes().slice(0).reverse();\n      function name(node) {\n        return node === scene ? 'scene' : node.constructor.name.toLowerCase() + node.id;\n      }\n      _.each(nodes, function (node) {\n        if (result) {\n          result += '\\n';\n        }\n        if (mutateScene && node === scene) {\n          var props = scene.getPropString('  ', false);\n          result += 'scene.mutate( {' + (props ? '\\n' + props + '\\n' : '') + '} )';\n        } else {\n          result += 'var ' + name(node) + ' = ' + node.toString('', false);\n        }\n        _.each(node.children, function (child) {\n          result += '\\n' + name(node) + '.addChild( ' + name(child) + ' );';\n        });\n      });\n      return result;\n    }\n  });\n  function applyCSSHacks($main, options) {\n    if (!options.allowSceneOverflow) {\n      $main.css('overflow', 'hidden');\n    }\n    $main.css('-ms-touch-action', 'none');\n    if (options.allowCSSHacks) {\n      (function () {\n        var prefixes = [\n            '-webkit-',\n            '-moz-',\n            '-ms-',\n            '-o-',\n            ''\n          ];\n        var properties = {\n            userSelect: 'none',\n            touchCallout: 'none',\n            touchAction: 'none',\n            userDrag: 'none',\n            tapHighlightColor: 'rgba(0,0,0,0)'\n          };\n        _.each(prefixes, function (prefix) {\n          _.each(properties, function (propertyValue, propertyName) {\n            $main.css(prefix + propertyName, propertyValue);\n          });\n        });\n      }());\n    }\n  }\n  return Scene;\n});","\ndefine('main',[\n  'SCENERY/scenery',\n  'SCENERY/debug/DebugContext',\n  'SCENERY/input/ButtonListener',\n  'SCENERY/input/DownUpListener',\n  'SCENERY/input/Event',\n  'SCENERY/input/Input',\n  'SCENERY/input/Key',\n  'SCENERY/input/Mouse',\n  'SCENERY/input/Pen',\n  'SCENERY/input/Pointer',\n  'SCENERY/input/SimpleDragHandler',\n  'SCENERY/input/Touch',\n  'SCENERY/layers/CanvasLayer',\n  'SCENERY/layers/DOMLayer',\n  'SCENERY/layers/Layer',\n  'SCENERY/layers/LayerBoundary',\n  'SCENERY/layers/LayerBuilder',\n  'SCENERY/layers/LayerStrategy',\n  'SCENERY/layers/LayerType',\n  'SCENERY/layers/Renderer',\n  'SCENERY/layers/SVGLayer',\n  'SCENERY/nodes/CanvasNode',\n  'SCENERY/nodes/Circle',\n  'SCENERY/nodes/DOM',\n  'SCENERY/nodes/Fillable',\n  'SCENERY/nodes/HBox',\n  'SCENERY/nodes/HTMLText',\n  'SCENERY/nodes/Image',\n  'SCENERY/nodes/Line',\n  'SCENERY/nodes/Node',\n  'SCENERY/nodes/Path',\n  'SCENERY/nodes/Plane',\n  'SCENERY/nodes/Rectangle',\n  'SCENERY/nodes/Strokable',\n  'SCENERY/nodes/Text',\n  'SCENERY/nodes/VBox',\n  'SCENERY/util/AccessibilityPeer',\n  'SCENERY/util/CanvasContextWrapper',\n  'SCENERY/util/Color',\n  'SCENERY/util/FixedNodeEvents',\n  'SCENERY/util/Font',\n  'SCENERY/util/Gradient',\n  'SCENERY/util/LinearGradient',\n  'SCENERY/util/LiveRegion',\n  'SCENERY/util/Instance',\n  'SCENERY/util/Pattern',\n  'SCENERY/util/RadialGradient',\n  'SCENERY/util/RenderInterval',\n  'SCENERY/util/SceneImage',\n  'SCENERY/util/SceneryStyle',\n  'SCENERY/util/Trail',\n  'SCENERY/util/TrailPointer',\n  'SCENERY/util/Util',\n  'SCENERY/Scene'\n], function (scenery) {\n  'use strict';\n  return scenery;\n});","\ndefine('KITE/main',[\n  'KITE/kite',\n  'KITE/Shape',\n  'KITE/segments/Arc',\n  'KITE/segments/Cubic',\n  'KITE/segments/EllipticalArc',\n  'KITE/segments/Line',\n  'KITE/segments/Quadratic',\n  'KITE/segments/Segment',\n  'KITE/util/LineStyles',\n  'KITE/util/Subpath',\n  'KITE/../parser/svgPath'\n], function (kite) {\n  'use strict';\n  return kite;\n});","\ndefine('DOT/Complex',['require','DOT/dot','PHET_CORE/inherit','DOT/Vector2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Vector2 = require('DOT/Vector2');\n  dot.Complex = function Complex(real, imaginary) {\n    Vector2.call(this, real, imaginary);\n    this.real = real;\n    this.imaginary = imaginary;\n  };\n  var Complex = dot.Complex;\n  Complex.real = function (real) {\n    return new Complex(real, 0);\n  };\n  Complex.imaginary = function (imaginary) {\n    return new Complex(0, imaginary);\n  };\n  Complex.createPolar = function (magnitude, phase) {\n    return new Complex(magnitude * Math.cos(phase), magnitude * Math.sin(phase));\n  };\n  inherit(Vector2.Immutable, Complex, {\n    phase: Vector2.prototype.angle,\n    times: function (c) {\n      return new Complex(this.real * c.real - this.imaginary * c.imaginary, this.real * c.imaginary + this.imaginary * c.real);\n    },\n    dividedBy: function (c) {\n      var cMag = c.magnitudeSquared();\n      return new Complex((this.real * c.real + this.imaginary * c.imaginary) / cMag, (this.imaginary * c.real - this.real * c.imaginary) / cMag);\n    },\n    sqrt: function () {\n      var mag = this.magnitude();\n      return new Complex(Math.sqrt((mag + this.real) / 2), (this.imaginary >= 0 ? 1 : -1) * Math.sqrt((mag - this.real) / 2));\n    },\n    conjugate: function () {\n      return new Complex(this.real, -this.imaginary);\n    },\n    exponentiated: function () {\n      return Complex.createPolar(Math.exp(this.real), this.imaginary);\n    },\n    toString: function () {\n      return 'Complex(' + this.x + ', ' + this.y + ')';\n    }\n  });\n  Complex.ZERO = new Complex(0, 0);\n  Complex.ONE = new Complex(1, 0);\n  Complex.I = new Complex(0, 1);\n  return Complex;\n});","\ndefine('DOT/ConvexHull2',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  function ccw(p1, p2, p3) {\n    return p2.minus(p1).crossScalar(p3.minus(p1));\n  }\n  dot.ConvexHull2 = {\n    grahamScan: function (points, includeCollinear) {\n      if (points.length <= 2) {\n        return points;\n      }\n      var minY = Number.POSITIVE_INFINITY;\n      var p = null;\n      _.each(points, function (point) {\n        if (point.y <= minY) {\n          if (point.y === minY && p) {\n            if (point.x < p.x) {\n              p = point;\n            }\n          } else {\n            minY = point.y;\n            p = point;\n          }\n        }\n      });\n      points = _.sortBy(points, function (point) {\n        return point.minus(p).angle();\n      });\n      points.splice(_.indexOf(points, p), 1);\n      var result = [p];\n      _.each(points, function (point) {\n        if (p.x === point.x && p.y === point.y) {\n          return;\n        }\n        function isRightTurn() {\n          if (result.length < 2) {\n            return false;\n          }\n          var cross = ccw(result[result.length - 2], result[result.length - 1], point);\n          return includeCollinear ? cross < 0 : cross <= 0;\n        }\n        while (isRightTurn()) {\n          result.pop();\n        }\n        result.push(point);\n      });\n      return result;\n    }\n  };\n  return dot.ConvexHull2;\n});","\ndefine('DOT/Dimension2',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Dimension2 = function Dimension2(width, height) {\n    this.width = width;\n    this.height = height;\n  };\n  var Dimension2 = dot.Dimension2;\n  Dimension2.prototype = {\n    constructor: Dimension2,\n    toString: function () {\n      return '[' + this.width + 'w, ' + this.height + 'h]';\n    },\n    equals: function (other) {\n      return this.width === other.width && this.height === other.height;\n    }\n  };\n  return Dimension2;\n});","\ndefine('DOT/EigenvalueDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.EigenvalueDecomposition = function EigenvalueDecomposition(matrix) {\n    var i, j;\n    var A = matrix.entries;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.V = new Float32Array(n * n);\n    this.d = new Float32Array(n);\n    this.e = new Float32Array(n);\n    this.issymmetric = true;\n    for (j = 0; j < n && this.issymmetric; j++) {\n      for (i = 0; i < n && this.issymmetric; i++) {\n        this.issymmetric = A[i * this.n + j] === A[j * this.n + i];\n      }\n    }\n    if (this.issymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          this.V[i * this.n + j] = A[i * this.n + j];\n        }\n      }\n      this.tred2();\n      this.tql2();\n    } else {\n      this.H = new Float32Array(n * n);\n      this.ort = new Float32Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          this.H[i * this.n + j] = A[i * this.n + j];\n        }\n      }\n      this.orthes();\n      this.hqr2();\n    }\n  };\n  var EigenvalueDecomposition = dot.EigenvalueDecomposition;\n  EigenvalueDecomposition.prototype = {\n    constructor: EigenvalueDecomposition,\n    getV: function () {\n      return this.V.copy();\n    },\n    getRealEigenvalues: function () {\n      return this.d;\n    },\n    getImagEigenvalues: function () {\n      return this.e;\n    },\n    getD: function () {\n      var n = this.n, d = this.d, e = this.e;\n      var X = new dot.Matrix(n, n);\n      var D = X.entries;\n      for (var i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n          D[i * this.n + j] = 0;\n        }\n        D[i * this.n + i] = d[i];\n        if (e[i] > 0) {\n          D[i * this.n + i + 1] = e[i];\n        } else if (e[i] < 0) {\n          D[i * this.n + i - 1] = e[i];\n        }\n      }\n      return X;\n    },\n    tred2: function () {\n      var n = this.n, V = this.V, d = this.d, e = this.e;\n      var i, j, k, f, g, h;\n      for (j = 0; j < n; j++) {\n        d[j] = V[(n - 1) * n + j];\n      }\n      for (i = n - 1; i > 0; i--) {\n        var scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n          scale = scale + Math.abs(d[k]);\n        }\n        if (scale === 0) {\n          e[i] = d[i - 1];\n          for (j = 0; j < i; j++) {\n            d[j] = V[(i - 1) * n + j];\n            V[i * this.n + j] = 0;\n            V[j * this.n + i] = 0;\n          }\n        } else {\n          for (k = 0; k < i; k++) {\n            d[k] /= scale;\n            h += d[k] * d[k];\n          }\n          f = d[i - 1];\n          g = Math.sqrt(h);\n          if (f > 0) {\n            g = -g;\n          }\n          e[i] = scale * g;\n          h = h - f * g;\n          d[i - 1] = f - g;\n          for (j = 0; j < i; j++) {\n            e[j] = 0;\n          }\n          for (j = 0; j < i; j++) {\n            f = d[j];\n            V[j * this.n + i] = f;\n            g = e[j] + V[j * n + j] * f;\n            for (k = j + 1; k <= i - 1; k++) {\n              g += V[k * n + j] * d[k];\n              e[k] += V[k * n + j] * f;\n            }\n            e[j] = g;\n          }\n          f = 0;\n          for (j = 0; j < i; j++) {\n            e[j] /= h;\n            f += e[j] * d[j];\n          }\n          var hh = f / (h + h);\n          for (j = 0; j < i; j++) {\n            e[j] -= hh * d[j];\n          }\n          for (j = 0; j < i; j++) {\n            f = d[j];\n            g = e[j];\n            for (k = j; k <= i - 1; k++) {\n              V[k * n + j] -= f * e[k] + g * d[k];\n            }\n            d[j] = V[(i - 1) * n + j];\n            V[i * this.n + j] = 0;\n          }\n        }\n        d[i] = h;\n      }\n      for (i = 0; i < n - 1; i++) {\n        V[(n - 1) * n + i] = V[i * n + i];\n        V[i * n + i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n          for (k = 0; k <= i; k++) {\n            d[k] = V[k * n + (i + 1)] / h;\n          }\n          for (j = 0; j <= i; j++) {\n            g = 0;\n            for (k = 0; k <= i; k++) {\n              g += V[k * n + (i + 1)] * V[k * n + j];\n            }\n            for (k = 0; k <= i; k++) {\n              V[k * n + j] -= g * d[k];\n            }\n          }\n        }\n        for (k = 0; k <= i; k++) {\n          V[k * n + (i + 1)] = 0;\n        }\n      }\n      for (j = 0; j < n; j++) {\n        d[j] = V[(n - 1) * n + j];\n        V[(n - 1) * n + j] = 0;\n      }\n      V[(n - 1) * n + (n - 1)] = 1;\n      e[0] = 0;\n    },\n    tql2: function () {\n      var n = this.n, V = this.V, d = this.d, e = this.e;\n      var i, j, k, l, g, p;\n      var iter;\n      for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n      }\n      e[n - 1] = 0;\n      var f = 0;\n      var tst1 = 0;\n      var eps = Math.pow(2, -52);\n      for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        var m = l;\n        while (m < n) {\n          if (Math.abs(e[m]) <= eps * tst1) {\n            break;\n          }\n          m++;\n        }\n        if (m > l) {\n          iter = 0;\n          do {\n            iter = iter + 1;\n            g = d[l];\n            p = (d[l + 1] - g) / (2 * e[l]);\n            var r = dot.Matrix.hypot(p, 1);\n            if (p < 0) {\n              r = -r;\n            }\n            d[l] = e[l] / (p + r);\n            d[l + 1] = e[l] * (p + r);\n            var dl1 = d[l + 1];\n            var h = g - d[l];\n            for (i = l + 2; i < n; i++) {\n              d[i] -= h;\n            }\n            f = f + h;\n            p = d[m];\n            var c = 1;\n            var c2 = c;\n            var c3 = c;\n            var el1 = e[l + 1];\n            var s = 0;\n            var s2 = 0;\n            for (i = m - 1; i >= l; i--) {\n              c3 = c2;\n              c2 = c;\n              s2 = s;\n              g = c * e[i];\n              h = c * p;\n              r = dot.Matrix.hypot(p, e[i]);\n              e[i + 1] = s * r;\n              s = e[i] / r;\n              c = p / r;\n              p = c * d[i] - s * g;\n              d[i + 1] = h + s * (c * g + s * d[i]);\n              for (k = 0; k < n; k++) {\n                h = V[k * n + (i + 1)];\n                V[k * n + (i + 1)] = s * V[k * n + i] + c * h;\n                V[k * n + i] = c * V[k * n + i] - s * h;\n              }\n            }\n            p = -s * s2 * c3 * el1 * e[l] / dl1;\n            e[l] = s * p;\n            d[l] = c * p;\n          } while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n      }\n      for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n          if (d[j] < p) {\n            k = j;\n            p = d[j];\n          }\n        }\n        if (k !== i) {\n          d[k] = d[i];\n          d[i] = p;\n          for (j = 0; j < n; j++) {\n            p = V[j * this.n + i];\n            V[j * this.n + i] = V[j * n + k];\n            V[j * n + k] = p;\n          }\n        }\n      }\n    },\n    orthes: function () {\n      var n = this.n, V = this.V, H = this.H, ort = this.ort;\n      var i, j, m, f, g;\n      var low = 0;\n      var high = n - 1;\n      for (m = low + 1; m <= high - 1; m++) {\n        var scale = 0;\n        for (i = m; i <= high; i++) {\n          scale = scale + Math.abs(H[i * n + (m - 1)]);\n        }\n        if (scale !== 0) {\n          var h = 0;\n          for (i = high; i >= m; i--) {\n            ort[i] = H[i * n + (m - 1)] / scale;\n            h += ort[i] * ort[i];\n          }\n          g = Math.sqrt(h);\n          if (ort[m] > 0) {\n            g = -g;\n          }\n          h = h - ort[m] * g;\n          ort[m] = ort[m] - g;\n          for (j = m; j < n; j++) {\n            f = 0;\n            for (i = high; i >= m; i--) {\n              f += ort[i] * H[i * this.n + j];\n            }\n            f = f / h;\n            for (i = m; i <= high; i++) {\n              H[i * this.n + j] -= f * ort[i];\n            }\n          }\n          for (i = 0; i <= high; i++) {\n            f = 0;\n            for (j = high; j >= m; j--) {\n              f += ort[j] * H[i * this.n + j];\n            }\n            f = f / h;\n            for (j = m; j <= high; j++) {\n              H[i * this.n + j] -= f * ort[j];\n            }\n          }\n          ort[m] = scale * ort[m];\n          H[m * n + (m - 1)] = scale * g;\n        }\n      }\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V[i * this.n + j] = i === j ? 1 : 0;\n        }\n      }\n      for (m = high - 1; m >= low + 1; m--) {\n        if (H[m * n + (m - 1)] !== 0) {\n          for (i = m + 1; i <= high; i++) {\n            ort[i] = H[i * n + (m - 1)];\n          }\n          for (j = m; j <= high; j++) {\n            g = 0;\n            for (i = m; i <= high; i++) {\n              g += ort[i] * V[i * this.n + j];\n            }\n            g = g / ort[m] / H[m * n + (m - 1)];\n            for (i = m; i <= high; i++) {\n              V[i * this.n + j] += g * ort[i];\n            }\n          }\n        }\n      }\n    },\n    cdiv: function (xr, xi, yr, yi) {\n      var r, d;\n      if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        this.cdivr = (xr + r * xi) / d;\n        this.cdivi = (xi - r * xr) / d;\n      } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        this.cdivr = (r * xr + xi) / d;\n        this.cdivi = (r * xi - xr) / d;\n      }\n    },\n    hqr2: function () {\n      var n, V = this.V, d = this.d, e = this.e, H = this.H;\n      var i, j, k, l, m;\n      var iter;\n      var nn = this.n;\n      n = nn - 1;\n      var low = 0;\n      var high = nn - 1;\n      var eps = Math.pow(2, -52);\n      var exshift = 0;\n      var p = 0, q = 0, r = 0, s = 0, z = 0, t, w, x, y;\n      var norm = 0;\n      for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n          d[i] = H[i * n + i];\n          e[i] = 0;\n        }\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n          norm = norm + Math.abs(H[i * this.n + j]);\n        }\n      }\n      iter = 0;\n      while (n >= low) {\n        l = n;\n        while (l > low) {\n          s = Math.abs(H[(l - 1) * n + (l - 1)]) + Math.abs(H[l * n + l]);\n          if (s === 0) {\n            s = norm;\n          }\n          if (Math.abs(H[l * n + (l - 1)]) < eps * s) {\n            break;\n          }\n          l--;\n        }\n        if (l === n) {\n          H[n * n + n] = H[n * n + n] + exshift;\n          d[n] = H[n * n + n];\n          e[n] = 0;\n          n--;\n          iter = 0;\n        } else if (l === n - 1) {\n          w = H[n * n + n - 1] * H[(n - 1) * n + n];\n          p = (H[(n - 1) * n + (n - 1)] - H[n * n + n]) / 2;\n          q = p * p + w;\n          z = Math.sqrt(Math.abs(q));\n          H[n * n + n] = H[n * n + n] + exshift;\n          H[(n - 1) * n + (n - 1)] = H[(n - 1) * n + (n - 1)] + exshift;\n          x = H[n * n + n];\n          if (q >= 0) {\n            if (p >= 0) {\n              z = p + z;\n            } else {\n              z = p - z;\n            }\n            d[n - 1] = x + z;\n            d[n] = d[n - 1];\n            if (z !== 0) {\n              d[n] = x - w / z;\n            }\n            e[n - 1] = 0;\n            e[n] = 0;\n            x = H[n * n + n - 1];\n            s = Math.abs(x) + Math.abs(z);\n            p = x / s;\n            q = z / s;\n            r = Math.sqrt(p * p + q * q);\n            p = p / r;\n            q = q / r;\n            for (j = n - 1; j < nn; j++) {\n              z = H[(n - 1) * n + j];\n              H[(n - 1) * n + j] = q * z + p * H[n * n + j];\n              H[n * n + j] = q * H[n * n + j] - p * z;\n            }\n            for (i = 0; i <= n; i++) {\n              z = H[i * n + n - 1];\n              H[i * n + n - 1] = q * z + p * H[i * n + n];\n              H[i * n + n] = q * H[i * n + n] - p * z;\n            }\n            for (i = low; i <= high; i++) {\n              z = V[i * n + n - 1];\n              V[i * n + n - 1] = q * z + p * V[i * n + n];\n              V[i * n + n] = q * V[i * n + n] - p * z;\n            }\n          } else {\n            d[n - 1] = x + p;\n            d[n] = x + p;\n            e[n - 1] = z;\n            e[n] = -z;\n          }\n          n = n - 2;\n          iter = 0;\n        } else {\n          x = H[n * n + n];\n          y = 0;\n          w = 0;\n          if (l < n) {\n            y = H[(n - 1) * n + (n - 1)];\n            w = H[n * n + n - 1] * H[(n - 1) * n + n];\n          }\n          if (iter === 10) {\n            exshift += x;\n            for (i = low; i <= n; i++) {\n              H[i * n + i] -= x;\n            }\n            s = Math.abs(H[n * n + n - 1]) + Math.abs(H[(n - 1) * n + n - 2]);\n            x = y = 0.75 * s;\n            w = -0.4375 * s * s;\n          }\n          if (iter === 30) {\n            s = (y - x) / 2;\n            s = s * s + w;\n            if (s > 0) {\n              s = Math.sqrt(s);\n              if (y < x) {\n                s = -s;\n              }\n              s = x - w / ((y - x) / 2 + s);\n              for (i = low; i <= n; i++) {\n                H[i * n + i] -= s;\n              }\n              exshift += s;\n              x = y = w = 0.964;\n            }\n          }\n          iter = iter + 1;\n          m = n - 2;\n          while (m >= l) {\n            z = H[m * n + m];\n            r = x - z;\n            s = y - z;\n            p = (r * s - w) / H[(m + 1) * n + m] + H[m * n + m + 1];\n            q = H[(m + 1) * n + m + 1] - z - r - s;\n            r = H[(m + 2) * n + m + 1];\n            s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n            p = p / s;\n            q = q / s;\n            r = r / s;\n            if (m === l) {\n              break;\n            }\n            if (Math.abs(H[m * n + (m - 1)]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[(m - 1) * n + m - 1]) + Math.abs(z) + Math.abs(H[(m + 1) * n + m + 1])))) {\n              break;\n            }\n            m--;\n          }\n          for (i = m + 2; i <= n; i++) {\n            H[i * n + i - 2] = 0;\n            if (i > m + 2) {\n              H[i * n + i - 3] = 0;\n            }\n          }\n          for (k = m; k <= n - 1; k++) {\n            var notlast = k !== n - 1;\n            if (k !== m) {\n              p = H[k * n + k - 1];\n              q = H[(k + 1) * n + k - 1];\n              r = notlast ? H[(k + 2) * n + k - 1] : 0;\n              x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n              if (x !== 0) {\n                p = p / x;\n                q = q / x;\n                r = r / x;\n              }\n            }\n            if (x === 0) {\n              break;\n            }\n            s = Math.sqrt(p * p + q * q + r * r);\n            if (p < 0) {\n              s = -s;\n            }\n            if (s !== 0) {\n              if (k !== m) {\n                H[k * n + k - 1] = -s * x;\n              } else if (l !== m) {\n                H[k * n + k - 1] = -H[k * n + k - 1];\n              }\n              p = p + s;\n              x = p / s;\n              y = q / s;\n              z = r / s;\n              q = q / p;\n              r = r / p;\n              for (j = k; j < nn; j++) {\n                p = H[k * n + j] + q * H[(k + 1) * n + j];\n                if (notlast) {\n                  p = p + r * H[(k + 2) * n + j];\n                  H[(k + 2) * n + j] = H[(k + 2) * n + j] - p * z;\n                }\n                H[k * n + j] = H[k * n + j] - p * x;\n                H[(k + 1) * n + j] = H[(k + 1) * n + j] - p * y;\n              }\n              for (i = 0; i <= Math.min(n, k + 3); i++) {\n                p = x * H[i * n + k] + y * H[i * n + k + 1];\n                if (notlast) {\n                  p = p + z * H[i * n + k + 2];\n                  H[i * n + k + 2] = H[i * n + k + 2] - p * r;\n                }\n                H[i * n + k] = H[i * n + k] - p;\n                H[i * n + k + 1] = H[i * n + k + 1] - p * q;\n              }\n              for (i = low; i <= high; i++) {\n                p = x * V[i * n + k] + y * V[i * n + k + 1];\n                if (notlast) {\n                  p = p + z * V[i * n + k + 2];\n                  V[i * n + k + 2] = V[i * n + k + 2] - p * r;\n                }\n                V[i * n + k] = V[i * n + k] - p;\n                V[i * n + k + 1] = V[i * n + k + 1] - p * q;\n              }\n            }\n          }\n        }\n      }\n      if (norm === 0) {\n        return;\n      }\n      for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n        if (q === 0) {\n          l = n;\n          H[n * n + n] = 1;\n          for (i = n - 1; i >= 0; i--) {\n            w = H[i * n + i] - p;\n            r = 0;\n            for (j = l; j <= n; j++) {\n              r = r + H[i * this.n + j] * H[j * n + n];\n            }\n            if (e[i] < 0) {\n              z = w;\n              s = r;\n            } else {\n              l = i;\n              if (e[i] === 0) {\n                if (w !== 0) {\n                  H[i * n + n] = -r / w;\n                } else {\n                  H[i * n + n] = -r / (eps * norm);\n                }\n              } else {\n                x = H[i * n + i + 1];\n                y = H[(i + 1) * n + i];\n                q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                t = (x * s - z * r) / q;\n                H[i * n + n] = t;\n                if (Math.abs(x) > Math.abs(z)) {\n                  H[(i + 1) * n + n] = (-r - w * t) / x;\n                } else {\n                  H[(i + 1) * n + n] = (-s - y * t) / z;\n                }\n              }\n              t = Math.abs(H[i * n + n]);\n              if (eps * t * t > 1) {\n                for (j = i; j <= n; j++) {\n                  H[j * n + n] = H[j * n + n] / t;\n                }\n              }\n            }\n          }\n        } else if (q < 0) {\n          l = n - 1;\n          if (Math.abs(H[n * n + n - 1]) > Math.abs(H[(n - 1) * n + n])) {\n            H[(n - 1) * n + (n - 1)] = q / H[n * n + n - 1];\n            H[(n - 1) * n + n] = -(H[n * n + n] - p) / H[n * n + n - 1];\n          } else {\n            this.cdiv(0, -H[(n - 1) * n + n], H[(n - 1) * n + (n - 1)] - p, q);\n            H[(n - 1) * n + (n - 1)] = this.cdivr;\n            H[(n - 1) * n + n] = this.cdivi;\n          }\n          H[n * n + n - 1] = 0;\n          H[n * n + n] = 1;\n          for (i = n - 2; i >= 0; i--) {\n            var ra, sa, vr, vi;\n            ra = 0;\n            sa = 0;\n            for (j = l; j <= n; j++) {\n              ra = ra + H[i * this.n + j] * H[j * n + n - 1];\n              sa = sa + H[i * this.n + j] * H[j * n + n];\n            }\n            w = H[i * n + i] - p;\n            if (e[i] < 0) {\n              z = w;\n              r = ra;\n              s = sa;\n            } else {\n              l = i;\n              if (e[i] === 0) {\n                this.cdiv(-ra, -sa, w, q);\n                H[i * n + n - 1] = this.cdivr;\n                H[i * n + n] = this.cdivi;\n              } else {\n                x = H[i * n + i + 1];\n                y = H[(i + 1) * n + i];\n                vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                vi = (d[i] - p) * 2 * q;\n                if (vr === 0 && vi === 0) {\n                  vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                }\n                this.cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                H[i * n + n - 1] = this.cdivr;\n                H[i * n + n] = this.cdivi;\n                if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n                  H[(i + 1) * n + n - 1] = (-ra - w * H[i * n + n - 1] + q * H[i * n + n]) / x;\n                  H[(i + 1) * n + n] = (-sa - w * H[i * n + n] - q * H[i * n + n - 1]) / x;\n                } else {\n                  this.cdiv(-r - y * H[i * n + n - 1], -s - y * H[i * n + n], z, q);\n                  H[(i + 1) * n + n - 1] = this.cdivr;\n                  H[(i + 1) * n + n] = this.cdivi;\n                }\n              }\n              t = Math.max(Math.abs(H[i * n + n - 1]), Math.abs(H[i * n + n]));\n              if (eps * t * t > 1) {\n                for (j = i; j <= n; j++) {\n                  H[j * n + n - 1] = H[j * n + n - 1] / t;\n                  H[j * n + n] = H[j * n + n] / t;\n                }\n              }\n            }\n          }\n        }\n      }\n      for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n          for (j = i; j < nn; j++) {\n            V[i * this.n + j] = H[i * this.n + j];\n          }\n        }\n      }\n      for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n          z = 0;\n          for (k = low; k <= Math.min(j, high); k++) {\n            z = z + V[i * n + k] * H[k * n + j];\n          }\n          V[i * this.n + j] = z;\n        }\n      }\n    }\n  };\n  return EigenvalueDecomposition;\n});","\ndefine('DOT/LinearFunction',['require','DOT/dot','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Util');\n  dot.LinearFunction = function LinearFunction(a1, a2, b1, b2, clamp) {\n    clamp = _.isUndefined(clamp) ? false : clamp;\n    var map = function (a1, a2, b1, b2, a3, clamp) {\n      var b3 = dot.Util.linear(a1, a2, b1, b2, a3);\n      if (clamp) {\n        var max = Math.max(b1, b2);\n        var min = Math.min(b1, b2);\n        b3 = dot.Util.clamp(b3, min, max);\n      }\n      return b3;\n    };\n    var evaluate = function (a3) {\n      return map(a1, a2, b1, b2, a3, clamp);\n    };\n    evaluate.inverse = function (b3) {\n      return map(b1, b2, a1, a2, b3, clamp);\n    };\n    return evaluate;\n  };\n  return dot.LinearFunction;\n});","\ndefine('DOT/LUDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.LUDecomposition = function LUDecomposition(matrix) {\n    var i, j, k;\n    this.matrix = matrix;\n    this.LU = matrix.getArrayCopy();\n    var LU = this.LU;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.piv = new Uint32Array(m);\n    for (i = 0; i < m; i++) {\n      this.piv[i] = i;\n    }\n    this.pivsign = 1;\n    var LUcolj = new Float32Array(m);\n    for (j = 0; j < n; j++) {\n      for (i = 0; i < m; i++) {\n        LUcolj[i] = LU[matrix.index(i, j)];\n      }\n      for (i = 0; i < m; i++) {\n        var kmax = Math.min(i, j);\n        var s = 0;\n        for (k = 0; k < kmax; k++) {\n          var ik = matrix.index(i, k);\n          s += LU[ik] * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        LU[matrix.index(i, j)] = LUcolj[i];\n      }\n      var p = j;\n      for (i = j + 1; i < m; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n      if (p !== j) {\n        for (k = 0; k < n; k++) {\n          var pk = matrix.index(p, k);\n          var jk = matrix.index(j, k);\n          var t = LU[pk];\n          LU[pk] = LU[jk];\n          LU[jk] = t;\n        }\n        k = this.piv[p];\n        this.piv[p] = this.piv[j];\n        this.piv[j] = k;\n        this.pivsign = -this.pivsign;\n      }\n      if (j < m && LU[this.matrix.index(j, j)] !== 0) {\n        for (i = j + 1; i < m; i++) {\n          LU[matrix.index(i, j)] /= LU[matrix.index(j, j)];\n        }\n      }\n    }\n  };\n  var LUDecomposition = dot.LUDecomposition;\n  LUDecomposition.prototype = {\n    constructor: LUDecomposition,\n    isNonsingular: function () {\n      for (var j = 0; j < this.n; j++) {\n        var index = this.matrix.index(j, j);\n        if (this.LU[index] === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getL: function () {\n      var result = new dot.Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i > j) {\n            result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];\n          } else if (i === j) {\n            result.entries[result.index(i, j)] = 1;\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getU: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i <= j) {\n            result.entries[result.index(i, j)] = this.LU[this.matrix.index(i, j)];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getPivot: function () {\n      var p = new Uint32Array(this.m);\n      for (var i = 0; i < this.m; i++) {\n        p[i] = this.piv[i];\n      }\n      return p;\n    },\n    getDoublePivot: function () {\n      var vals = new Float32Array(this.m);\n      for (var i = 0; i < this.m; i++) {\n        vals[i] = this.piv[i];\n      }\n      return vals;\n    },\n    det: function () {\n      if (this.m !== this.n) {\n        throw new Error('Matrix must be square.');\n      }\n      var d = this.pivsign;\n      for (var j = 0; j < this.n; j++) {\n        d *= this.LU[this.matrix.index(j, j)];\n      }\n      return d;\n    },\n    solve: function (matrix) {\n      var i, j, k;\n      if (matrix.getRowDimension() !== this.m) {\n        throw new Error('Matrix row dimensions must agree.');\n      }\n      if (!this.isNonsingular()) {\n        throw new Error('Matrix is singular.');\n      }\n      var nx = matrix.getColumnDimension();\n      var Xmat = matrix.getArrayRowMatrix(this.piv, 0, nx - 1);\n      for (k = 0; k < this.n; k++) {\n        for (i = k + 1; i < this.n; i++) {\n          for (j = 0; j < nx; j++) {\n            Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];\n          }\n        }\n      }\n      for (k = this.n - 1; k >= 0; k--) {\n        for (j = 0; j < nx; j++) {\n          Xmat.entries[Xmat.index(k, j)] /= this.LU[this.matrix.index(k, k)];\n        }\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < nx; j++) {\n            Xmat.entries[Xmat.index(i, j)] -= Xmat.entries[Xmat.index(k, j)] * this.LU[this.matrix.index(i, k)];\n          }\n        }\n      }\n      return Xmat;\n    }\n  };\n  return LUDecomposition;\n});","\ndefine('PHET_CORE/isArray',['require'],function (require) {\n  'use strict';\n  return function isArray(array) {\n    return Object.prototype.toString.call(array) === '[object Array]';\n  };\n});","\ndefine('DOT/SingularValueDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.SingularValueDecomposition = function SingularValueDecomposition(matrix) {\n    this.matrix = matrix;\n    var Arg = matrix;\n    var A = Arg.getArrayCopy();\n    this.m = Arg.getRowDimension();\n    this.n = Arg.getColumnDimension();\n    var m = this.m;\n    var n = this.n;\n    var min = Math.min;\n    var max = Math.max;\n    var pow = Math.pow;\n    var abs = Math.abs;\n    var nu = min(m, n);\n    this.s = new Float32Array(min(m + 1, n));\n    var s = this.s;\n    this.U = new Float32Array(m * nu);\n    var U = this.U;\n    this.V = new Float32Array(n * n);\n    var V = this.V;\n    var e = new Float32Array(n);\n    var work = new Float32Array(m);\n    var wantu = true;\n    var wantv = true;\n    var i, j, k, t, f;\n    var cs, sn;\n    var hypot = dot.Matrix.hypot;\n    var nct = min(m - 1, n);\n    var nrt = max(0, min(n - 2, m));\n    for (k = 0; k < max(nct, nrt); k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (i = k; i < m; i++) {\n          s[k] = hypot(s[k], A[i * n + k]);\n        }\n        if (s[k] !== 0) {\n          if (A[k * n + k] < 0) {\n            s[k] = -s[k];\n          }\n          for (i = k; i < m; i++) {\n            A[i * n + k] /= s[k];\n          }\n          A[k * n + k] += 1;\n        }\n        s[k] = -s[k];\n      }\n      for (j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          t = 0;\n          for (i = k; i < m; i++) {\n            t += A[i * n + k] * A[i * n + j];\n          }\n          t = -t / A[k * n + k];\n          for (i = k; i < m; i++) {\n            A[i * n + j] += t * A[i * n + k];\n          }\n        }\n        e[j] = A[k * n + j];\n      }\n      if (wantu && k < nct) {\n        for (i = k; i < m; i++) {\n          U[i * nu + k] = A[i * n + k];\n        }\n      }\n      if (k < nrt) {\n        e[k] = 0;\n        for (i = k + 1; i < n; i++) {\n          e[k] = hypot(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = -e[k];\n          }\n          for (i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (j = k + 1; j < n; j++) {\n            for (i = k + 1; i < m; i++) {\n              work[i] += e[j] * A[i * n + j];\n            }\n          }\n          for (j = k + 1; j < n; j++) {\n            t = -e[j] / e[k + 1];\n            for (i = k + 1; i < m; i++) {\n              A[i * n + j] += t * work[i];\n            }\n          }\n        }\n        if (wantv) {\n          for (i = k + 1; i < n; i++) {\n            V[i * n + k] = e[i];\n          }\n        }\n      }\n    }\n    var p = min(n, m + 1);\n    if (nct < n) {\n      s[nct] = A[nct * n + nct];\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = A[nrt * n + p - 1];\n    }\n    e[p - 1] = 0;\n    if (wantu) {\n      for (j = nct; j < nu; j++) {\n        for (i = 0; i < m; i++) {\n          U[i * nu + j] = 0;\n        }\n        U[j * nu + j] = 1;\n      }\n      for (k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (j = k + 1; j < nu; j++) {\n            t = 0;\n            for (i = k; i < m; i++) {\n              t += U[i * nu + k] * U[i * nu + j];\n            }\n            t = -t / U[k * nu + k];\n            for (i = k; i < m; i++) {\n              U[i * nu + j] += t * U[i * nu + k];\n            }\n          }\n          for (i = k; i < m; i++) {\n            U[i * nu + k] = -U[i * nu + k];\n          }\n          U[k * nu + k] = 1 + U[k * nu + k];\n          for (i = 0; i < k - 1; i++) {\n            U[i * nu + k] = 0;\n          }\n        } else {\n          for (i = 0; i < m; i++) {\n            U[i * nu + k] = 0;\n          }\n          U[k * nu + k] = 1;\n        }\n      }\n    }\n    if (wantv) {\n      for (k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (j = k + 1; j < nu; j++) {\n            t = 0;\n            for (i = k + 1; i < n; i++) {\n              t += V[i * n + k] * V[i * n + j];\n            }\n            t = -t / V[(k + 1) * n + k];\n            for (i = k + 1; i < n; i++) {\n              V[i * n + j] += t * V[i * n + k];\n            }\n          }\n        }\n        for (i = 0; i < n; i++) {\n          V[i * n + k] = 0;\n        }\n        V[k * n + k] = 1;\n      }\n    }\n    var pp = p - 1;\n    var iter = 0;\n    var eps = pow(2, -52);\n    var tiny = pow(2, -966);\n    while (p > 0) {\n      var kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        if (abs(e[k]) <= tiny + eps * (abs(s[k]) + abs(s[k + 1]))) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        var ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          t = (ks !== p ? abs(e[ks]) : 0) + (ks !== k + 1 ? abs(e[ks - 1]) : 0);\n          if (abs(s[ks]) <= tiny + eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n      k++;\n      switch (kase) {\n      case 1: {\n          f = e[p - 2];\n          e[p - 2] = 0;\n          for (j = p - 2; j >= k; j--) {\n            t = hypot(s[j], f);\n            cs = s[j] / t;\n            sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (i = 0; i < n; i++) {\n                t = cs * V[i * n + j] + sn * V[i * n + p - 1];\n                V[i * n + p - 1] = -sn * V[i * n + j] + cs * V[i * n + p - 1];\n                V[i * n + j] = t;\n              }\n            }\n          }\n        }\n        break;\n      case 2: {\n          f = e[k - 1];\n          e[k - 1] = 0;\n          for (j = k; j < p; j++) {\n            t = hypot(s[j], f);\n            cs = s[j] / t;\n            sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (i = 0; i < m; i++) {\n                t = cs * U[i * nu + j] + sn * U[i * nu + k - 1];\n                U[i * nu + k - 1] = -sn * U[i * nu + j] + cs * U[i * nu + k - 1];\n                U[i * nu + j] = t;\n              }\n            }\n          }\n        }\n        break;\n      case 3: {\n          var scale = max(max(max(max(abs(s[p - 1]), abs(s[p - 2])), abs(e[p - 2])), abs(s[k])), abs(e[k]));\n          var sp = s[p - 1] / scale;\n          var spm1 = s[p - 2] / scale;\n          var epm1 = e[p - 2] / scale;\n          var sk = s[k] / scale;\n          var ek = e[k] / scale;\n          var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          var c = sp * epm1 * (sp * epm1);\n          var shift = 0;\n          if (b !== 0 || c !== 0) {\n            shift = Math.sqrt(b * b + c);\n            if (b < 0) {\n              shift = -shift;\n            }\n            shift = c / (b + shift);\n          }\n          f = (sk + sp) * (sk - sp) + shift;\n          var g = sk * ek;\n          for (j = k; j < p - 1; j++) {\n            t = hypot(f, g);\n            cs = f / t;\n            sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (i = 0; i < n; i++) {\n                t = cs * V[i * n + j] + sn * V[i * n + j + 1];\n                V[i * n + j + 1] = -sn * V[i * n + j] + cs * V[i * n + j + 1];\n                V[i * n + j] = t;\n              }\n            }\n            t = hypot(f, g);\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (i = 0; i < m; i++) {\n                t = cs * U[i * nu + j] + sn * U[i * nu + j + 1];\n                U[i * nu + j + 1] = -sn * U[i * nu + j] + cs * U[i * nu + j + 1];\n                U[i * nu + j] = t;\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n        }\n        break;\n      case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (i = 0; i <= pp; i++) {\n                V[i * n + k] = -V[i * n + k];\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (i = 0; i < n; i++) {\n                t = V[i * n + k + 1];\n                V[i * n + k + 1] = V[i * n + k];\n                V[i * n + k] = t;\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (i = 0; i < m; i++) {\n                t = U[i * nu + k + 1];\n                U[i * nu + k + 1] = U[i * nu + k];\n                U[i * nu + k] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n        }\n        break;\n      }\n    }\n  };\n  var SingularValueDecomposition = dot.SingularValueDecomposition;\n  SingularValueDecomposition.prototype = {\n    constructor: SingularValueDecomposition,\n    getU: function () {\n      return new dot.Matrix(this.m, Math.min(this.m + 1, this.n), this.U, true);\n    },\n    getV: function () {\n      return new dot.Matrix(this.n, this.n, this.V, true);\n    },\n    getSingularValues: function () {\n      return this.s;\n    },\n    getS: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(i, j)] = 0;\n        }\n        result.entries[result.index(i, i)] = this.s[i];\n      }\n      return result;\n    },\n    norm2: function () {\n      return this.s[0];\n    },\n    cond: function () {\n      return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    rank: function () {\n      var eps = Math.pow(2, -23);\n      var tol = Math.max(this.m, this.n) * this.s[0] * eps;\n      var r = 0;\n      for (var i = 0; i < this.s.length; i++) {\n        if (this.s[i] > tol) {\n          r++;\n        }\n      }\n      return r;\n    }\n  };\n});","\ndefine('DOT/QRDecomposition',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  dot.QRDecomposition = function QRDecomposition(matrix) {\n    this.matrix = matrix;\n    this.QR = matrix.getArrayCopy();\n    var QR = this.QR;\n    this.m = matrix.getRowDimension();\n    var m = this.m;\n    this.n = matrix.getColumnDimension();\n    var n = this.n;\n    this.Rdiag = new Float32Array(n);\n    var i, j, k;\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = dot.Matrix.hypot(nrm, QR[this.matrix.index(i, k)]);\n      }\n      if (nrm !== 0) {\n        if (QR[this.matrix.index(k, k)] < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          QR[this.matrix.index(i, k)] /= nrm;\n        }\n        QR[this.matrix.index(k, k)] += 1;\n        for (j = k + 1; j < n; j++) {\n          var s = 0;\n          for (i = k; i < m; i++) {\n            s += QR[this.matrix.index(i, k)] * QR[this.matrix.index(i, j)];\n          }\n          s = -s / QR[this.matrix.index(k, k)];\n          for (i = k; i < m; i++) {\n            QR[this.matrix.index(i, j)] += s * QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      this.Rdiag[k] = -nrm;\n    }\n  };\n  var QRDecomposition = dot.QRDecomposition;\n  QRDecomposition.prototype = {\n    constructor: QRDecomposition,\n    isFullRank: function () {\n      for (var j = 0; j < this.n; j++) {\n        if (this.Rdiag[j] === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getH: function () {\n      var result = new dot.Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i >= j) {\n            result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getR: function () {\n      var result = new dot.Matrix(this.n, this.n);\n      for (var i = 0; i < this.n; i++) {\n        for (var j = 0; j < this.n; j++) {\n          if (i < j) {\n            result.entries[result.index(i, j)] = this.QR[this.matrix.index(i, j)];\n          } else if (i === j) {\n            result.entries[result.index(i, j)] = this.Rdiag[i];\n          } else {\n            result.entries[result.index(i, j)] = 0;\n          }\n        }\n      }\n      return result;\n    },\n    getQ: function () {\n      var i, j, k;\n      var result = new dot.Matrix(this.m, this.n);\n      for (k = this.n - 1; k >= 0; k--) {\n        for (i = 0; i < this.m; i++) {\n          result.entries[result.index(i, k)] = 0;\n        }\n        result.entries[result.index(k, k)] = 1;\n        for (j = k; j < this.n; j++) {\n          if (this.QR[this.matrix.index(k, k)] !== 0) {\n            var s = 0;\n            for (i = k; i < this.m; i++) {\n              s += this.QR[this.matrix.index(i, k)] * result.entries[result.index(i, j)];\n            }\n            s = -s / this.QR[this.matrix.index(k, k)];\n            for (i = k; i < this.m; i++) {\n              result.entries[result.index(i, j)] += s * this.QR[this.matrix.index(i, k)];\n            }\n          }\n        }\n      }\n      return result;\n    },\n    solve: function (matrix) {\n      if (matrix.getRowDimension() !== this.m) {\n        throw new Error('Matrix row dimensions must agree.');\n      }\n      if (!this.isFullRank()) {\n        throw new Error('Matrix is rank deficient.');\n      }\n      var i, j, k;\n      var nx = matrix.getColumnDimension();\n      var X = matrix.getArrayCopy();\n      for (k = 0; k < this.n; k++) {\n        for (j = 0; j < nx; j++) {\n          var s = 0;\n          for (i = k; i < this.m; i++) {\n            s += this.QR[this.matrix.index(i, k)] * X[matrix.index(i, j)];\n          }\n          s = -s / this.QR[this.matrix.index(k, k)];\n          for (i = k; i < this.m; i++) {\n            X[matrix.index(i, j)] += s * this.QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      for (k = this.n - 1; k >= 0; k--) {\n        for (j = 0; j < nx; j++) {\n          X[matrix.index(k, j)] /= this.Rdiag[k];\n        }\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < nx; j++) {\n            X[matrix.index(i, j)] -= X[matrix.index(k, j)] * this.QR[this.matrix.index(i, k)];\n          }\n        }\n      }\n      return new dot.Matrix(X, this.n, nx).getMatrix(0, this.n - 1, 0, nx - 1);\n    }\n  };\n  return QRDecomposition;\n});","\ndefine('DOT/Matrix',['require','DOT/dot','PHET_CORE/isArray','DOT/SingularValueDecomposition','DOT/LUDecomposition','DOT/QRDecomposition','DOT/EigenvalueDecomposition','DOT/Vector2','DOT/Vector3','DOT/Vector4'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var Float32Array = window.Float32Array || Array;\n  var isArray = require('PHET_CORE/isArray');\n  require('DOT/SingularValueDecomposition');\n  require('DOT/LUDecomposition');\n  require('DOT/QRDecomposition');\n  require('DOT/EigenvalueDecomposition');\n  require('DOT/Vector2');\n  require('DOT/Vector3');\n  require('DOT/Vector4');\n  dot.Matrix = function Matrix(m, n, filler, fast) {\n    this.m = m;\n    this.n = n;\n    var size = m * n;\n    this.size = size;\n    var i;\n    if (fast) {\n      this.entries = filler;\n    } else {\n      if (!filler) {\n        filler = 0;\n      }\n      this.entries = new Float32Array(size);\n      if (isArray(filler)) {\n        null;\n        for (i = 0; i < size; i++) {\n          this.entries[i] = filler[i];\n        }\n      } else {\n        for (i = 0; i < size; i++) {\n          this.entries[i] = filler;\n        }\n      }\n    }\n  };\n  var Matrix = dot.Matrix;\n  Matrix.hypot = function hypot(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n      r = b / a;\n      r = Math.abs(a) * Math.sqrt(1 + r * r);\n    } else if (b !== 0) {\n      r = a / b;\n      r = Math.abs(b) * Math.sqrt(1 + r * r);\n    } else {\n      r = 0;\n    }\n    return r;\n  };\n  Matrix.prototype = {\n    constructor: Matrix,\n    copy: function () {\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.size; i++) {\n        result.entries[i] = this.entries[i];\n      }\n      return result;\n    },\n    getArray: function () {\n      return this.entries;\n    },\n    getArrayCopy: function () {\n      return new Float32Array(this.entries);\n    },\n    getRowDimension: function () {\n      return this.m;\n    },\n    getColumnDimension: function () {\n      return this.n;\n    },\n    index: function (i, j) {\n      return i * this.n + j;\n    },\n    get: function (i, j) {\n      return this.entries[this.index(i, j)];\n    },\n    set: function (i, j, s) {\n      this.entries[this.index(i, j)] = s;\n    },\n    getMatrix: function (i0, i1, j0, j1) {\n      var result = new Matrix(i1 - i0 + 1, j1 - j0 + 1);\n      for (var i = i0; i <= i1; i++) {\n        for (var j = j0; j <= j1; j++) {\n          result.entries[result.index(i - i0, j - j0)] = this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    getArrayRowMatrix: function (r, j0, j1) {\n      var result = new Matrix(r.length, j1 - j0 + 1);\n      for (var i = 0; i < r.length; i++) {\n        for (var j = j0; j <= j1; j++) {\n          result.entries[result.index(i, j - j0)] = this.entries[this.index(r[i], j)];\n        }\n      }\n      return result;\n    },\n    transpose: function () {\n      var result = new Matrix(this.n, this.m);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(j, i)] = this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    norm1: function () {\n      var f = 0;\n      for (var j = 0; j < this.n; j++) {\n        var s = 0;\n        for (var i = 0; i < this.m; i++) {\n          s += Math.abs(this.entries[this.index(i, j)]);\n        }\n        f = Math.max(f, s);\n      }\n      return f;\n    },\n    norm2: function () {\n      return new dot.SingularValueDecomposition(this).norm2();\n    },\n    normInf: function () {\n      var f = 0;\n      for (var i = 0; i < this.m; i++) {\n        var s = 0;\n        for (var j = 0; j < this.n; j++) {\n          s += Math.abs(this.entries[this.index(i, j)]);\n        }\n        f = Math.max(f, s);\n      }\n      return f;\n    },\n    normF: function () {\n      var f = 0;\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          f = Matrix.hypot(f, this.entries[this.index(i, j)]);\n        }\n      }\n      return f;\n    },\n    uminus: function () {\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          result.entries[result.index(i, j)] = -this.entries[this.index(i, j)];\n        }\n      }\n      return result;\n    },\n    plus: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          result.entries[index] = this.entries[index] + matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    plusEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          this.entries[index] = this.entries[index] + matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    minus: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = this.entries[index] - matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    minusEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] - matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayTimes: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = result.index(i, j);\n          result.entries[index] = this.entries[index] * matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayTimesEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] * matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayRightDivide: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = this.entries[index] / matrix.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayRightDivideEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = this.entries[index] / matrix.entries[index];\n        }\n      }\n      return this;\n    },\n    arrayLeftDivide: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      var result = new Matrix(this.m, this.n);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          result.entries[index] = matrix.entries[index] / this.entries[index];\n        }\n      }\n      return result;\n    },\n    arrayLeftDivideEquals: function (matrix) {\n      this.checkMatrixDimensions(matrix);\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = matrix.entries[index] / this.entries[index];\n        }\n      }\n      return this;\n    },\n    times: function (matrixOrScalar) {\n      var result;\n      var i, j, k, s;\n      var matrix;\n      if (matrixOrScalar.isMatrix) {\n        matrix = matrixOrScalar;\n        if (matrix.m !== this.n) {\n          throw new Error('Matrix inner dimensions must agree.');\n        }\n        result = new Matrix(this.m, matrix.n);\n        var matrixcolj = new Float32Array(this.n);\n        for (j = 0; j < matrix.n; j++) {\n          for (k = 0; k < this.n; k++) {\n            matrixcolj[k] = matrix.entries[matrix.index(k, j)];\n          }\n          for (i = 0; i < this.m; i++) {\n            s = 0;\n            for (k = 0; k < this.n; k++) {\n              s += this.entries[this.index(i, k)] * matrixcolj[k];\n            }\n            result.entries[result.index(i, j)] = s;\n          }\n        }\n        return result;\n      } else {\n        s = matrixOrScalar;\n        result = new Matrix(this.m, this.n);\n        for (i = 0; i < this.m; i++) {\n          for (j = 0; j < this.n; j++) {\n            result.entries[result.index(i, j)] = s * this.entries[this.index(i, j)];\n          }\n        }\n        return result;\n      }\n    },\n    timesEquals: function (s) {\n      for (var i = 0; i < this.m; i++) {\n        for (var j = 0; j < this.n; j++) {\n          var index = this.index(i, j);\n          this.entries[index] = s * this.entries[index];\n        }\n      }\n      return this;\n    },\n    solve: function (matrix) {\n      return this.m === this.n ? new dot.LUDecomposition(this).solve(matrix) : new dot.QRDecomposition(this).solve(matrix);\n    },\n    solveTranspose: function (matrix) {\n      return this.transpose().solve(matrix.transpose());\n    },\n    inverse: function () {\n      return this.solve(Matrix.identity(this.m, this.m));\n    },\n    det: function () {\n      return new dot.LUDecomposition(this).det();\n    },\n    rank: function () {\n      return new dot.SingularValueDecomposition(this).rank();\n    },\n    cond: function () {\n      return new dot.SingularValueDecomposition(this).cond();\n    },\n    trace: function () {\n      var t = 0;\n      for (var i = 0; i < Math.min(this.m, this.n); i++) {\n        t += this.entries[this.index(i, i)];\n      }\n      return t;\n    },\n    checkMatrixDimensions: function (matrix) {\n      if (matrix.m !== this.m || matrix.n !== this.n) {\n        throw new Error('Matrix dimensions must agree.');\n      }\n    },\n    toString: function () {\n      var result = '';\n      result += 'dim: ' + this.getRowDimension() + 'x' + this.getColumnDimension() + '\\n';\n      for (var row = 0; row < this.getRowDimension(); row++) {\n        for (var col = 0; col < this.getColumnDimension(); col++) {\n          result += this.get(row, col) + ' ';\n        }\n        result += '\\n';\n      }\n      return result;\n    },\n    extractVector2: function (column) {\n      null;\n      return new dot.Vector2(this.get(0, column), this.get(1, column));\n    },\n    extractVector3: function (column) {\n      null;\n      return new dot.Vector3(this.get(0, column), this.get(1, column), this.get(2, column));\n    },\n    extractVector4: function (column) {\n      null;\n      return new dot.Vector4(this.get(0, column), this.get(1, column), this.get(2, column), this.get(3, column));\n    },\n    isMatrix: true\n  };\n  Matrix.identity = function (m, n) {\n    var result = new Matrix(m, n);\n    for (var i = 0; i < m; i++) {\n      for (var j = 0; j < n; j++) {\n        result.entries[result.index(i, j)] = i === j ? 1 : 0;\n      }\n    }\n    return result;\n  };\n  Matrix.rowVector2 = function (vector) {\n    return new Matrix(1, 2, [\n      vector.x,\n      vector.y\n    ]);\n  };\n  Matrix.rowVector3 = function (vector) {\n    return new Matrix(1, 3, [\n      vector.x,\n      vector.y,\n      vector.z\n    ]);\n  };\n  Matrix.rowVector4 = function (vector) {\n    return new Matrix(1, 4, [\n      vector.x,\n      vector.y,\n      vector.z,\n      vector.w\n    ]);\n  };\n  Matrix.rowVector = function (vector) {\n    if (vector.isVector2) {\n      return Matrix.rowVector2(vector);\n    } else if (vector.isVector3) {\n      return Matrix.rowVector3(vector);\n    } else if (vector.isVector4) {\n      return Matrix.rowVector4(vector);\n    } else {\n      throw new Error('undetected type of vector: ' + vector.toString());\n    }\n  };\n  Matrix.columnVector2 = function (vector) {\n    return new Matrix(2, 1, [\n      vector.x,\n      vector.y\n    ]);\n  };\n  Matrix.columnVector3 = function (vector) {\n    return new Matrix(3, 1, [\n      vector.x,\n      vector.y,\n      vector.z\n    ]);\n  };\n  Matrix.columnVector4 = function (vector) {\n    return new Matrix(4, 1, [\n      vector.x,\n      vector.y,\n      vector.z,\n      vector.w\n    ]);\n  };\n  Matrix.columnVector = function (vector) {\n    if (vector.isVector2) {\n      return Matrix.columnVector2(vector);\n    } else if (vector.isVector3) {\n      return Matrix.columnVector3(vector);\n    } else if (vector.isVector4) {\n      return Matrix.columnVector4(vector);\n    } else {\n      throw new Error('undetected type of vector: ' + vector.toString());\n    }\n  };\n  Matrix.fromVectors2 = function (vectors) {\n    var dimension = 2;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  Matrix.fromVectors3 = function (vectors) {\n    var dimension = 3;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n      data[i + 2 * n] = vector.z;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  Matrix.fromVectors4 = function (vectors) {\n    var dimension = 4;\n    var n = vectors.length;\n    var data = new Float32Array(dimension * n);\n    for (var i = 0; i < n; i++) {\n      var vector = vectors[i];\n      data[i] = vector.x;\n      data[i + n] = vector.y;\n      data[i + 2 * n] = vector.z;\n      data[i + 3 * n] = vector.w;\n    }\n    return new Matrix(dimension, n, data, true);\n  };\n  return Matrix;\n});","\ndefine('DOT/Permutation',['require','DOT/dot','PHET_CORE/isArray','DOT/Util'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var isArray = require('PHET_CORE/isArray');\n  require('DOT/Util');\n  var Permutation = function Permutation(indices) {\n    this.indices = indices;\n  };\n  Permutation.identity = function (size) {\n    null;\n    var indices = new Array(size);\n    for (var i = 0; i < size; i++) {\n      indices[i] = i;\n    }\n    return new Permutation(indices);\n  };\n  Permutation.permutations = function (size) {\n    var result = [];\n    Permutation.forEachPermutation(dot.rangeInclusive(0, size - 1), function (integers) {\n      result.push(new Permutation(integers));\n    });\n    return result;\n  };\n  function recursiveForEachPermutation(array, prefix, callback) {\n    if (array.length === 0) {\n      callback.call(undefined, prefix);\n    } else {\n      for (var i = 0; i < array.length; i++) {\n        var element = array[i];\n        var nextArray = array.slice(0);\n        nextArray.splice(i, 1);\n        var nextPrefix = prefix.slice(0);\n        nextPrefix.push(element);\n        recursiveForEachPermutation(nextArray, nextPrefix, callback);\n      }\n    }\n  }\n  Permutation.forEachPermutation = function (array, callback) {\n    recursiveForEachPermutation(array, [], callback);\n  };\n  Permutation.prototype = {\n    constructor: Permutation,\n    size: function () {\n      return this.indices.length;\n    },\n    apply: function (arrayOrInt) {\n      if (isArray(arrayOrInt)) {\n        if (arrayOrInt.length !== this.size()) {\n          throw new Error('Permutation length ' + this.size() + ' not equal to list length ' + arrayOrInt.length);\n        }\n        var result = new Array(arrayOrInt.length);\n        for (var i = 0; i < arrayOrInt.length; i++) {\n          result[i] = arrayOrInt[this.indices[i]];\n        }\n        return result;\n      } else {\n        return this.indices[arrayOrInt];\n      }\n    },\n    inverted: function () {\n      var newPermutation = new Array(this.size());\n      for (var i = 0; i < this.size(); i++) {\n        newPermutation[this.indices[i]] = i;\n      }\n      return new Permutation(newPermutation);\n    },\n    withIndicesPermuted: function (indices) {\n      var result = [];\n      var that = this;\n      Permutation.forEachPermutation(indices, function (integers) {\n        var oldIndices = that.indices;\n        var newPermutation = oldIndices.slice(0);\n        for (var i = 0; i < indices.length; i++) {\n          newPermutation[indices[i]] = oldIndices[integers[i]];\n        }\n        result.push(new Permutation(newPermutation));\n      });\n      return result;\n    },\n    toString: function () {\n      return 'P[' + this.indices.join(', ') + ']';\n    }\n  };\n  Permutation.testMe = function (console) {\n    var a = new Permutation([\n        1,\n        4,\n        3,\n        2,\n        0\n      ]);\n    console.log(a.toString());\n    var b = a.inverted();\n    console.log(b.toString());\n    console.log(b.withIndicesPermuted([\n      0,\n      3,\n      4\n    ]).toString());\n    console.log(Permutation.permutations(4).toString());\n  };\n  return Permutation;\n});","\ndefine('DOT/Ray3',['require','DOT/dot'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  dot.Ray3 = function Ray3(pos, dir) {\n    this.pos = pos;\n    this.dir = dir;\n  };\n  var Ray3 = dot.Ray3;\n  Ray3.prototype = {\n    constructor: Ray3,\n    shifted: function (distance) {\n      return new Ray3(this.pointAtDistance(distance), this.dir);\n    },\n    pointAtDistance: function (distance) {\n      return this.pos.plus(this.dir.timesScalar(distance));\n    },\n    toString: function () {\n      return this.pos.toString() + ' => ' + this.dir.toString();\n    }\n  };\n  return Ray3;\n});","\ndefine('DOT/Rectangle',['require','DOT/dot','PHET_CORE/inherit','DOT/Bounds2'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  var inherit = require('PHET_CORE/inherit');\n  var Bounds2 = require('DOT/Bounds2');\n  dot.Rectangle = function Rectangle(x, y, width, height) {\n    null;\n    Bounds2.call(this, x, y, x + width, y + height);\n  };\n  var Rectangle = dot.Rectangle;\n  inherit(Bounds2, Rectangle);\n  return Rectangle;\n});","\ndefine('DOT/Transform4',['require','DOT/dot','DOT/Matrix4','DOT/Vector3','DOT/Ray3'],function (require) {\n  'use strict';\n  var dot = require('DOT/dot');\n  require('DOT/Matrix4');\n  require('DOT/Vector3');\n  require('DOT/Ray3');\n  dot.Transform4 = function Transform4(matrix) {\n    this.set(matrix === undefined ? dot.Matrix4.IDENTITY : matrix);\n  };\n  var Transform4 = dot.Transform4;\n  Transform4.prototype = {\n    constructor: Transform4,\n    set: function (matrix) {\n      this.matrix = matrix;\n      this.inverse = null;\n      this.matrixTransposed = null;\n      this.inverseTransposed = null;\n    },\n    getMatrix: function () {\n      return this.matrix;\n    },\n    getInverse: function () {\n      if (this.inverse === null) {\n        this.inverse = this.matrix.inverted();\n      }\n      return this.inverse;\n    },\n    getMatrixTransposed: function () {\n      if (this.matrixTransposed === null) {\n        this.matrixTransposed = this.matrix.transposed();\n      }\n      return this.matrixTransposed;\n    },\n    getInverseTransposed: function () {\n      if (this.inverseTransposed === null) {\n        this.inverseTransposed = this.getInverse().transposed();\n      }\n      return this.inverseTransposed;\n    },\n    prepend: function (matrix) {\n      this.set(matrix.timesMatrix(this.matrix));\n    },\n    append: function (matrix) {\n      this.set(this.matrix.timesMatrix(matrix));\n    },\n    prependTransform: function (transform) {\n      this.prepend(transform.matrix);\n    },\n    appendTransform: function (transform) {\n      this.append(transform.matrix);\n    },\n    isIdentity: function () {\n      return this.matrix.type === dot.Matrix4.Types.IDENTITY;\n    },\n    applyToCanvasContext: function (context) {\n      context.setTransform(this.matrix.m00(), this.matrix.m10(), this.matrix.m01(), this.matrix.m11(), this.matrix.m03(), this.matrix.m13());\n    },\n    transformPosition3: function (vec3) {\n      return this.matrix.timesVector3(vec3);\n    },\n    transformDelta3: function (vec3) {\n      return this.matrix.timesRelativeVector3(vec3);\n    },\n    transformNormal3: function (vec3) {\n      return this.getInverse().timesTransposeVector3(vec3);\n    },\n    transformDeltaX: function (x) {\n      return this.transformDelta3(new dot.Vector3(x, 0, 0)).x;\n    },\n    transformDeltaY: function (y) {\n      return this.transformDelta3(new dot.Vector3(0, y, 0)).y;\n    },\n    transformDeltaZ: function (z) {\n      return this.transformDelta3(new dot.Vector3(0, 0, z)).z;\n    },\n    transformRay: function (ray) {\n      return new dot.Ray3(this.transformPosition3(ray.pos), this.transformPosition3(ray.pos.plus(ray.dir)).minus(this.transformPosition3(ray.pos)));\n    },\n    inversePosition3: function (vec3) {\n      return this.getInverse().timesVector3(vec3);\n    },\n    inverseDelta3: function (vec3) {\n      return this.inversePosition3(vec3).minus(this.inversePosition3(dot.Vector3.ZERO));\n    },\n    inverseNormal3: function (vec3) {\n      return this.matrix.timesTransposeVector3(vec3);\n    },\n    inverseDeltaX: function (x) {\n      return this.inverseDelta3(new dot.Vector3(x, 0, 0)).x;\n    },\n    inverseDeltaY: function (y) {\n      return this.inverseDelta3(new dot.Vector3(0, y, 0)).y;\n    },\n    inverseDeltaZ: function (z) {\n      return this.inverseDelta3(new dot.Vector3(0, 0, z)).z;\n    },\n    inverseRay: function (ray) {\n      return new dot.Ray3(this.inversePosition3(ray.pos), this.inversePosition3(ray.pos.plus(ray.dir)).minus(this.inversePosition3(ray.pos)));\n    }\n  };\n  return Transform4;\n});","\ndefine('DOT/main',[\n  'DOT/dot',\n  'DOT/Bounds2',\n  'DOT/Complex',\n  'DOT/ConvexHull2',\n  'DOT/Dimension2',\n  'DOT/EigenvalueDecomposition',\n  'DOT/LinearFunction',\n  'DOT/LUDecomposition',\n  'DOT/Matrix',\n  'DOT/Matrix3',\n  'DOT/Matrix4',\n  'DOT/Permutation',\n  'DOT/QRDecomposition',\n  'DOT/Ray2',\n  'DOT/Ray3',\n  'DOT/Rectangle',\n  'DOT/SingularValueDecomposition',\n  'DOT/Transform3',\n  'DOT/Transform4',\n  'DOT/Util',\n  'DOT/Vector2',\n  'DOT/Vector3',\n  'DOT/Vector4'\n], function (dot) {\n  'use strict';\n  return dot;\n});","\ndefine('PHET_CORE/callSuper',['require'],function (require) {\n  'use strict';\n  function callSuper(supertype, name, context) {\n    (function () {\n      var fn = supertype.prototype[name];\n      Function.call.apply(fn, arguments);\n    }(context));\n  }\n  return callSuper;\n});","\ndefine('PHET_CORE/inheritPrototype',['require'],function (require) {\n  'use strict';\n  function inheritPrototype(subtype, supertype) {\n    var prototype = Object(supertype.prototype);\n    prototype.constructor = subtype;\n    subtype.prototype = prototype;\n  }\n  return inheritPrototype;\n});","\ndefine('PHET_CORE/loadScript',['require'],function (require) {\n  'use strict';\n  return function loadScript(args) {\n    if (typeof args === 'string') {\n      args = { src: args };\n    }\n    var src = args.src;\n    var callback = args.callback;\n    var async = args.async === undefined ? true : args.async;\n    var cacheBuster = args.cacheBuster === undefined ? false : args.cacheBuster;\n    var called = false;\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = async;\n    script.onload = script.onreadystatechange = function () {\n      var state = this.readyState;\n      if (state && state !== 'complete' && state !== 'loaded') {\n        return;\n      }\n      if (!called) {\n        called = true;\n        if (callback) {\n          callback();\n        }\n      }\n    };\n    script.src = src + (cacheBuster ? '?random=' + Math.random().toFixed(10) : '');\n    var other = document.getElementsByTagName('script')[0];\n    other.parentNode.insertBefore(script, other);\n  };\n});","\ndefine('PHET_CORE/main',['require','PHET_CORE/callSuper','PHET_CORE/collect','PHET_CORE/escapeHTML','PHET_CORE/inherit','PHET_CORE/inheritPrototype','PHET_CORE/isArray','PHET_CORE/extend','PHET_CORE/loadScript','PHET_CORE/phetAllocation','PHET_CORE/Poolable'],function (require) {\n  'use strict';\n  return {\n    callSuper: require('PHET_CORE/callSuper'),\n    collect: require('PHET_CORE/collect'),\n    escapeHTML: require('PHET_CORE/escapeHTML'),\n    inherit: require('PHET_CORE/inherit'),\n    inheritPrototype: require('PHET_CORE/inheritPrototype'),\n    isArray: require('PHET_CORE/isArray'),\n    extend: require('PHET_CORE/extend'),\n    loadScript: require('PHET_CORE/loadScript'),\n    phetAllocation: require('PHET_CORE/phetAllocation'),\n    Poolable: require('PHET_CORE/Poolable')\n  };\n});","\nif (window.has) {\n  window.has.add('assert.dot', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n  window.has.add('assert.kite', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n  window.has.add('assert.kite.extra', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n  window.has.add('assert.scenery', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n  window.has.add('assert.scenery.extra', function (global, document, anElement) {\n    'use strict';\n    return false;\n  });\n}\nrequire.config({\n  deps: [\n    'main',\n    'KITE/main',\n    'DOT/main',\n    'PHET_CORE/main'\n  ],\n  paths: {\n    underscore: '../../sherpa/lodash-2.0.0',\n    jquery: '../../sherpa/jquery-2.0.3',\n    SCENERY: '.',\n    KITE: '../common/kite/js',\n    DOT: '../common/dot/js',\n    PHET_CORE: '../common/phet-core/js',\n    ASSERT: '../common/assert/js'\n  },\n  shim: {\n    underscore: { exports: '_' },\n    jquery: { exports: '$' }\n  },\n  urlArgs: new Date().getTime()\n});\ndefine(\"production-config\", function(){});\n"]}